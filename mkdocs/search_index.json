{
    "docs": [
        {
            "location": "/", 
            "text": "siddhi-io-http\n\n\nThe \nsiddhi-io-http extension\n is an extension to \nSiddhi\n that allows you to receive and publish events via http and https transports. This extension can work with WSO2 Stream Processor. It can also run with standalone Siddhi.\n\n\nFind some useful links below:\n\n\n\n\nSource code\n\n\nReleases\n\n\nIssue tracker\n\n\n\n\nLatest API Docs\n\n\nLatest API Docs is \n1.0.21\n.\n\n\nHow to use\n\n\nUsing the extension in \nWSO2 Stream Processor\n\n\n\n\n\n\nYou can use this extension with the latest \nWSO2 Stream Processor\n that is a part of the \nWSO2 Analytics\n offering, with editor, debugger and simulation support. \n\n\n\n\n\n\nThis extension is shipped with WSO2 Stream Processor by default. If you need to use an alternative version of this extension you can replace the component \njar\n that can be found in the \nSTREAM_PROCESSOR_HOME\n/lib\n directory with the component jar of the relevant version.\n\n\n\n\n\n\nUsing the extension as a \njava library\n\n\n\n\nThis extension can be added as a maven dependency to your project together with other Siddhi dependencies.\n\n\n\n\n     \ndependency\n\n        \ngroupId\norg.wso2.extension.siddhi.io.http\n/groupId\n\n        \nartifactId\nsiddhi-io-http\n/artifactId\n\n        \nversion\nx.x.x\n/version\n\n     \n/dependency\n\n\n\n\n\nJenkins Build Status\n\n\n\n\n\n\n\n\n\n\nBranch\n\n\nBuild Status\n\n\n\n\n\n\n\n\n\n\nmaster\n\n\n\n\n\n\n\n\n\n\n\n\nFeatures\n\n\n\n\nhttp\n \n(\n(Sink)\n)\nThis extension publish the HTTP events in any HTTP method  POST, GET, PUT, DELETE  via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically.\n\n\nhttp-response\n \n(\n(Sink)\n)\nThis extension send the response to the http-sync source having the same source.id. user can add any number of response headers for each event dynamically.\n\n\nhttp\n \n(\n(Source)\n)\nThe HTTP source receives POST requests via HTTP or HTTPS in format such as \ntext\n, \nXML\n and \nJSON\n. If required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service.\n\n\nhttp-request\n \n(\n(Source)\n)\nThe HTTP source receives POST requests via HTTP or HTTPS in format such as \ntext\n, \nXML\n and \nJSON\n. If required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service.\n\n\n\n\nHow to Contribute\n\n\n\n\n\n\nReport issues at \nGitHub Issue Tracker\n.\n\n\n\n\n\n\nSend your contributions as pull requests to the \nmaster branch\n. \n\n\n\n\n\n\nContact us\n\n\n\n\n\n\nPost your questions with the \n\"Siddhi\"\n tag in \nStackoverflow\n. \n\n\n\n\n\n\nSiddhi developers can be contacted via the following mailing lists:\n\n\nDevelopers List   : \ndev@wso2.org\n\n\nArchitecture List : \narchitecture@wso2.org\n\n\n\n\n\n\nSupport\n\n\n\n\n\n\nWe are committed to provide support for this extension in production. Our unique approach ensures that all support \nleverages our open development methodology, and is provided by the very same engineers who build the technology. \n\n\n\n\n\n\nFor more details and to take advantage of this unique opportunity contact us via \nhttp://wso2.com/support/\n.", 
            "title": "Welcome to WSO2 Siddhi IO HTTP"
        }, 
        {
            "location": "/#siddhi-io-http", 
            "text": "The  siddhi-io-http extension  is an extension to  Siddhi  that allows you to receive and publish events via http and https transports. This extension can work with WSO2 Stream Processor. It can also run with standalone Siddhi.  Find some useful links below:   Source code  Releases  Issue tracker", 
            "title": "siddhi-io-http"
        }, 
        {
            "location": "/#latest-api-docs", 
            "text": "Latest API Docs is  1.0.21 .", 
            "title": "Latest API Docs"
        }, 
        {
            "location": "/#how-to-use", 
            "text": "Using the extension in  WSO2 Stream Processor    You can use this extension with the latest  WSO2 Stream Processor  that is a part of the  WSO2 Analytics  offering, with editor, debugger and simulation support.     This extension is shipped with WSO2 Stream Processor by default. If you need to use an alternative version of this extension you can replace the component  jar  that can be found in the  STREAM_PROCESSOR_HOME /lib  directory with the component jar of the relevant version.    Using the extension as a  java library   This extension can be added as a maven dependency to your project together with other Siddhi dependencies.         dependency \n         groupId org.wso2.extension.siddhi.io.http /groupId \n         artifactId siddhi-io-http /artifactId \n         version x.x.x /version \n      /dependency", 
            "title": "How to use"
        }, 
        {
            "location": "/#jenkins-build-status", 
            "text": "Branch  Build Status      master", 
            "title": "Jenkins Build Status"
        }, 
        {
            "location": "/#features", 
            "text": "http   ( (Sink) ) This extension publish the HTTP events in any HTTP method  POST, GET, PUT, DELETE  via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically.  http-response   ( (Sink) ) This extension send the response to the http-sync source having the same source.id. user can add any number of response headers for each event dynamically.  http   ( (Source) ) The HTTP source receives POST requests via HTTP or HTTPS in format such as  text ,  XML  and  JSON . If required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service.  http-request   ( (Source) ) The HTTP source receives POST requests via HTTP or HTTPS in format such as  text ,  XML  and  JSON . If required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service.", 
            "title": "Features"
        }, 
        {
            "location": "/#how-to-contribute", 
            "text": "Report issues at  GitHub Issue Tracker .    Send your contributions as pull requests to the  master branch .", 
            "title": "How to Contribute"
        }, 
        {
            "location": "/#contact-us", 
            "text": "Post your questions with the  \"Siddhi\"  tag in  Stackoverflow .     Siddhi developers can be contacted via the following mailing lists:  Developers List   :  dev@wso2.org  Architecture List :  architecture@wso2.org", 
            "title": "Contact us"
        }, 
        {
            "location": "/#support", 
            "text": "We are committed to provide support for this extension in production. Our unique approach ensures that all support \nleverages our open development methodology, and is provided by the very same engineers who build the technology.     For more details and to take advantage of this unique opportunity contact us via  http://wso2.com/support/ .", 
            "title": "Support"
        }, 
        {
            "location": "/api/1.0.21/", 
            "text": "API Docs - v1.0.21\n\n\nSink\n\n\nhttp \n(Sink)\n\n\nThis extension publish the HTTP events in any HTTP method  POST, GET, PUT, DELETE  via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically.\n\n\n\nSyntax\n\n\n@sink(type=\nhttp\n, publisher.url=\nSTRING\n, basic.auth.username=\nSTRING\n, basic.auth.password=\nSTRING\n, https.truststore.file=\nSTRING\n, https.truststore.password=\nSTRING\n, headers=\nSTRING\n, method=\nSTRING\n, socket.idle.timeout=\nINT\n, chunk.disabled=\nBOOL\n, ssl.protocol=\nSTRING\n, parameters=\nSTRING\n, ciphers=\nSTRING\n, ssl.enabled.protocols=\nSTRING\n, client.enable.session.creation=\nSTRING\n, follow.redirect=\nBOOL\n, max.redirect.count=\nINT\n, tls.store.type=\nSTRING\n, proxy.host=\nSTRING\n, proxy.port=\nSTRING\n, proxy.username=\nSTRING\n, proxy.password=\nSTRING\n, client.bootstrap.configuration=\nSTRING\n, client.bootstrap.nodelay=\nBOOL\n, client.bootstrap.keepalive=\nBOOL\n, client.bootstrap.sendbuffersize=\nINT\n, client.bootstrap.recievebuffersize=\nINT\n, client.bootstrap.connect.timeout=\nINT\n, client.bootstrap.socket.reuse=\nBOOL\n, client.bootstrap.socket.timeout=\nSTRING\n, client.threadpool.configurations=\nSTRING\n, client.connection.pool.count=\nINT\n, client.max.active.connections.per.pool=\nINT\n, client.min.idle.connections.per.pool=\nINT\n, client.max.idle.connections.per.pool=\nINT\n, client.min.eviction.idle.time=\nSTRING\n, sender.thread.count=\nSTRING\n, event.group.executor.thread.size=\nSTRING\n, max.wait.for.client.connection.pool=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npublisher.url\n\n        \nThe URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use \nhttps\n instead of \nhttp\n in the publisher.url.e.g., \nhttp://localhost:8080/endpoint\n, \nhttps://localhost:8080/endpoint\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbasic.auth.username\n\n        \nThe username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI.\n\n        \n \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nbasic.auth.password\n\n        \nThe password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI.\n\n        \n \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nhttps.truststore.file\n\n        \nThe file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required.\n\n        \n${carbon.home}/resources/security/client-truststore.jks\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nhttps.truststore.password\n\n        \nThe password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password.\n\n        \nwso2carbon\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheaders\n\n        \nThe headers that should be included as a HTTP request headers. There can be any number of headers concatenated on following format. \"'header1:value1','header2:value2'\". User can include content-type header if he need to any specific type for payload if not system get the mapping type as the content-Type header (ie. @map(xml):application/xml,@map(json):application/json,@map(text):plain/text ) and if user does not include any mapping type then system gets the 'plain/text' as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header.\n\n        \n \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmethod\n\n        \nFor HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header.\n\n        \nPOST\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsocket.idle.timeout\n\n        \nSocket timeout value in millisecond\n\n        \n6000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nchunk.disabled\n\n        \nport: Port number of the remote service\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.protocol\n\n        \nThe SSL protocol version\n\n        \nTLS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nparameters\n\n        \nParameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\"\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nciphers\n\n        \nList of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.enabled.protocols\n\n        \nSSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.enable.session.creation\n\n        \nEnable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfollow.redirect\n\n        \nRedirect related enabled.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.redirect.count\n\n        \nMaximum redirect count.\n\n        \n5\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.store.type\n\n        \nTLS store type to be used.\n\n        \nJKS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nproxy.host\n\n        \nProxy server host\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nproxy.port\n\n        \nProxy server port\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nproxy.username\n\n        \nProxy server username\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nproxy.password\n\n        \nProxy server password\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.configuration\n\n        \nClient bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\"\n\n        \nTODO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.nodelay\n\n        \nHttp client no delay.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.keepalive\n\n        \nHttp client keep alive.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.sendbuffersize\n\n        \nHttp client send buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.recievebuffersize\n\n        \nHttp client receive buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.connect.timeout\n\n        \nHttp client connection timeout.\n\n        \n15000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.socket.reuse\n\n        \nTo enable http socket reuse.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.socket.timeout\n\n        \nHttp client socket timeout.\n\n        \n15\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.threadpool.configurations\n\n        \nThread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\"\n\n        \nTODO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.connection.pool.count\n\n        \nConnection pool count.\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.max.active.connections.per.pool\n\n        \nActive connections per pool.\n\n        \n-1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.min.idle.connections.per.pool\n\n        \nMinimum ideal connection per pool.\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.max.idle.connections.per.pool\n\n        \nMaximum ideal connection per pool.\n\n        \n100\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.min.eviction.idle.time\n\n        \nMinimum eviction idle time.\n\n        \n5 * 60 * 1000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsender.thread.count\n\n        \nHttp sender thread count.\n\n        \n20\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nevent.group.executor.thread.size\n\n        \nEvent group executor thread size.\n\n        \n15\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.wait.for.client.connection.pool\n\n        \nMaximum wait for client connection pool.\n\n        \n60000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nclientBootstrapBossGroupSize\n\n        \nproperty to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads.\n\n        \nNumber of available processors\n\n        \nAny integer\n\n    \n\n    \n\n        \nclientBootstrapWorkerGroupSize\n\n        \nproperty to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode.\n\n        \n(Number of available processors)\n2\n\n        \nAny integer\n\n    \n\n    \n\n        \nclientBootstrapClientGroupSize\n\n        \nproperty to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode.\n\n        \n(Number of available processors)\n2\n\n        \nAny integer\n\n    \n\n    \n\n        \ntrustStoreLocation\n\n        \nThe default truststore file path.\n\n        \n${carbon.home}/resources/security/client-truststore.jks\n\n        \nPath to client-truststore.jks\n\n    \n\n    \n\n        \ntrustStorePassword\n\n        \nThe default truststore password.\n\n        \nwso2carbon\n\n        \nTruststore password\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers=\n'content-type:xml','content-length:94'\n,client.bootstrap.configuration=\n'client.bootstrap.socket.timeout:20','client.bootstrap.worker.group.size:10'\n,client.pool.configuration=\n'client.connection.pool.count:10','client.max.active.connections.per.pool:1'\n @map(type='xml' , @payload('{{payloadBody}}')))define stream FooStream (payloadBody String, method string, headers string);\n\n\n\n\n\nIf it is xml mapping expected input should be in following format for FooStream:{\nevents\n    \nevent\n        \nsymbol\nWSO2\n/symbol\n        \nprice\n55.6\n/price\n        \nvolume\n100\n/volume\n    \n/event\n/events\n,POST,Content-Length:24#Content-Location:USA#Retry-After:120}Above event will generate output as below.~Output http event payload\nevents\nevent\nsymbol\nWSO2\n/symbol\nprice\n55.6\n/price\nvolume\n100\n/volume\n/event\n/events\n~Output http event headersContent-Length:24,Content-Location:'USA',Retry-After:120,Content-Type:'application/xml',HTTP_METHOD:'POST',~Output http event propertiesHTTP_METHOD:'POST',HOST:'localhost',PORT:8009PROTOCOL:'http'TO:'/foo'\n\n\n\nhttp-response \n(Sink)\n\n\nThis extension send the response to the http-sync source having the same source.id. user can add any number of response headers for each event dynamically.\n\n\n\nSyntax\n\n\n@sink(type=\nhttp-response\n, source.id=\nSTRING\n, message.id=\nSTRING\n, headers=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsource.id\n\n        \nIdentifier of the source.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmessage.id\n\n        \nIdentifier of the message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nheaders\n\n        \nThe headers that should be included as HTTP response headers. There can be any number of headers concatenated on following format. \"'header1:value1','header2:value2'\" User can include content-type header if he/she need to have any specific type for payload. If not system get the mapping type as the content-Type header (ie. @map(xml):application/xml, @map(json):application/json, @map(text):plain/text) and if user does not include any mapping type then system gets the 'plain/text' as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it  as content-length header.\n\n        \n \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='http-sync',source.id='sampleSourceId',message.id='{{messageId}}',headers=\n'content-type:json','content-length:94'\n@map(type='json' , @payload('{{payloadBody}}')))define stream FooStream (payloadBody String, messageId string, headers string);\n\n\n\n\n\nIf it is json mapping expected input should be in following format for FooStream:{{\"events\":\n{\"event\":\n\"symbol\":WSO2,\n\"price\":55.6,\n\"volume\":100,\n}\n},0cf708b1-7eae-440b-a93e-e72f801b486a,Content-Length:24#Content-Location:USA}Above event will generate response for the matching source message as below.~Output http event payload{\"events\":\n{\"event\":\n\"symbol\":WSO2,\n\"price\":55.6,\n\"volume\":100,\n}\n}\n~Output http event headersContent-Length:24,Content-Location:'USA',Content-Type:'application/json',\n\n\n\nSource\n\n\nhttp \n(Source)\n\n\nThe HTTP source receives POST requests via HTTP or HTTPS in format such as \ntext\n, \nXML\n and \nJSON\n. If required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service.\n\n\n\nSyntax\n\n\n@source(type=\nhttp\n, receiver.url=\nSTRING\n, basic.auth.enabled=\nSTRING\n, worker.count=\nSTRING\n, socket.idle.timeout=\nINT\n, ssl.verify.client=\nSTRING\n, ssl.protocol=\nSTRING\n, tls.store.type=\nSTRING\n, parameters=\nSTRING\n, ciphers=\nSTRING\n, ssl.enabled.protocols=\nSTRING\n, server.enable.session.creation=\nSTRING\n, server.supported.snimatchers=\nSTRING\n, server.suported.server.names=\nSTRING\n, request.size.validation.configuration=\nSTRING\n, request.size.validation=\nSTRING\n, request.size.validation.maximum.value=\nSTRING\n, request.size.validation.reject.status.code=\nSTRING\n, request.size.validation.reject.message=\nSTRING\n, request.size.validation.reject.message.content.type=\nSTRING\n, header.size.validation=\nSTRING\n, header.validation.maximum.request.line=\nSTRING\n, header.validation.maximum.size=\nSTRING\n, header.validation.maximum.chunk.size=\nSTRING\n, header.validation.reject.status.code=\nSTRING\n, header.validation.reject.message=\nSTRING\n, header.validation.reject.message.content.type=\nSTRING\n, server.bootstrap.configuration=\nOBJECT\n, server.bootstrap.nodelay=\nBOOL\n, server.bootstrap.keepalive=\nBOOL\n, server.bootstrap.sendbuffersize=\nINT\n, server.bootstrap.recievebuffersize=\nINT\n, server.bootstrap.connect.timeout=\nINT\n, server.bootstrap.socket.reuse=\nBOOL\n, server.bootstrap.socket.timeout=\nBOOL\n, server.bootstrap.socket.backlog=\nBOOL\n, trace.log.enabled=\nBOOL\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nreceiver.url\n\n        \nThe URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format \nhttp://0.0.0.0:9763/\nappNAme\n/\nstreamName\nIf the user want to use SSL the url should be given in following format \nhttps://localhost:8080/\nstreamName\n\n        \nhttp://0.0.0.0:9763/\n/\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nbasic.auth.enabled\n\n        \nIf this is set to \ntrue\n, basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' \n\n        \nfalse\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nworker.count\n\n        \nThe number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering.\n\n        \n1\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsocket.idle.timeout\n\n        \nIdle timeout for HTTP connection.\n\n        \n120000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.verify.client\n\n        \nThe type of client certificate verification.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.protocol\n\n        \nssl/tls related options\n\n        \nTLS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.store.type\n\n        \nTLS store type.\n\n        \nJKS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nparameters\n\n        \nParameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\"\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nciphers\n\n        \nList of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.enabled.protocols\n\n        \nSSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.enable.session.creation\n\n        \nEnable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.supported.snimatchers\n\n        \nHttp SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.suported.server.names\n\n        \nHttp supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.configuration\n\n        \nParameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\"\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation\n\n        \nTo enable the request size validation.\n\n        \nfalse\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.maximum.value\n\n        \nIf request size is validated then maximum size.\n\n        \nInteger.MAX_VALUE\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.reject.status.code\n\n        \nIf request is exceed maximum size and request.size.validation is enabled then status code to be send as response.\n\n        \n401\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.reject.message\n\n        \nIf request is exceed maximum size and request.size.validation is enabled then status message to be send as response.\n\n        \nMessage is bigger than the valid size\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.reject.message.content.type\n\n        \nIf request is exceed maximum size and request.size.validation is enabled then content type to be send as response.\n\n        \nplain/text\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.size.validation\n\n        \nTo enable the header size validation.\n\n        \nfalse\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.maximum.request.line\n\n        \nIf header header validation is enabled then the maximum request line.\n\n        \n4096\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.maximum.size\n\n        \nIf header header validation is enabled then the maximum expected header size.\n\n        \n8192\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.maximum.chunk.size\n\n        \nIf header header validation is enabled then the maximum expected chunk size.\n\n        \n8192\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.reject.status.code\n\n        \n401\n\n        \nIf header is exceed maximum size and header.size.validation is enabled then status code to be send as response.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.reject.message\n\n        \nIf header is exceed maximum size and header.size.validation is enabled then message to be send as response.\n\n        \nMessage header is bigger than the valid size\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.reject.message.content.type\n\n        \nIf header is exceed maximum size and header.size.validation is enabled then content type to be send as response.\n\n        \nplain/text\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.configuration\n\n        \nParameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\"\n\n        \nnull\n\n        \nOBJECT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.nodelay\n\n        \nHttp server no delay.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.keepalive\n\n        \nHttp server keep alive.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.sendbuffersize\n\n        \nHttp server send buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.recievebuffersize\n\n        \nHttp server receive buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.connect.timeout\n\n        \nHttp server connection timeout.\n\n        \n15000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.socket.reuse\n\n        \nTo enable http socket reuse.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.socket.timeout\n\n        \nHttp server socket timeout.\n\n        \n15\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.socket.backlog\n\n        \nTHttp server socket backlog.\n\n        \n100\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntrace.log.enabled\n\n        \nHttp traffic monitoring.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nserverBootstrapBossGroupSize\n\n        \nproperty to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads.\n\n        \nNumber of available processors\n\n        \nAny integer\n\n    \n\n    \n\n        \nserverBootstrapWorkerGroupSize\n\n        \nproperty to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode.\n\n        \n(Number of available processors)\n2\n\n        \nAny integer\n\n    \n\n    \n\n        \nserverBootstrapClientGroupSize\n\n        \nproperty to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode.\n\n        \n(Number of available processors)\n2\n\n        \nAny integer\n\n    \n\n    \n\n        \ndefaultHost\n\n        \nThe default host of the transport.\n\n        \n0.0.0.0\n\n        \nAny valid host\n\n    \n\n    \n\n        \ndefaultHttpPort\n\n        \nThe default port if the default scheme is 'http'.\n\n        \n8280\n\n        \nAny valid port\n\n    \n\n    \n\n        \ndefaultHttpsPort\n\n        \nThe default port if the default scheme is 'https'.\n\n        \n8243\n\n        \nAny valid port\n\n    \n\n    \n\n        \ndefaultScheme\n\n        \nThe default protocol.\n\n        \nhttp\n\n        \nhttp\nhttps\n\n    \n\n    \n\n        \nkeyStoreLocation\n\n        \nThe default keystore file path.\n\n        \n${carbon.home}/resources/security/wso2carbon.jks\n\n        \nPath to wso2carbon.jks file\n\n    \n\n    \n\n        \nkeyStorePassword\n\n        \nThe default keystore password.\n\n        \nwso2carbon\n\n        \nString of keystore password\n\n    \n\n    \n\n        \ncertPassword\n\n        \nThe default cert password.\n\n        \nwso2carbon\n\n        \nString of cert password\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters=\n'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2'\n,request.size.validation.configuration=\nrequest.size.validation:true\n,server.bootstrap.configuration=\nserver.bootstrap.socket.timeout:25\n @map(type='xml'))\ndefine stream FooStream (symbol string, price float, volume long);\n\n\n\n\n\nAbove source listenerConfiguration performs a default XML input mapping. The expected input is as follows:\nevents\nevent\nsymbol\nWSO2\n/symbol\nprice\n55.6\n/price\nvolume\n100\n/volume\n/event\n/events\nIf basic authentication is enabled via the \nbasic.auth.enabled='true\n setting, each input event is also expected to contain the \nAuthorization:'Basic encodeBase64(username:Password)'\n header.\n\n\n\nhttp-request \n(Source)\n\n\nThe HTTP source receives POST requests via HTTP or HTTPS in format such as \ntext\n, \nXML\n and \nJSON\n. If required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service.\n\n\n\nSyntax\n\n\n@source(type=\nhttp-request\n, receiver.url=\nSTRING\n, source.id=\nSTRING\n, connection.timeout=\nINT\n, basic.auth.enabled=\nSTRING\n, worker.count=\nSTRING\n, socket.idle.timeout=\nINT\n, ssl.verify.client=\nSTRING\n, ssl.protocol=\nSTRING\n, tls.store.type=\nSTRING\n, parameters=\nSTRING\n, ciphers=\nSTRING\n, ssl.enabled.protocols=\nSTRING\n, server.enable.session.creation=\nSTRING\n, server.supported.snimatchers=\nSTRING\n, server.suported.server.names=\nSTRING\n, request.size.validation.configuration=\nSTRING\n, request.size.validation=\nSTRING\n, request.size.validation.maximum.value=\nSTRING\n, request.size.validation.reject.status.code=\nSTRING\n, request.size.validation.reject.message=\nSTRING\n, request.size.validation.reject.message.content.type=\nSTRING\n, header.size.validation=\nSTRING\n, header.validation.maximum.request.line=\nSTRING\n, header.validation.maximum.size=\nSTRING\n, header.validation.maximum.chunk.size=\nSTRING\n, header.validation.reject.status.code=\nSTRING\n, header.validation.reject.message=\nSTRING\n, header.validation.reject.message.content.type=\nSTRING\n, server.bootstrap.configuration=\nOBJECT\n, server.bootstrap.nodelay=\nBOOL\n, server.bootstrap.keepalive=\nBOOL\n, server.bootstrap.sendbuffersize=\nINT\n, server.bootstrap.recievebuffersize=\nINT\n, server.bootstrap.connect.timeout=\nINT\n, server.bootstrap.socket.reuse=\nBOOL\n, server.bootstrap.socket.timeout=\nBOOL\n, server.bootstrap.socket.backlog=\nBOOL\n, trace.log.enabled=\nBOOL\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nreceiver.url\n\n        \nThe URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format \nhttp://0.0.0.0:9763/\nappNAme\n/\nstreamName\nIf the user want to use SSL the url should be given in following format \nhttps://localhost:8080/\nstreamName\n\n        \nhttp://0.0.0.0:9763/\n/\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsource.id\n\n        \nIdentifier need to map the source to sink.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconnection.timeout\n\n        \nConnection timeout in milliseconds. If the mapped http-response sink does not get a correlated message, after this timeout value, a timeout response is sent\n\n        \n120000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nbasic.auth.enabled\n\n        \nIf this is set to \ntrue\n, basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' \n\n        \nfalse\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nworker.count\n\n        \nThe number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering.\n\n        \n1\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsocket.idle.timeout\n\n        \nIdle timeout for HTTP connection.\n\n        \n120000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.verify.client\n\n        \nThe type of client certificate verification.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.protocol\n\n        \nssl/tls related options\n\n        \nTLS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.store.type\n\n        \nTLS store type.\n\n        \nJKS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nparameters\n\n        \nParameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\"\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nciphers\n\n        \nList of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.enabled.protocols\n\n        \nSSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.enable.session.creation\n\n        \nEnable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.supported.snimatchers\n\n        \nHttp SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.suported.server.names\n\n        \nHttp supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.configuration\n\n        \nParameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\"\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation\n\n        \nTo enable the request size validation.\n\n        \nfalse\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.maximum.value\n\n        \nIf request size is validated then maximum size.\n\n        \nInteger.MAX_VALUE\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.reject.status.code\n\n        \nIf request is exceed maximum size and request.size.validation is enabled then status code to be send as response.\n\n        \n401\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.reject.message\n\n        \nIf request is exceed maximum size and request.size.validation is enabled then status message to be send as response.\n\n        \nMessage is bigger than the valid size\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.reject.message.content.type\n\n        \nIf request is exceed maximum size and request.size.validation is enabled then content type to be send as response.\n\n        \nplain/text\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.size.validation\n\n        \nTo enable the header size validation.\n\n        \nfalse\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.maximum.request.line\n\n        \nIf header header validation is enabled then the maximum request line.\n\n        \n4096\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.maximum.size\n\n        \nIf header header validation is enabled then the maximum expected header size.\n\n        \n8192\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.maximum.chunk.size\n\n        \nIf header header validation is enabled then the maximum expected chunk size.\n\n        \n8192\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.reject.status.code\n\n        \n401\n\n        \nIf header is exceed maximum size and header.size.validation is enabled then status code to be send as response.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.reject.message\n\n        \nIf header is exceed maximum size and header.size.validation is enabled then message to be send as response.\n\n        \nMessage header is bigger than the valid size\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.reject.message.content.type\n\n        \nIf header is exceed maximum size and header.size.validation is enabled then content type to be send as response.\n\n        \nplain/text\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.configuration\n\n        \nParameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\"\n\n        \nnull\n\n        \nOBJECT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.nodelay\n\n        \nHttp server no delay.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.keepalive\n\n        \nHttp server keep alive.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.sendbuffersize\n\n        \nHttp server send buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.recievebuffersize\n\n        \nHttp server receive buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.connect.timeout\n\n        \nHttp server connection timeout.\n\n        \n15000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.socket.reuse\n\n        \nTo enable http socket reuse.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.socket.timeout\n\n        \nHttp server socket timeout.\n\n        \n15\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.socket.backlog\n\n        \nTHttp server socket backlog.\n\n        \n100\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntrace.log.enabled\n\n        \nHttp traffic monitoring.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nserverBootstrapBossGroupSize\n\n        \nproperty to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads.\n\n        \nNumber of available processors\n\n        \nAny integer\n\n    \n\n    \n\n        \nserverBootstrapWorkerGroupSize\n\n        \nproperty to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode.\n\n        \n(Number of available processors)\n2\n\n        \nAny integer\n\n    \n\n    \n\n        \nserverBootstrapClientGroupSize\n\n        \nproperty to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode.\n\n        \n(Number of available processors)\n2\n\n        \nAny integer\n\n    \n\n    \n\n        \ndefaultHost\n\n        \nThe default host of the transport.\n\n        \n0.0.0.0\n\n        \nAny valid host\n\n    \n\n    \n\n        \ndefaultHttpPort\n\n        \nThe default port if the default scheme is 'http'.\n\n        \n8280\n\n        \nAny valid port\n\n    \n\n    \n\n        \ndefaultHttpsPort\n\n        \nThe default port if the default scheme is 'https'.\n\n        \n8243\n\n        \nAny valid port\n\n    \n\n    \n\n        \ndefaultScheme\n\n        \nThe default protocol.\n\n        \nhttp\n\n        \nhttp\nhttps\n\n    \n\n    \n\n        \nkeyStoreLocation\n\n        \nThe default keystore file path.\n\n        \n${carbon.home}/resources/security/wso2carbon.jks\n\n        \nPath to wso2carbon.jks file\n\n    \n\n    \n\n        \nkeyStorePassword\n\n        \nThe default keystore password.\n\n        \nwso2carbon\n\n        \nString of keystore password\n\n    \n\n    \n\n        \ncertPassword\n\n        \nThe default cert password.\n\n        \nwso2carbon\n\n        \nString of cert password\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='http-sync', source.id='samplesourceid, receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters=\n'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2'\n,request.size.validation.configuration=\nrequest.size.validation:true\n,server.bootstrap.configuration=\nserver.bootstrap.socket.timeout:25\n @map(type='json @attributes(messageId='trp:messageId',symbol='$.events.event.symbol',price='$.events.event.price',volume='$.events.event.volume')))\ndefine stream FooStream (messageId string, symbol string, price float, volume long);\n\n\n\n\n\nThe expected input is as follows:{\"events\":\n{\"event\":\n\"symbol\":WSO2,\n\"price\":55.6,\n\"volume\":100,\n}\n}\nIf basic authentication is enabled via the \nbasic.auth.enabled='true\n setting, each input event is also expected to contain the \nAuthorization:'Basic encodeBase64(username:Password)'\n header.", 
            "title": "1.0.21"
        }, 
        {
            "location": "/api/1.0.21/#api-docs-v1021", 
            "text": "", 
            "title": "API Docs - v1.0.21"
        }, 
        {
            "location": "/api/1.0.21/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/1.0.21/#http-sink", 
            "text": "This extension publish the HTTP events in any HTTP method  POST, GET, PUT, DELETE  via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically.  Syntax  @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         publisher.url \n         The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use  https  instead of  http  in the publisher.url.e.g.,  http://localhost:8080/endpoint ,  https://localhost:8080/endpoint \n         \n         STRING \n         No \n         No \n     \n     \n         basic.auth.username \n         The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. \n           \n         STRING \n         Yes \n         No \n     \n     \n         basic.auth.password \n         The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. \n           \n         STRING \n         Yes \n         No \n     \n     \n         https.truststore.file \n         The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. \n         ${carbon.home}/resources/security/client-truststore.jks \n         STRING \n         Yes \n         No \n     \n     \n         https.truststore.password \n         The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. \n         wso2carbon \n         STRING \n         Yes \n         No \n     \n     \n         headers \n         The headers that should be included as a HTTP request headers. There can be any number of headers concatenated on following format. \"'header1:value1','header2:value2'\". User can include content-type header if he need to any specific type for payload if not system get the mapping type as the content-Type header (ie. @map(xml):application/xml,@map(json):application/json,@map(text):plain/text ) and if user does not include any mapping type then system gets the 'plain/text' as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header. \n           \n         STRING \n         Yes \n         No \n     \n     \n         method \n         For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. \n         POST \n         STRING \n         Yes \n         No \n     \n     \n         socket.idle.timeout \n         Socket timeout value in millisecond \n         6000 \n         INT \n         Yes \n         No \n     \n     \n         chunk.disabled \n         port: Port number of the remote service \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         ssl.protocol \n         The SSL protocol version \n         TLS \n         STRING \n         Yes \n         No \n     \n     \n         parameters \n         Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ciphers \n         List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ssl.enabled.protocols \n         SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         client.enable.session.creation \n         Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         follow.redirect \n         Redirect related enabled. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         max.redirect.count \n         Maximum redirect count. \n         5 \n         INT \n         Yes \n         No \n     \n     \n         tls.store.type \n         TLS store type to be used. \n         JKS \n         STRING \n         Yes \n         No \n     \n     \n         proxy.host \n         Proxy server host \n         null \n         STRING \n         Yes \n         No \n     \n     \n         proxy.port \n         Proxy server port \n         null \n         STRING \n         Yes \n         No \n     \n     \n         proxy.username \n         Proxy server username \n         null \n         STRING \n         Yes \n         No \n     \n     \n         proxy.password \n         Proxy server password \n         null \n         STRING \n         Yes \n         No \n     \n     \n         client.bootstrap.configuration \n         Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" \n         TODO \n         STRING \n         Yes \n         No \n     \n     \n         client.bootstrap.nodelay \n         Http client no delay. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         client.bootstrap.keepalive \n         Http client keep alive. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         client.bootstrap.sendbuffersize \n         Http client send buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         client.bootstrap.recievebuffersize \n         Http client receive buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         client.bootstrap.connect.timeout \n         Http client connection timeout. \n         15000 \n         INT \n         Yes \n         No \n     \n     \n         client.bootstrap.socket.reuse \n         To enable http socket reuse. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         client.bootstrap.socket.timeout \n         Http client socket timeout. \n         15 \n         STRING \n         Yes \n         No \n     \n     \n         client.threadpool.configurations \n         Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" \n         TODO \n         STRING \n         Yes \n         No \n     \n     \n         client.connection.pool.count \n         Connection pool count. \n         0 \n         INT \n         Yes \n         No \n     \n     \n         client.max.active.connections.per.pool \n         Active connections per pool. \n         -1 \n         INT \n         Yes \n         No \n     \n     \n         client.min.idle.connections.per.pool \n         Minimum ideal connection per pool. \n         0 \n         INT \n         Yes \n         No \n     \n     \n         client.max.idle.connections.per.pool \n         Maximum ideal connection per pool. \n         100 \n         INT \n         Yes \n         No \n     \n     \n         client.min.eviction.idle.time \n         Minimum eviction idle time. \n         5 * 60 * 1000 \n         STRING \n         Yes \n         No \n     \n     \n         sender.thread.count \n         Http sender thread count. \n         20 \n         STRING \n         Yes \n         No \n     \n     \n         event.group.executor.thread.size \n         Event group executor thread size. \n         15 \n         STRING \n         Yes \n         No \n     \n     \n         max.wait.for.client.connection.pool \n         Maximum wait for client connection pool. \n         60000 \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         clientBootstrapBossGroupSize \n         property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. \n         Number of available processors \n         Any integer \n     \n     \n         clientBootstrapWorkerGroupSize \n         property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. \n         (Number of available processors) 2 \n         Any integer \n     \n     \n         clientBootstrapClientGroupSize \n         property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. \n         (Number of available processors) 2 \n         Any integer \n     \n     \n         trustStoreLocation \n         The default truststore file path. \n         ${carbon.home}/resources/security/client-truststore.jks \n         Path to client-truststore.jks \n     \n     \n         trustStorePassword \n         The default truststore password. \n         wso2carbon \n         Truststore password \n       Examples  EXAMPLE 1  @sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers= 'content-type:xml','content-length:94' ,client.bootstrap.configuration= 'client.bootstrap.socket.timeout:20','client.bootstrap.worker.group.size:10' ,client.pool.configuration= 'client.connection.pool.count:10','client.max.active.connections.per.pool:1'  @map(type='xml' , @payload('{{payloadBody}}')))define stream FooStream (payloadBody String, method string, headers string);  If it is xml mapping expected input should be in following format for FooStream:{ events      event          symbol WSO2 /symbol          price 55.6 /price          volume 100 /volume      /event /events ,POST,Content-Length:24#Content-Location:USA#Retry-After:120}Above event will generate output as below.~Output http event payload events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ~Output http event headersContent-Length:24,Content-Location:'USA',Retry-After:120,Content-Type:'application/xml',HTTP_METHOD:'POST',~Output http event propertiesHTTP_METHOD:'POST',HOST:'localhost',PORT:8009PROTOCOL:'http'TO:'/foo'", 
            "title": "http (Sink)"
        }, 
        {
            "location": "/api/1.0.21/#http-response-sink", 
            "text": "This extension send the response to the http-sync source having the same source.id. user can add any number of response headers for each event dynamically.  Syntax  @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         source.id \n         Identifier of the source. \n         \n         STRING \n         No \n         No \n     \n     \n         message.id \n         Identifier of the message. \n         \n         STRING \n         No \n         Yes \n     \n     \n         headers \n         The headers that should be included as HTTP response headers. There can be any number of headers concatenated on following format. \"'header1:value1','header2:value2'\" User can include content-type header if he/she need to have any specific type for payload. If not system get the mapping type as the content-Type header (ie. @map(xml):application/xml, @map(json):application/json, @map(text):plain/text) and if user does not include any mapping type then system gets the 'plain/text' as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it  as content-length header. \n           \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @sink(type='http-sync',source.id='sampleSourceId',message.id='{{messageId}}',headers= 'content-type:json','content-length:94' @map(type='json' , @payload('{{payloadBody}}')))define stream FooStream (payloadBody String, messageId string, headers string);  If it is json mapping expected input should be in following format for FooStream:{{\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } },0cf708b1-7eae-440b-a93e-e72f801b486a,Content-Length:24#Content-Location:USA}Above event will generate response for the matching source message as below.~Output http event payload{\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } ~Output http event headersContent-Length:24,Content-Location:'USA',Content-Type:'application/json',", 
            "title": "http-response (Sink)"
        }, 
        {
            "location": "/api/1.0.21/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.21/#http-source", 
            "text": "The HTTP source receives POST requests via HTTP or HTTPS in format such as  text ,  XML  and  JSON . If required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service.  Syntax  @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= STRING , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         receiver.url \n         The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format  http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format  https://localhost:8080/ streamName \n         http://0.0.0.0:9763/ / \n         STRING \n         Yes \n         No \n     \n     \n         basic.auth.enabled \n         If this is set to  true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false'  \n         false \n         STRING \n         Yes \n         No \n     \n     \n         worker.count \n         The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. \n         1 \n         STRING \n         Yes \n         No \n     \n     \n         socket.idle.timeout \n         Idle timeout for HTTP connection. \n         120000 \n         INT \n         Yes \n         No \n     \n     \n         ssl.verify.client \n         The type of client certificate verification. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ssl.protocol \n         ssl/tls related options \n         TLS \n         STRING \n         Yes \n         No \n     \n     \n         tls.store.type \n         TLS store type. \n         JKS \n         STRING \n         Yes \n         No \n     \n     \n         parameters \n         Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ciphers \n         List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ssl.enabled.protocols \n         SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         server.enable.session.creation \n         Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         server.supported.snimatchers \n         Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         server.suported.server.names \n         Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.configuration \n         Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" \n         null \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation \n         To enable the request size validation. \n         false \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.maximum.value \n         If request size is validated then maximum size. \n         Integer.MAX_VALUE \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.reject.status.code \n         If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. \n         401 \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.reject.message \n         If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. \n         Message is bigger than the valid size \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.reject.message.content.type \n         If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. \n         plain/text \n         STRING \n         Yes \n         No \n     \n     \n         header.size.validation \n         To enable the header size validation. \n         false \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.maximum.request.line \n         If header header validation is enabled then the maximum request line. \n         4096 \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.maximum.size \n         If header header validation is enabled then the maximum expected header size. \n         8192 \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.maximum.chunk.size \n         If header header validation is enabled then the maximum expected chunk size. \n         8192 \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.reject.status.code \n         401 \n         If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.reject.message \n         If header is exceed maximum size and header.size.validation is enabled then message to be send as response. \n         Message header is bigger than the valid size \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.reject.message.content.type \n         If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. \n         plain/text \n         STRING \n         Yes \n         No \n     \n     \n         server.bootstrap.configuration \n         Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" \n         null \n         OBJECT \n         Yes \n         No \n     \n     \n         server.bootstrap.nodelay \n         Http server no delay. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.keepalive \n         Http server keep alive. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.sendbuffersize \n         Http server send buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         server.bootstrap.recievebuffersize \n         Http server receive buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         server.bootstrap.connect.timeout \n         Http server connection timeout. \n         15000 \n         INT \n         Yes \n         No \n     \n     \n         server.bootstrap.socket.reuse \n         To enable http socket reuse. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.socket.timeout \n         Http server socket timeout. \n         15 \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.socket.backlog \n         THttp server socket backlog. \n         100 \n         BOOL \n         Yes \n         No \n     \n     \n         trace.log.enabled \n         Http traffic monitoring. \n         false \n         BOOL \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         serverBootstrapBossGroupSize \n         property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. \n         Number of available processors \n         Any integer \n     \n     \n         serverBootstrapWorkerGroupSize \n         property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. \n         (Number of available processors) 2 \n         Any integer \n     \n     \n         serverBootstrapClientGroupSize \n         property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. \n         (Number of available processors) 2 \n         Any integer \n     \n     \n         defaultHost \n         The default host of the transport. \n         0.0.0.0 \n         Any valid host \n     \n     \n         defaultHttpPort \n         The default port if the default scheme is 'http'. \n         8280 \n         Any valid port \n     \n     \n         defaultHttpsPort \n         The default port if the default scheme is 'https'. \n         8243 \n         Any valid port \n     \n     \n         defaultScheme \n         The default protocol. \n         http \n         http https \n     \n     \n         keyStoreLocation \n         The default keystore file path. \n         ${carbon.home}/resources/security/wso2carbon.jks \n         Path to wso2carbon.jks file \n     \n     \n         keyStorePassword \n         The default keystore password. \n         wso2carbon \n         String of keystore password \n     \n     \n         certPassword \n         The default cert password. \n         wso2carbon \n         String of cert password \n       Examples  EXAMPLE 1  @source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' ,request.size.validation.configuration= request.size.validation:true ,server.bootstrap.configuration= server.bootstrap.socket.timeout:25  @map(type='xml'))\ndefine stream FooStream (symbol string, price float, volume long);  Above source listenerConfiguration performs a default XML input mapping. The expected input is as follows: events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events If basic authentication is enabled via the  basic.auth.enabled='true  setting, each input event is also expected to contain the  Authorization:'Basic encodeBase64(username:Password)'  header.", 
            "title": "http (Source)"
        }, 
        {
            "location": "/api/1.0.21/#http-request-source", 
            "text": "The HTTP source receives POST requests via HTTP or HTTPS in format such as  text ,  XML  and  JSON . If required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service.  Syntax  @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= STRING , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         receiver.url \n         The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format  http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format  https://localhost:8080/ streamName \n         http://0.0.0.0:9763/ / \n         STRING \n         Yes \n         No \n     \n     \n         source.id \n         Identifier need to map the source to sink. \n         \n         STRING \n         No \n         No \n     \n     \n         connection.timeout \n         Connection timeout in milliseconds. If the mapped http-response sink does not get a correlated message, after this timeout value, a timeout response is sent \n         120000 \n         INT \n         Yes \n         No \n     \n     \n         basic.auth.enabled \n         If this is set to  true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false'  \n         false \n         STRING \n         Yes \n         No \n     \n     \n         worker.count \n         The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. \n         1 \n         STRING \n         Yes \n         No \n     \n     \n         socket.idle.timeout \n         Idle timeout for HTTP connection. \n         120000 \n         INT \n         Yes \n         No \n     \n     \n         ssl.verify.client \n         The type of client certificate verification. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ssl.protocol \n         ssl/tls related options \n         TLS \n         STRING \n         Yes \n         No \n     \n     \n         tls.store.type \n         TLS store type. \n         JKS \n         STRING \n         Yes \n         No \n     \n     \n         parameters \n         Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ciphers \n         List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ssl.enabled.protocols \n         SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         server.enable.session.creation \n         Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         server.supported.snimatchers \n         Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         server.suported.server.names \n         Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.configuration \n         Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" \n         null \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation \n         To enable the request size validation. \n         false \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.maximum.value \n         If request size is validated then maximum size. \n         Integer.MAX_VALUE \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.reject.status.code \n         If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. \n         401 \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.reject.message \n         If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. \n         Message is bigger than the valid size \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.reject.message.content.type \n         If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. \n         plain/text \n         STRING \n         Yes \n         No \n     \n     \n         header.size.validation \n         To enable the header size validation. \n         false \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.maximum.request.line \n         If header header validation is enabled then the maximum request line. \n         4096 \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.maximum.size \n         If header header validation is enabled then the maximum expected header size. \n         8192 \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.maximum.chunk.size \n         If header header validation is enabled then the maximum expected chunk size. \n         8192 \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.reject.status.code \n         401 \n         If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.reject.message \n         If header is exceed maximum size and header.size.validation is enabled then message to be send as response. \n         Message header is bigger than the valid size \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.reject.message.content.type \n         If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. \n         plain/text \n         STRING \n         Yes \n         No \n     \n     \n         server.bootstrap.configuration \n         Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" \n         null \n         OBJECT \n         Yes \n         No \n     \n     \n         server.bootstrap.nodelay \n         Http server no delay. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.keepalive \n         Http server keep alive. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.sendbuffersize \n         Http server send buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         server.bootstrap.recievebuffersize \n         Http server receive buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         server.bootstrap.connect.timeout \n         Http server connection timeout. \n         15000 \n         INT \n         Yes \n         No \n     \n     \n         server.bootstrap.socket.reuse \n         To enable http socket reuse. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.socket.timeout \n         Http server socket timeout. \n         15 \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.socket.backlog \n         THttp server socket backlog. \n         100 \n         BOOL \n         Yes \n         No \n     \n     \n         trace.log.enabled \n         Http traffic monitoring. \n         false \n         BOOL \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         serverBootstrapBossGroupSize \n         property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. \n         Number of available processors \n         Any integer \n     \n     \n         serverBootstrapWorkerGroupSize \n         property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. \n         (Number of available processors) 2 \n         Any integer \n     \n     \n         serverBootstrapClientGroupSize \n         property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. \n         (Number of available processors) 2 \n         Any integer \n     \n     \n         defaultHost \n         The default host of the transport. \n         0.0.0.0 \n         Any valid host \n     \n     \n         defaultHttpPort \n         The default port if the default scheme is 'http'. \n         8280 \n         Any valid port \n     \n     \n         defaultHttpsPort \n         The default port if the default scheme is 'https'. \n         8243 \n         Any valid port \n     \n     \n         defaultScheme \n         The default protocol. \n         http \n         http https \n     \n     \n         keyStoreLocation \n         The default keystore file path. \n         ${carbon.home}/resources/security/wso2carbon.jks \n         Path to wso2carbon.jks file \n     \n     \n         keyStorePassword \n         The default keystore password. \n         wso2carbon \n         String of keystore password \n     \n     \n         certPassword \n         The default cert password. \n         wso2carbon \n         String of cert password \n       Examples  EXAMPLE 1  @source(type='http-sync', source.id='samplesourceid, receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' ,request.size.validation.configuration= request.size.validation:true ,server.bootstrap.configuration= server.bootstrap.socket.timeout:25  @map(type='json @attributes(messageId='trp:messageId',symbol='$.events.event.symbol',price='$.events.event.price',volume='$.events.event.volume')))\ndefine stream FooStream (messageId string, symbol string, price float, volume long);  The expected input is as follows:{\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } If basic authentication is enabled via the  basic.auth.enabled='true  setting, each input event is also expected to contain the  Authorization:'Basic encodeBase64(username:Password)'  header.", 
            "title": "http-request (Source)"
        }, 
        {
            "location": "/api/1.0.20/", 
            "text": "API Docs - v1.0.20\n\n\nSink\n\n\nhttp \n(Sink)\n\n\nThis extension publish the HTTP events in any HTTP method  POST, GET, PUT, DELETE  via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically.\n\n\n\nSyntax\n\n\n@sink(type=\nhttp\n, publisher.url=\nSTRING\n, basic.auth.username=\nSTRING\n, basic.auth.password=\nSTRING\n, https.truststore.file=\nSTRING\n, https.truststore.password=\nSTRING\n, headers=\nSTRING\n, method=\nSTRING\n, socket.idle.timeout=\nINT\n, chunk.disabled=\nBOOL\n, ssl.protocol=\nSTRING\n, parameters=\nSTRING\n, ciphers=\nSTRING\n, ssl.enabled.protocols=\nSTRING\n, client.enable.session.creation=\nSTRING\n, follow.redirect=\nBOOL\n, max.redirect.count=\nINT\n, tls.store.type=\nSTRING\n, proxy.host=\nSTRING\n, proxy.port=\nSTRING\n, proxy.username=\nSTRING\n, proxy.password=\nSTRING\n, client.bootstrap.configuration=\nSTRING\n, client.bootstrap.nodelay=\nBOOL\n, client.bootstrap.keepalive=\nBOOL\n, client.bootstrap.sendbuffersize=\nINT\n, client.bootstrap.recievebuffersize=\nINT\n, client.bootstrap.connect.timeout=\nINT\n, client.bootstrap.socket.reuse=\nBOOL\n, client.bootstrap.socket.timeout=\nSTRING\n, client.threadpool.configurations=\nSTRING\n, client.connection.pool.count=\nINT\n, client.max.active.connections.per.pool=\nINT\n, client.min.idle.connections.per.pool=\nINT\n, client.max.idle.connections.per.pool=\nINT\n, client.min.eviction.idle.time=\nSTRING\n, sender.thread.count=\nSTRING\n, event.group.executor.thread.size=\nSTRING\n, max.wait.for.client.connection.pool=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npublisher.url\n\n        \nThe URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use \nhttps\n instead of \nhttp\n in the publisher.url.e.g., \nhttp://localhost:8080/endpoint\n, \nhttps://localhost:8080/endpoint\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbasic.auth.username\n\n        \nThe username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI.\n\n        \n \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nbasic.auth.password\n\n        \nThe password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI.\n\n        \n \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nhttps.truststore.file\n\n        \nThe file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required.\n\n        \n${carbon.home}/resources/security/client-truststore.jks\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nhttps.truststore.password\n\n        \nThe password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password.\n\n        \nwso2carbon\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheaders\n\n        \nThe headers that should be included as a HTTP request headers. There can be any number of headers concatenated on following format. \"'header1:value1','header2:value2'\". User can include content-type header if he need to any specific type for payload if not system get the mapping type as the content-Type header (ie. @map(xml):application/xml,@map(json):application/json,@map(text):plain/text ) and if user does not include any mapping type then system gets the 'plain/text' as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header.\n\n        \n \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmethod\n\n        \nFor HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header.\n\n        \nPOST\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsocket.idle.timeout\n\n        \nSocket timeout value in millisecond\n\n        \n6000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nchunk.disabled\n\n        \nport: Port number of the remote service\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.protocol\n\n        \nThe SSL protocol version\n\n        \nTLS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nparameters\n\n        \nParameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\"\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nciphers\n\n        \nList of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.enabled.protocols\n\n        \nSSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.enable.session.creation\n\n        \nEnable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfollow.redirect\n\n        \nRedirect related enabled.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.redirect.count\n\n        \nMaximum redirect count.\n\n        \n5\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.store.type\n\n        \nTLS store type to be used.\n\n        \nJKS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nproxy.host\n\n        \nProxy server host\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nproxy.port\n\n        \nProxy server port\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nproxy.username\n\n        \nProxy server username\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nproxy.password\n\n        \nProxy server password\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.configuration\n\n        \nClient bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\"\n\n        \nTODO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.nodelay\n\n        \nHttp client no delay.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.keepalive\n\n        \nHttp client keep alive.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.sendbuffersize\n\n        \nHttp client send buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.recievebuffersize\n\n        \nHttp client receive buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.connect.timeout\n\n        \nHttp client connection timeout.\n\n        \n15000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.socket.reuse\n\n        \nTo enable http socket reuse.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.socket.timeout\n\n        \nHttp client socket timeout.\n\n        \n15\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.threadpool.configurations\n\n        \nThread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\"\n\n        \nTODO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.connection.pool.count\n\n        \nConnection pool count.\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.max.active.connections.per.pool\n\n        \nActive connections per pool.\n\n        \n-1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.min.idle.connections.per.pool\n\n        \nMinimum ideal connection per pool.\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.max.idle.connections.per.pool\n\n        \nMaximum ideal connection per pool.\n\n        \n100\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.min.eviction.idle.time\n\n        \nMinimum eviction idle time.\n\n        \n5 * 60 * 1000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsender.thread.count\n\n        \nHttp sender thread count.\n\n        \n20\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nevent.group.executor.thread.size\n\n        \nEvent group executor thread size.\n\n        \n15\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.wait.for.client.connection.pool\n\n        \nMaximum wait for client connection pool.\n\n        \n60000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nclientBootstrapBossGroupSize\n\n        \nproperty to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads.\n\n        \nNumber of available processors\n\n        \nAny integer\n\n    \n\n    \n\n        \nclientBootstrapWorkerGroupSize\n\n        \nproperty to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode.\n\n        \n(Number of available processors)\n2\n\n        \nAny integer\n\n    \n\n    \n\n        \nclientBootstrapClientGroupSize\n\n        \nproperty to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode.\n\n        \n(Number of available processors)\n2\n\n        \nAny integer\n\n    \n\n    \n\n        \ntrustStoreLocation\n\n        \nThe default truststore file path.\n\n        \n${carbon.home}/resources/security/client-truststore.jks\n\n        \nPath to client-truststore.jks\n\n    \n\n    \n\n        \ntrustStorePassword\n\n        \nThe default truststore password.\n\n        \nwso2carbon\n\n        \nTruststore password\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers=\n'content-type:xml','content-length:94'\n,client.bootstrap.configuration=\n'client.bootstrap.socket.timeout:20','client.bootstrap.worker.group.size:10'\n,client.pool.configuration=\n'client.connection.pool.count:10','client.max.active.connections.per.pool:1'\n @map(type='xml' , @payload('{{payloadBody}}')))define stream FooStream (payloadBody String, method string, headers string);\n\n\n\n\n\nIf it is xml mapping expected input should be in following format for FooStream:{\nevents\n    \nevent\n        \nsymbol\nWSO2\n/symbol\n        \nprice\n55.6\n/price\n        \nvolume\n100\n/volume\n    \n/event\n/events\n,POST,Content-Length:24#Content-Location:USA#Retry-After:120}Above event will generate output as below.~Output http event payload\nevents\nevent\nsymbol\nWSO2\n/symbol\nprice\n55.6\n/price\nvolume\n100\n/volume\n/event\n/events\n~Output http event headersContent-Length:24,Content-Location:'USA',Retry-After:120,Content-Type:'application/xml',HTTP_METHOD:'POST',~Output http event propertiesHTTP_METHOD:'POST',HOST:'localhost',PORT:8009PROTOCOL:'http'TO:'/foo'\n\n\n\nSource\n\n\nhttp \n(Source)\n\n\nThe HTTP source receives POST requests via HTTP or HTTPS in format such as \ntext\n, \nXML\n and \nJSON\n. If required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service.\n\n\n\nSyntax\n\n\n@source(type=\nhttp\n, receiver.url=\nSTRING\n, basic.auth.enabled=\nSTRING\n, worker.count=\nSTRING\n, socket.idle.timeout=\nINT\n, ssl.verify.client=\nSTRING\n, ssl.protocol=\nSTRING\n, tls.store.type=\nSTRING\n, parameters=\nSTRING\n, ciphers=\nSTRING\n, ssl.enabled.protocols=\nSTRING\n, server.enable.session.creation=\nSTRING\n, server.supported.snimatchers=\nSTRING\n, server.suported.server.names=\nSTRING\n, request.size.validation.configuration=\nSTRING\n, request.size.validation=\nSTRING\n, request.size.validation.maximum.value=\nSTRING\n, request.size.validation.reject.status.code=\nSTRING\n, request.size.validation.reject.message=\nSTRING\n, request.size.validation.reject.message.content.type=\nSTRING\n, header.size.validation=\nSTRING\n, header.validation.maximum.request.line=\nSTRING\n, header.validation.maximum.size=\nSTRING\n, header.validation.maximum.chunk.size=\nSTRING\n, header.validation.reject.status.code=\nSTRING\n, header.validation.reject.message=\nSTRING\n, header.validation.reject.message.content.type=\nSTRING\n, server.bootstrap.configuration=\nOBJECT\n, server.bootstrap.nodelay=\nBOOL\n, server.bootstrap.keepalive=\nBOOL\n, server.bootstrap.sendbuffersize=\nINT\n, server.bootstrap.recievebuffersize=\nINT\n, server.bootstrap.connect.timeout=\nINT\n, server.bootstrap.socket.reuse=\nBOOL\n, server.bootstrap.socket.timeout=\nBOOL\n, server.bootstrap.socket.backlog=\nBOOL\n, trace.log.enabled=\nBOOL\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nreceiver.url\n\n        \nThe URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format \nhttp://0.0.0.0:9763/\nappNAme\n/\nstreamName\nIf the user want to use SSL the url should be given in following format \nhttps://localhost:8080/\nstreamName\n\n        \nhttp://0.0.0.0:9763/\n/\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nbasic.auth.enabled\n\n        \nIf this is set to \ntrue\n, basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' \n\n        \nfalse\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nworker.count\n\n        \nThe number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering.\n\n        \n1\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsocket.idle.timeout\n\n        \nIdle timeout for HTTP connection.\n\n        \n120000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.verify.client\n\n        \nThe type of client certificate verification.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.protocol\n\n        \nssl/tls related options\n\n        \nTLS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.store.type\n\n        \nTLS store type.\n\n        \nJKS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nparameters\n\n        \nParameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\"\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nciphers\n\n        \nList of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.enabled.protocols\n\n        \nSSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.enable.session.creation\n\n        \nEnable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.supported.snimatchers\n\n        \nHttp SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.suported.server.names\n\n        \nHttp supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.configuration\n\n        \nParameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\"\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation\n\n        \nTo enable the request size validation.\n\n        \nfalse\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.maximum.value\n\n        \nIf request size is validated then maximum size.\n\n        \nInteger.MAX_VALUE\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.reject.status.code\n\n        \nIf request is exceed maximum size and request.size.validation is enabled then status code to be send as response.\n\n        \n401\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.reject.message\n\n        \nIf request is exceed maximum size and request.size.validation is enabled then status message to be send as response.\n\n        \nMessage is bigger than the valid size\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.reject.message.content.type\n\n        \nIf request is exceed maximum size and request.size.validation is enabled then content type to be send as response.\n\n        \nplain/text\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.size.validation\n\n        \nTo enable the header size validation.\n\n        \nfalse\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.maximum.request.line\n\n        \nIf header header validation is enabled then the maximum request line.\n\n        \n4096\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.maximum.size\n\n        \nIf header header validation is enabled then the maximum expected header size.\n\n        \n8192\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.maximum.chunk.size\n\n        \nIf header header validation is enabled then the maximum expected chunk size.\n\n        \n8192\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.reject.status.code\n\n        \n401\n\n        \nIf header is exceed maximum size and header.size.validation is enabled then status code to be send as response.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.reject.message\n\n        \nIf header is exceed maximum size and header.size.validation is enabled then message to be send as response.\n\n        \nMessage header is bigger than the valid size\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.reject.message.content.type\n\n        \nIf header is exceed maximum size and header.size.validation is enabled then content type to be send as response.\n\n        \nplain/text\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.configuration\n\n        \nParameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\"\n\n        \nnull\n\n        \nOBJECT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.nodelay\n\n        \nHttp server no delay.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.keepalive\n\n        \nHttp server keep alive.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.sendbuffersize\n\n        \nHttp server send buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.recievebuffersize\n\n        \nHttp server receive buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.connect.timeout\n\n        \nHttp server connection timeout.\n\n        \n15000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.socket.reuse\n\n        \nTo enable http socket reuse.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.socket.timeout\n\n        \nHttp server socket timeout.\n\n        \n15\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.socket.backlog\n\n        \nTHttp server socket backlog.\n\n        \n100\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntrace.log.enabled\n\n        \nHttp traffic monitoring.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nserverBootstrapBossGroupSize\n\n        \nproperty to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads.\n\n        \nNumber of available processors\n\n        \nAny integer\n\n    \n\n    \n\n        \nserverBootstrapWorkerGroupSize\n\n        \nproperty to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode.\n\n        \n(Number of available processors)\n2\n\n        \nAny integer\n\n    \n\n    \n\n        \nserverBootstrapClientGroupSize\n\n        \nproperty to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode.\n\n        \n(Number of available processors)\n2\n\n        \nAny integer\n\n    \n\n    \n\n        \ndefaultHost\n\n        \nThe default host of the transport.\n\n        \n0.0.0.0\n\n        \nAny valid host\n\n    \n\n    \n\n        \ndefaultHttpPort\n\n        \nThe default port if the default scheme is 'http'.\n\n        \n8280\n\n        \nAny valid port\n\n    \n\n    \n\n        \ndefaultHttpsPort\n\n        \nThe default port if the default scheme is 'https'.\n\n        \n8243\n\n        \nAny valid port\n\n    \n\n    \n\n        \ndefaultScheme\n\n        \nThe default protocol.\n\n        \nhttp\n\n        \nhttp\nhttps\n\n    \n\n    \n\n        \nkeyStoreLocation\n\n        \nThe default keystore file path.\n\n        \n${carbon.home}/resources/security/wso2carbon.jks\n\n        \nPath to wso2carbon.jks file\n\n    \n\n    \n\n        \nkeyStorePassword\n\n        \nThe default keystore password.\n\n        \nwso2carbon\n\n        \nString of keystore password\n\n    \n\n    \n\n        \ncertPassword\n\n        \nThe default cert password.\n\n        \nwso2carbon\n\n        \nString of cert password\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters=\n'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2'\n,request.size.validation.configuration=\nrequest.size.validation:true\n,server.bootstrap.configuration=\nserver.bootstrap.socket.timeout:25\n @map(type='xml'))\ndefine stream FooStream (symbol string, price float, volume long);\n\n\n\n\n\nAbove source listenerConfiguration performs a default XML input mapping. The expected input is as follows:\nevents\nevent\nsymbol\nWSO2\n/symbol\nprice\n55.6\n/price\nvolume\n100\n/volume\n/event\n/events\nIf basic authentication is enabled via the \nbasic.auth.enabled='true\n setting, each input event is also expected to contain the \nAuthorization:'Basic encodeBase64(username:Password)'\n header.", 
            "title": "1.0.20"
        }, 
        {
            "location": "/api/1.0.20/#api-docs-v1020", 
            "text": "", 
            "title": "API Docs - v1.0.20"
        }, 
        {
            "location": "/api/1.0.20/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/1.0.20/#http-sink", 
            "text": "This extension publish the HTTP events in any HTTP method  POST, GET, PUT, DELETE  via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically.  Syntax  @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         publisher.url \n         The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use  https  instead of  http  in the publisher.url.e.g.,  http://localhost:8080/endpoint ,  https://localhost:8080/endpoint \n         \n         STRING \n         No \n         No \n     \n     \n         basic.auth.username \n         The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. \n           \n         STRING \n         Yes \n         No \n     \n     \n         basic.auth.password \n         The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. \n           \n         STRING \n         Yes \n         No \n     \n     \n         https.truststore.file \n         The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. \n         ${carbon.home}/resources/security/client-truststore.jks \n         STRING \n         Yes \n         No \n     \n     \n         https.truststore.password \n         The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. \n         wso2carbon \n         STRING \n         Yes \n         No \n     \n     \n         headers \n         The headers that should be included as a HTTP request headers. There can be any number of headers concatenated on following format. \"'header1:value1','header2:value2'\". User can include content-type header if he need to any specific type for payload if not system get the mapping type as the content-Type header (ie. @map(xml):application/xml,@map(json):application/json,@map(text):plain/text ) and if user does not include any mapping type then system gets the 'plain/text' as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header. \n           \n         STRING \n         Yes \n         No \n     \n     \n         method \n         For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. \n         POST \n         STRING \n         Yes \n         No \n     \n     \n         socket.idle.timeout \n         Socket timeout value in millisecond \n         6000 \n         INT \n         Yes \n         No \n     \n     \n         chunk.disabled \n         port: Port number of the remote service \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         ssl.protocol \n         The SSL protocol version \n         TLS \n         STRING \n         Yes \n         No \n     \n     \n         parameters \n         Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ciphers \n         List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ssl.enabled.protocols \n         SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         client.enable.session.creation \n         Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         follow.redirect \n         Redirect related enabled. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         max.redirect.count \n         Maximum redirect count. \n         5 \n         INT \n         Yes \n         No \n     \n     \n         tls.store.type \n         TLS store type to be used. \n         JKS \n         STRING \n         Yes \n         No \n     \n     \n         proxy.host \n         Proxy server host \n         null \n         STRING \n         Yes \n         No \n     \n     \n         proxy.port \n         Proxy server port \n         null \n         STRING \n         Yes \n         No \n     \n     \n         proxy.username \n         Proxy server username \n         null \n         STRING \n         Yes \n         No \n     \n     \n         proxy.password \n         Proxy server password \n         null \n         STRING \n         Yes \n         No \n     \n     \n         client.bootstrap.configuration \n         Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" \n         TODO \n         STRING \n         Yes \n         No \n     \n     \n         client.bootstrap.nodelay \n         Http client no delay. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         client.bootstrap.keepalive \n         Http client keep alive. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         client.bootstrap.sendbuffersize \n         Http client send buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         client.bootstrap.recievebuffersize \n         Http client receive buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         client.bootstrap.connect.timeout \n         Http client connection timeout. \n         15000 \n         INT \n         Yes \n         No \n     \n     \n         client.bootstrap.socket.reuse \n         To enable http socket reuse. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         client.bootstrap.socket.timeout \n         Http client socket timeout. \n         15 \n         STRING \n         Yes \n         No \n     \n     \n         client.threadpool.configurations \n         Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" \n         TODO \n         STRING \n         Yes \n         No \n     \n     \n         client.connection.pool.count \n         Connection pool count. \n         0 \n         INT \n         Yes \n         No \n     \n     \n         client.max.active.connections.per.pool \n         Active connections per pool. \n         -1 \n         INT \n         Yes \n         No \n     \n     \n         client.min.idle.connections.per.pool \n         Minimum ideal connection per pool. \n         0 \n         INT \n         Yes \n         No \n     \n     \n         client.max.idle.connections.per.pool \n         Maximum ideal connection per pool. \n         100 \n         INT \n         Yes \n         No \n     \n     \n         client.min.eviction.idle.time \n         Minimum eviction idle time. \n         5 * 60 * 1000 \n         STRING \n         Yes \n         No \n     \n     \n         sender.thread.count \n         Http sender thread count. \n         20 \n         STRING \n         Yes \n         No \n     \n     \n         event.group.executor.thread.size \n         Event group executor thread size. \n         15 \n         STRING \n         Yes \n         No \n     \n     \n         max.wait.for.client.connection.pool \n         Maximum wait for client connection pool. \n         60000 \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         clientBootstrapBossGroupSize \n         property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. \n         Number of available processors \n         Any integer \n     \n     \n         clientBootstrapWorkerGroupSize \n         property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. \n         (Number of available processors) 2 \n         Any integer \n     \n     \n         clientBootstrapClientGroupSize \n         property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. \n         (Number of available processors) 2 \n         Any integer \n     \n     \n         trustStoreLocation \n         The default truststore file path. \n         ${carbon.home}/resources/security/client-truststore.jks \n         Path to client-truststore.jks \n     \n     \n         trustStorePassword \n         The default truststore password. \n         wso2carbon \n         Truststore password \n       Examples  EXAMPLE 1  @sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers= 'content-type:xml','content-length:94' ,client.bootstrap.configuration= 'client.bootstrap.socket.timeout:20','client.bootstrap.worker.group.size:10' ,client.pool.configuration= 'client.connection.pool.count:10','client.max.active.connections.per.pool:1'  @map(type='xml' , @payload('{{payloadBody}}')))define stream FooStream (payloadBody String, method string, headers string);  If it is xml mapping expected input should be in following format for FooStream:{ events      event          symbol WSO2 /symbol          price 55.6 /price          volume 100 /volume      /event /events ,POST,Content-Length:24#Content-Location:USA#Retry-After:120}Above event will generate output as below.~Output http event payload events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ~Output http event headersContent-Length:24,Content-Location:'USA',Retry-After:120,Content-Type:'application/xml',HTTP_METHOD:'POST',~Output http event propertiesHTTP_METHOD:'POST',HOST:'localhost',PORT:8009PROTOCOL:'http'TO:'/foo'", 
            "title": "http (Sink)"
        }, 
        {
            "location": "/api/1.0.20/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.20/#http-source", 
            "text": "The HTTP source receives POST requests via HTTP or HTTPS in format such as  text ,  XML  and  JSON . If required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service.  Syntax  @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= STRING , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         receiver.url \n         The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format  http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format  https://localhost:8080/ streamName \n         http://0.0.0.0:9763/ / \n         STRING \n         Yes \n         No \n     \n     \n         basic.auth.enabled \n         If this is set to  true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false'  \n         false \n         STRING \n         Yes \n         No \n     \n     \n         worker.count \n         The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. \n         1 \n         STRING \n         Yes \n         No \n     \n     \n         socket.idle.timeout \n         Idle timeout for HTTP connection. \n         120000 \n         INT \n         Yes \n         No \n     \n     \n         ssl.verify.client \n         The type of client certificate verification. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ssl.protocol \n         ssl/tls related options \n         TLS \n         STRING \n         Yes \n         No \n     \n     \n         tls.store.type \n         TLS store type. \n         JKS \n         STRING \n         Yes \n         No \n     \n     \n         parameters \n         Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ciphers \n         List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ssl.enabled.protocols \n         SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         server.enable.session.creation \n         Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         server.supported.snimatchers \n         Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         server.suported.server.names \n         Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.configuration \n         Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" \n         null \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation \n         To enable the request size validation. \n         false \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.maximum.value \n         If request size is validated then maximum size. \n         Integer.MAX_VALUE \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.reject.status.code \n         If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. \n         401 \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.reject.message \n         If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. \n         Message is bigger than the valid size \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.reject.message.content.type \n         If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. \n         plain/text \n         STRING \n         Yes \n         No \n     \n     \n         header.size.validation \n         To enable the header size validation. \n         false \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.maximum.request.line \n         If header header validation is enabled then the maximum request line. \n         4096 \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.maximum.size \n         If header header validation is enabled then the maximum expected header size. \n         8192 \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.maximum.chunk.size \n         If header header validation is enabled then the maximum expected chunk size. \n         8192 \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.reject.status.code \n         401 \n         If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.reject.message \n         If header is exceed maximum size and header.size.validation is enabled then message to be send as response. \n         Message header is bigger than the valid size \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.reject.message.content.type \n         If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. \n         plain/text \n         STRING \n         Yes \n         No \n     \n     \n         server.bootstrap.configuration \n         Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" \n         null \n         OBJECT \n         Yes \n         No \n     \n     \n         server.bootstrap.nodelay \n         Http server no delay. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.keepalive \n         Http server keep alive. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.sendbuffersize \n         Http server send buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         server.bootstrap.recievebuffersize \n         Http server receive buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         server.bootstrap.connect.timeout \n         Http server connection timeout. \n         15000 \n         INT \n         Yes \n         No \n     \n     \n         server.bootstrap.socket.reuse \n         To enable http socket reuse. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.socket.timeout \n         Http server socket timeout. \n         15 \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.socket.backlog \n         THttp server socket backlog. \n         100 \n         BOOL \n         Yes \n         No \n     \n     \n         trace.log.enabled \n         Http traffic monitoring. \n         false \n         BOOL \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         serverBootstrapBossGroupSize \n         property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. \n         Number of available processors \n         Any integer \n     \n     \n         serverBootstrapWorkerGroupSize \n         property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. \n         (Number of available processors) 2 \n         Any integer \n     \n     \n         serverBootstrapClientGroupSize \n         property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. \n         (Number of available processors) 2 \n         Any integer \n     \n     \n         defaultHost \n         The default host of the transport. \n         0.0.0.0 \n         Any valid host \n     \n     \n         defaultHttpPort \n         The default port if the default scheme is 'http'. \n         8280 \n         Any valid port \n     \n     \n         defaultHttpsPort \n         The default port if the default scheme is 'https'. \n         8243 \n         Any valid port \n     \n     \n         defaultScheme \n         The default protocol. \n         http \n         http https \n     \n     \n         keyStoreLocation \n         The default keystore file path. \n         ${carbon.home}/resources/security/wso2carbon.jks \n         Path to wso2carbon.jks file \n     \n     \n         keyStorePassword \n         The default keystore password. \n         wso2carbon \n         String of keystore password \n     \n     \n         certPassword \n         The default cert password. \n         wso2carbon \n         String of cert password \n       Examples  EXAMPLE 1  @source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' ,request.size.validation.configuration= request.size.validation:true ,server.bootstrap.configuration= server.bootstrap.socket.timeout:25  @map(type='xml'))\ndefine stream FooStream (symbol string, price float, volume long);  Above source listenerConfiguration performs a default XML input mapping. The expected input is as follows: events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events If basic authentication is enabled via the  basic.auth.enabled='true  setting, each input event is also expected to contain the  Authorization:'Basic encodeBase64(username:Password)'  header.", 
            "title": "http (Source)"
        }, 
        {
            "location": "/api/1.0.19/", 
            "text": "API Docs - v1.0.19\n\n\nSink\n\n\nhttp \n(Sink)\n\n\nThis extension publish the HTTP events in any HTTP method  POST, GET, PUT, DELETE  via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically.\n\n\n\nSyntax\n\n\n@sink(type=\nhttp\n, publisher.url=\nSTRING\n, basic.auth.username=\nSTRING\n, basic.auth.password=\nSTRING\n, https.truststore.file=\nSTRING\n, https.truststore.password=\nSTRING\n, headers=\nSTRING\n, method=\nSTRING\n, socket.idle.timeout=\nINT\n, chunk.disabled=\nBOOL\n, ssl.protocol=\nSTRING\n, parameters=\nSTRING\n, ciphers=\nSTRING\n, ssl.enabled.protocols=\nSTRING\n, client.enable.session.creation=\nSTRING\n, follow.redirect=\nBOOL\n, max.redirect.count=\nINT\n, tls.store.type=\nSTRING\n, proxy.host=\nSTRING\n, proxy.port=\nSTRING\n, proxy.username=\nSTRING\n, proxy.password=\nSTRING\n, client.bootstrap.configuration=\nSTRING\n, client.bootstrap.nodelay=\nBOOL\n, client.bootstrap.keepalive=\nBOOL\n, client.bootstrap.sendbuffersize=\nINT\n, client.bootstrap.recievebuffersize=\nINT\n, client.bootstrap.connect.timeout=\nINT\n, client.bootstrap.socket.reuse=\nBOOL\n, client.bootstrap.socket.timeout=\nSTRING\n, client.threadpool.configurations=\nSTRING\n, client.connection.pool.count=\nINT\n, client.max.active.connections.per.pool=\nINT\n, client.min.idle.connections.per.pool=\nINT\n, client.max.idle.connections.per.pool=\nINT\n, client.min.eviction.idle.time=\nSTRING\n, sender.thread.count=\nSTRING\n, event.group.executor.thread.size=\nSTRING\n, max.wait.for.client.connection.pool=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npublisher.url\n\n        \nThe URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use \nhttps\n instead of \nhttp\n in the publisher.url.e.g., \nhttp://localhost:8080/endpoint\n, \nhttps://localhost:8080/endpoint\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbasic.auth.username\n\n        \nThe username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI.\n\n        \n \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nbasic.auth.password\n\n        \nThe password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI.\n\n        \n \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nhttps.truststore.file\n\n        \nThe file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required.\n\n        \n${carbon.home}/resources/security/client-truststore.jks\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nhttps.truststore.password\n\n        \nThe password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password.\n\n        \nwso2carbon\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheaders\n\n        \nThe headers that should be included as a HTTP request headers. There can be any number of headers concatenated on following format. \"'header1:value1','header2:value2'\". User can include content-type header if he need to any specific type for payload if not system get the mapping type as the content-Type header (ie. @map(xml):application/xml,@map(json):application/json,@map(text):plain/text ) and if user does not include any mapping type then system gets the 'plain/text' as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header.\n\n        \n \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmethod\n\n        \nFor HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header.\n\n        \nPOST\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsocket.idle.timeout\n\n        \nSocket timeout value in millisecond\n\n        \n6000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nchunk.disabled\n\n        \nport: Port number of the remote service\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.protocol\n\n        \nThe SSL protocol version\n\n        \nTLS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nparameters\n\n        \nParameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\"\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nciphers\n\n        \nList of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.enabled.protocols\n\n        \nSSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.enable.session.creation\n\n        \nEnable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfollow.redirect\n\n        \nRedirect related enabled.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.redirect.count\n\n        \nMaximum redirect count.\n\n        \n5\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.store.type\n\n        \nTLS store type to be used.\n\n        \nJKS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nproxy.host\n\n        \nProxy server host\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nproxy.port\n\n        \nProxy server port\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nproxy.username\n\n        \nProxy server username\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nproxy.password\n\n        \nProxy server password\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.configuration\n\n        \nClient bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\"\n\n        \nTODO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.nodelay\n\n        \nHttp client no delay.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.keepalive\n\n        \nHttp client keep alive.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.sendbuffersize\n\n        \nHttp client send buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.recievebuffersize\n\n        \nHttp client receive buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.connect.timeout\n\n        \nHttp client connection timeout.\n\n        \n15000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.socket.reuse\n\n        \nTo enable http socket reuse.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.socket.timeout\n\n        \nHttp client socket timeout.\n\n        \n15\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.threadpool.configurations\n\n        \nThread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\"\n\n        \nTODO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.connection.pool.count\n\n        \nConnection pool count.\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.max.active.connections.per.pool\n\n        \nActive connections per pool.\n\n        \n-1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.min.idle.connections.per.pool\n\n        \nMinimum ideal connection per pool.\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.max.idle.connections.per.pool\n\n        \nMaximum ideal connection per pool.\n\n        \n100\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.min.eviction.idle.time\n\n        \nMinimum eviction idle time.\n\n        \n5 * 60 * 1000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsender.thread.count\n\n        \nHttp sender thread count.\n\n        \n20\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nevent.group.executor.thread.size\n\n        \nEvent group executor thread size.\n\n        \n15\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.wait.for.client.connection.pool\n\n        \nMaximum wait for client connection pool.\n\n        \n60000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nclientBootstrapBossGroupSize\n\n        \nproperty to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads.\n\n        \n4\n\n        \nAny integer\n\n    \n\n    \n\n        \nclientBootstrapWorkerGroupSize\n\n        \nproperty to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode.\n\n        \n8\n\n        \nAny integer\n\n    \n\n    \n\n        \ntrustStoreLocation\n\n        \nThe default truststore file path.\n\n        \n${carbon.home}/resources/security/client-truststore.jks\n\n        \nPath to client-truststore.jks\n\n    \n\n    \n\n        \ntrustStorePassword\n\n        \nThe default truststore password.\n\n        \nwso2carbon\n\n        \nTruststore password\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers=\n'content-type:xml','content-length:94'\n,client.bootstrap.configuration=\n'client.bootstrap.socket.timeout:20','client.bootstrap.worker.group.size:10'\n,client.pool.configuration=\n'client.connection.pool.count:10','client.max.active.connections.per.pool:1'\n @map(type='xml' , @payload('{{payloadBody}}')))define stream FooStream (payloadBody String, method string, headers string);\n\n\n\n\n\nIf it is xml mapping expected input should be in following format for FooStream:{\nevents\n    \nevent\n        \nsymbol\nWSO2\n/symbol\n        \nprice\n55.6\n/price\n        \nvolume\n100\n/volume\n    \n/event\n/events\n,POST,Content-Length:24#Content-Location:USA#Retry-After:120}Above event will generate output as below.~Output http event payload\nevents\nevent\nsymbol\nWSO2\n/symbol\nprice\n55.6\n/price\nvolume\n100\n/volume\n/event\n/events\n~Output http event headersContent-Length:24,Content-Location:'USA',Retry-After:120,Content-Type:'application/xml',HTTP_METHOD:'POST',~Output http event propertiesHTTP_METHOD:'POST',HOST:'localhost',PORT:8009PROTOCOL:'http'TO:'/foo'\n\n\n\nSource\n\n\nhttp \n(Source)\n\n\nThe HTTP source receives POST requests via HTTP or HTTPS in format such as \ntext\n, \nXML\n and \nJSON\n. If required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service.\n\n\n\nSyntax\n\n\n@source(type=\nhttp\n, receiver.url=\nSTRING\n, basic.auth.enabled=\nSTRING\n, worker.count=\nSTRING\n, socket.idle.timeout=\nINT\n, ssl.verify.client=\nSTRING\n, ssl.protocol=\nSTRING\n, tls.store.type=\nSTRING\n, parameters=\nSTRING\n, ciphers=\nSTRING\n, ssl.enabled.protocols=\nSTRING\n, server.enable.session.creation=\nSTRING\n, server.supported.snimatchers=\nSTRING\n, server.suported.server.names=\nSTRING\n, request.size.validation.configuration=\nSTRING\n, request.size.validation=\nSTRING\n, request.size.validation.maximum.value=\nSTRING\n, request.size.validation.reject.status.code=\nSTRING\n, request.size.validation.reject.message=\nSTRING\n, request.size.validation.reject.message.content.type=\nSTRING\n, header.size.validation=\nSTRING\n, header.validation.maximum.request.line=\nSTRING\n, header.validation.maximum.size=\nSTRING\n, header.validation.maximum.chunk.size=\nSTRING\n, header.validation.reject.status.code=\nSTRING\n, header.validation.reject.message=\nSTRING\n, header.validation.reject.message.content.type=\nSTRING\n, server.bootstrap.configuration=\nOBJECT\n, server.bootstrap.nodelay=\nBOOL\n, server.bootstrap.keepalive=\nBOOL\n, server.bootstrap.sendbuffersize=\nINT\n, server.bootstrap.recievebuffersize=\nINT\n, server.bootstrap.connect.timeout=\nINT\n, server.bootstrap.socket.reuse=\nBOOL\n, server.bootstrap.socket.timeout=\nBOOL\n, server.bootstrap.socket.backlog=\nBOOL\n, trace.log.enabled=\nBOOL\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nreceiver.url\n\n        \nThe URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format \nhttp://0.0.0.0:9763/\nappNAme\n/\nstreamName\nIf the user want to use SSL the url should be given in following format \nhttps://localhost:8080/\nstreamName\n\n        \nhttp://0.0.0.0:9763/\n/\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nbasic.auth.enabled\n\n        \nIf this is set to \ntrue\n, basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' \n\n        \nfalse\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nworker.count\n\n        \nThe number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering.\n\n        \n1\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsocket.idle.timeout\n\n        \nIdle timeout for HTTP connection.\n\n        \n120000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.verify.client\n\n        \nThe type of client certificate verification.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.protocol\n\n        \nssl/tls related options\n\n        \nTLS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.store.type\n\n        \nTLS store type.\n\n        \nJKS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nparameters\n\n        \nParameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\"\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nciphers\n\n        \nList of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.enabled.protocols\n\n        \nSSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.enable.session.creation\n\n        \nEnable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.supported.snimatchers\n\n        \nHttp SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.suported.server.names\n\n        \nHttp supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.configuration\n\n        \nParameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\"\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation\n\n        \nTo enable the request size validation.\n\n        \nfalse\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.maximum.value\n\n        \nIf request size is validated then maximum size.\n\n        \nInteger.MAX_VALUE\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.reject.status.code\n\n        \nIf request is exceed maximum size and request.size.validation is enabled then status code to be send as response.\n\n        \n401\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.reject.message\n\n        \nIf request is exceed maximum size and request.size.validation is enabled then status message to be send as response.\n\n        \nMessage is bigger than the valid size\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.reject.message.content.type\n\n        \nIf request is exceed maximum size and request.size.validation is enabled then content type to be send as response.\n\n        \nplain/text\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.size.validation\n\n        \nTo enable the header size validation.\n\n        \nfalse\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.maximum.request.line\n\n        \nIf header header validation is enabled then the maximum request line.\n\n        \n4096\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.maximum.size\n\n        \nIf header header validation is enabled then the maximum expected header size.\n\n        \n8192\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.maximum.chunk.size\n\n        \nIf header header validation is enabled then the maximum expected chunk size.\n\n        \n8192\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.reject.status.code\n\n        \n401\n\n        \nIf header is exceed maximum size and header.size.validation is enabled then status code to be send as response.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.reject.message\n\n        \nIf header is exceed maximum size and header.size.validation is enabled then message to be send as response.\n\n        \nMessage header is bigger than the valid size\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.reject.message.content.type\n\n        \nIf header is exceed maximum size and header.size.validation is enabled then content type to be send as response.\n\n        \nplain/text\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.configuration\n\n        \nParameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\"\n\n        \nnull\n\n        \nOBJECT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.nodelay\n\n        \nHttp server no delay.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.keepalive\n\n        \nHttp server keep alive.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.sendbuffersize\n\n        \nHttp server send buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.recievebuffersize\n\n        \nHttp server receive buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.connect.timeout\n\n        \nHttp server connection timeout.\n\n        \n15000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.socket.reuse\n\n        \nTo enable http socket reuse.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.socket.timeout\n\n        \nHttp server socket timeout.\n\n        \n15\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.socket.backlog\n\n        \nTHttp server socket backlog.\n\n        \n100\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntrace.log.enabled\n\n        \nHttp traffic monitoring.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nserverBootstrapBossGroupSize\n\n        \nproperty to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads.\n\n        \n4\n\n        \nAny integer\n\n    \n\n    \n\n        \nserverBootstrapWorkerGroupSize\n\n        \nproperty to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode.\n\n        \n8\n\n        \nAny integer\n\n    \n\n    \n\n        \ndefaultHost\n\n        \nThe default host of the transport.\n\n        \n0.0.0.0\n\n        \nAny valid host\n\n    \n\n    \n\n        \ndefaultHttpPort\n\n        \nThe default port if the default scheme is 'http'.\n\n        \n8280\n\n        \nAny valid port\n\n    \n\n    \n\n        \ndefaultHttpsPort\n\n        \nThe default port if the default scheme is 'https'.\n\n        \n8243\n\n        \nAny valid port\n\n    \n\n    \n\n        \ndefaultScheme\n\n        \nThe default protocol.\n\n        \nhttp\n\n        \nhttp\nhttps\n\n    \n\n    \n\n        \nkeyStoreLocation\n\n        \nThe default keystore file path.\n\n        \n${carbon.home}/resources/security/wso2carbon.jks\n\n        \nPath to wso2carbon.jks file\n\n    \n\n    \n\n        \nkeyStorePassword\n\n        \nThe default keystore password.\n\n        \nwso2carbon\n\n        \nString of keystore password\n\n    \n\n    \n\n        \ncertPassword\n\n        \nThe default cert password.\n\n        \nwso2carbon\n\n        \nString of cert password\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters=\n'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2'\n,request.size.validation.configuration=\nrequest.size.validation:true\n,server.bootstrap.configuration=\nserver.bootstrap.socket.timeout:25\n @map(type='xml'))\ndefine stream FooStream (symbol string, price float, volume long);\n\n\n\n\n\nAbove source listenerConfiguration performs a default XML input mapping. The expected input is as follows:\nevents\nevent\nsymbol\nWSO2\n/symbol\nprice\n55.6\n/price\nvolume\n100\n/volume\n/event\n/events\nIf basic authentication is enabled via the \nbasic.auth.enabled='true\n setting, each input event is also expected to contain the \nAuthorization:'Basic encodeBase64(username:Password)'\n header.", 
            "title": "1.0.19"
        }, 
        {
            "location": "/api/1.0.19/#api-docs-v1019", 
            "text": "", 
            "title": "API Docs - v1.0.19"
        }, 
        {
            "location": "/api/1.0.19/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/1.0.19/#http-sink", 
            "text": "This extension publish the HTTP events in any HTTP method  POST, GET, PUT, DELETE  via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically.  Syntax  @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         publisher.url \n         The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use  https  instead of  http  in the publisher.url.e.g.,  http://localhost:8080/endpoint ,  https://localhost:8080/endpoint \n         \n         STRING \n         No \n         No \n     \n     \n         basic.auth.username \n         The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. \n           \n         STRING \n         Yes \n         No \n     \n     \n         basic.auth.password \n         The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. \n           \n         STRING \n         Yes \n         No \n     \n     \n         https.truststore.file \n         The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. \n         ${carbon.home}/resources/security/client-truststore.jks \n         STRING \n         Yes \n         No \n     \n     \n         https.truststore.password \n         The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. \n         wso2carbon \n         STRING \n         Yes \n         No \n     \n     \n         headers \n         The headers that should be included as a HTTP request headers. There can be any number of headers concatenated on following format. \"'header1:value1','header2:value2'\". User can include content-type header if he need to any specific type for payload if not system get the mapping type as the content-Type header (ie. @map(xml):application/xml,@map(json):application/json,@map(text):plain/text ) and if user does not include any mapping type then system gets the 'plain/text' as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header. \n           \n         STRING \n         Yes \n         No \n     \n     \n         method \n         For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. \n         POST \n         STRING \n         Yes \n         No \n     \n     \n         socket.idle.timeout \n         Socket timeout value in millisecond \n         6000 \n         INT \n         Yes \n         No \n     \n     \n         chunk.disabled \n         port: Port number of the remote service \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         ssl.protocol \n         The SSL protocol version \n         TLS \n         STRING \n         Yes \n         No \n     \n     \n         parameters \n         Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ciphers \n         List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ssl.enabled.protocols \n         SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         client.enable.session.creation \n         Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         follow.redirect \n         Redirect related enabled. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         max.redirect.count \n         Maximum redirect count. \n         5 \n         INT \n         Yes \n         No \n     \n     \n         tls.store.type \n         TLS store type to be used. \n         JKS \n         STRING \n         Yes \n         No \n     \n     \n         proxy.host \n         Proxy server host \n         null \n         STRING \n         Yes \n         No \n     \n     \n         proxy.port \n         Proxy server port \n         null \n         STRING \n         Yes \n         No \n     \n     \n         proxy.username \n         Proxy server username \n         null \n         STRING \n         Yes \n         No \n     \n     \n         proxy.password \n         Proxy server password \n         null \n         STRING \n         Yes \n         No \n     \n     \n         client.bootstrap.configuration \n         Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" \n         TODO \n         STRING \n         Yes \n         No \n     \n     \n         client.bootstrap.nodelay \n         Http client no delay. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         client.bootstrap.keepalive \n         Http client keep alive. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         client.bootstrap.sendbuffersize \n         Http client send buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         client.bootstrap.recievebuffersize \n         Http client receive buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         client.bootstrap.connect.timeout \n         Http client connection timeout. \n         15000 \n         INT \n         Yes \n         No \n     \n     \n         client.bootstrap.socket.reuse \n         To enable http socket reuse. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         client.bootstrap.socket.timeout \n         Http client socket timeout. \n         15 \n         STRING \n         Yes \n         No \n     \n     \n         client.threadpool.configurations \n         Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" \n         TODO \n         STRING \n         Yes \n         No \n     \n     \n         client.connection.pool.count \n         Connection pool count. \n         0 \n         INT \n         Yes \n         No \n     \n     \n         client.max.active.connections.per.pool \n         Active connections per pool. \n         -1 \n         INT \n         Yes \n         No \n     \n     \n         client.min.idle.connections.per.pool \n         Minimum ideal connection per pool. \n         0 \n         INT \n         Yes \n         No \n     \n     \n         client.max.idle.connections.per.pool \n         Maximum ideal connection per pool. \n         100 \n         INT \n         Yes \n         No \n     \n     \n         client.min.eviction.idle.time \n         Minimum eviction idle time. \n         5 * 60 * 1000 \n         STRING \n         Yes \n         No \n     \n     \n         sender.thread.count \n         Http sender thread count. \n         20 \n         STRING \n         Yes \n         No \n     \n     \n         event.group.executor.thread.size \n         Event group executor thread size. \n         15 \n         STRING \n         Yes \n         No \n     \n     \n         max.wait.for.client.connection.pool \n         Maximum wait for client connection pool. \n         60000 \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         clientBootstrapBossGroupSize \n         property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. \n         4 \n         Any integer \n     \n     \n         clientBootstrapWorkerGroupSize \n         property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. \n         8 \n         Any integer \n     \n     \n         trustStoreLocation \n         The default truststore file path. \n         ${carbon.home}/resources/security/client-truststore.jks \n         Path to client-truststore.jks \n     \n     \n         trustStorePassword \n         The default truststore password. \n         wso2carbon \n         Truststore password \n       Examples  EXAMPLE 1  @sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers= 'content-type:xml','content-length:94' ,client.bootstrap.configuration= 'client.bootstrap.socket.timeout:20','client.bootstrap.worker.group.size:10' ,client.pool.configuration= 'client.connection.pool.count:10','client.max.active.connections.per.pool:1'  @map(type='xml' , @payload('{{payloadBody}}')))define stream FooStream (payloadBody String, method string, headers string);  If it is xml mapping expected input should be in following format for FooStream:{ events      event          symbol WSO2 /symbol          price 55.6 /price          volume 100 /volume      /event /events ,POST,Content-Length:24#Content-Location:USA#Retry-After:120}Above event will generate output as below.~Output http event payload events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ~Output http event headersContent-Length:24,Content-Location:'USA',Retry-After:120,Content-Type:'application/xml',HTTP_METHOD:'POST',~Output http event propertiesHTTP_METHOD:'POST',HOST:'localhost',PORT:8009PROTOCOL:'http'TO:'/foo'", 
            "title": "http (Sink)"
        }, 
        {
            "location": "/api/1.0.19/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.19/#http-source", 
            "text": "The HTTP source receives POST requests via HTTP or HTTPS in format such as  text ,  XML  and  JSON . If required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service.  Syntax  @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= STRING , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         receiver.url \n         The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format  http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format  https://localhost:8080/ streamName \n         http://0.0.0.0:9763/ / \n         STRING \n         Yes \n         No \n     \n     \n         basic.auth.enabled \n         If this is set to  true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false'  \n         false \n         STRING \n         Yes \n         No \n     \n     \n         worker.count \n         The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. \n         1 \n         STRING \n         Yes \n         No \n     \n     \n         socket.idle.timeout \n         Idle timeout for HTTP connection. \n         120000 \n         INT \n         Yes \n         No \n     \n     \n         ssl.verify.client \n         The type of client certificate verification. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ssl.protocol \n         ssl/tls related options \n         TLS \n         STRING \n         Yes \n         No \n     \n     \n         tls.store.type \n         TLS store type. \n         JKS \n         STRING \n         Yes \n         No \n     \n     \n         parameters \n         Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ciphers \n         List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ssl.enabled.protocols \n         SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         server.enable.session.creation \n         Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         server.supported.snimatchers \n         Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         server.suported.server.names \n         Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.configuration \n         Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" \n         null \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation \n         To enable the request size validation. \n         false \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.maximum.value \n         If request size is validated then maximum size. \n         Integer.MAX_VALUE \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.reject.status.code \n         If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. \n         401 \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.reject.message \n         If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. \n         Message is bigger than the valid size \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.reject.message.content.type \n         If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. \n         plain/text \n         STRING \n         Yes \n         No \n     \n     \n         header.size.validation \n         To enable the header size validation. \n         false \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.maximum.request.line \n         If header header validation is enabled then the maximum request line. \n         4096 \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.maximum.size \n         If header header validation is enabled then the maximum expected header size. \n         8192 \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.maximum.chunk.size \n         If header header validation is enabled then the maximum expected chunk size. \n         8192 \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.reject.status.code \n         401 \n         If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.reject.message \n         If header is exceed maximum size and header.size.validation is enabled then message to be send as response. \n         Message header is bigger than the valid size \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.reject.message.content.type \n         If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. \n         plain/text \n         STRING \n         Yes \n         No \n     \n     \n         server.bootstrap.configuration \n         Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" \n         null \n         OBJECT \n         Yes \n         No \n     \n     \n         server.bootstrap.nodelay \n         Http server no delay. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.keepalive \n         Http server keep alive. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.sendbuffersize \n         Http server send buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         server.bootstrap.recievebuffersize \n         Http server receive buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         server.bootstrap.connect.timeout \n         Http server connection timeout. \n         15000 \n         INT \n         Yes \n         No \n     \n     \n         server.bootstrap.socket.reuse \n         To enable http socket reuse. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.socket.timeout \n         Http server socket timeout. \n         15 \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.socket.backlog \n         THttp server socket backlog. \n         100 \n         BOOL \n         Yes \n         No \n     \n     \n         trace.log.enabled \n         Http traffic monitoring. \n         false \n         BOOL \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         serverBootstrapBossGroupSize \n         property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. \n         4 \n         Any integer \n     \n     \n         serverBootstrapWorkerGroupSize \n         property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. \n         8 \n         Any integer \n     \n     \n         defaultHost \n         The default host of the transport. \n         0.0.0.0 \n         Any valid host \n     \n     \n         defaultHttpPort \n         The default port if the default scheme is 'http'. \n         8280 \n         Any valid port \n     \n     \n         defaultHttpsPort \n         The default port if the default scheme is 'https'. \n         8243 \n         Any valid port \n     \n     \n         defaultScheme \n         The default protocol. \n         http \n         http https \n     \n     \n         keyStoreLocation \n         The default keystore file path. \n         ${carbon.home}/resources/security/wso2carbon.jks \n         Path to wso2carbon.jks file \n     \n     \n         keyStorePassword \n         The default keystore password. \n         wso2carbon \n         String of keystore password \n     \n     \n         certPassword \n         The default cert password. \n         wso2carbon \n         String of cert password \n       Examples  EXAMPLE 1  @source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' ,request.size.validation.configuration= request.size.validation:true ,server.bootstrap.configuration= server.bootstrap.socket.timeout:25  @map(type='xml'))\ndefine stream FooStream (symbol string, price float, volume long);  Above source listenerConfiguration performs a default XML input mapping. The expected input is as follows: events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events If basic authentication is enabled via the  basic.auth.enabled='true  setting, each input event is also expected to contain the  Authorization:'Basic encodeBase64(username:Password)'  header.", 
            "title": "http (Source)"
        }, 
        {
            "location": "/api/1.0.18/", 
            "text": "API Docs - v1.0.18\n\n\nSink\n\n\nhttp \n(Sink)\n\n\nThis extension publish the HTTP events in any HTTP method  POST, GET, PUT, DELETE  via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically.\n\n\n\nSyntax\n\n\n@sink(type=\nhttp\n, publisher.url=\nSTRING\n, basic.auth.username=\nSTRING\n, basic.auth.password=\nSTRING\n, https.truststore.file=\nSTRING\n, https.truststore.password=\nSTRING\n, headers=\nSTRING\n, method=\nSTRING\n, socket.idle.timeout=\nINT\n, chunk.disabled=\nBOOL\n, ssl.protocol=\nSTRING\n, parameters=\nSTRING\n, ciphers=\nSTRING\n, ssl.enabled.protocols=\nSTRING\n, client.enable.session.creation=\nSTRING\n, follow.redirect=\nBOOL\n, max.redirect.count=\nINT\n, tls.store.type=\nSTRING\n, proxy.host=\nSTRING\n, proxy.port=\nSTRING\n, proxy.username=\nSTRING\n, proxy.password=\nSTRING\n, client.bootstrap.configuration=\nSTRING\n, client.bootstrap.nodelay=\nBOOL\n, client.bootstrap.keepalive=\nBOOL\n, client.bootstrap.sendbuffersize=\nINT\n, client.bootstrap.recievebuffersize=\nINT\n, client.bootstrap.connect.timeout=\nINT\n, client.bootstrap.socket.reuse=\nBOOL\n, client.bootstrap.socket.timeout=\nSTRING\n, client.threadpool.configurations=\nSTRING\n, client.connection.pool.count=\nINT\n, client.max.active.connections.per.pool=\nINT\n, client.min.idle.connections.per.pool=\nINT\n, client.max.idle.connections.per.pool=\nINT\n, client.min.eviction.idle.time=\nSTRING\n, sender.thread.count=\nSTRING\n, event.group.executor.thread.size=\nSTRING\n, max.wait.for.client.connection.pool=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npublisher.url\n\n        \nThe URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use \nhttps\n instead of \nhttp\n in the publisher.url.e.g., \nhttp://localhost:8080/endpoint\n, \nhttps://localhost:8080/endpoint\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbasic.auth.username\n\n        \nThe username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI.\n\n        \n \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nbasic.auth.password\n\n        \nThe password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI.\n\n        \n \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nhttps.truststore.file\n\n        \nThe file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required.\n\n        \n${carbon.home}/resources/security/client-truststore.jks\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nhttps.truststore.password\n\n        \nThe password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password.\n\n        \nwso2carbon\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheaders\n\n        \nThe headers that should be included as a HTTP request headers. There can be any number of headers concatenated on following format. \"'header1:value1','header2:value2'\". User can include content-type header if he need to any specific type for payload if not system get the mapping type as the content-Type header (ie. @map(xml):application/xml,@map(json):application/json,@map(text):plain/text ) and if user does not include any mapping type then system gets the 'plain/text' as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header.\n\n        \n \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmethod\n\n        \nFor HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header.\n\n        \nPOST\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsocket.idle.timeout\n\n        \nSocket timeout value in millisecond\n\n        \n6000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nchunk.disabled\n\n        \nport: Port number of the remote service\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.protocol\n\n        \nThe SSL protocol version\n\n        \nTLS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nparameters\n\n        \nParameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\"\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nciphers\n\n        \nList of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.enabled.protocols\n\n        \nSSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.enable.session.creation\n\n        \nEnable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfollow.redirect\n\n        \nRedirect related enabled.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.redirect.count\n\n        \nMaximum redirect count.\n\n        \n5\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.store.type\n\n        \nTLS store type to be used.\n\n        \nJKS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nproxy.host\n\n        \nProxy server host\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nproxy.port\n\n        \nProxy server port\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nproxy.username\n\n        \nProxy server username\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nproxy.password\n\n        \nProxy server password\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.configuration\n\n        \nClient bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\"\n\n        \nTODO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.nodelay\n\n        \nHttp client no delay.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.keepalive\n\n        \nHttp client keep alive.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.sendbuffersize\n\n        \nHttp client send buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.recievebuffersize\n\n        \nHttp client receive buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.connect.timeout\n\n        \nHttp client connection timeout.\n\n        \n15000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.socket.reuse\n\n        \nTo enable http socket reuse.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.socket.timeout\n\n        \nHttp client socket timeout.\n\n        \n15\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.threadpool.configurations\n\n        \nThread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\"\n\n        \nTODO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.connection.pool.count\n\n        \nConnection pool count.\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.max.active.connections.per.pool\n\n        \nActive connections per pool.\n\n        \n-1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.min.idle.connections.per.pool\n\n        \nMinimum ideal connection per pool.\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.max.idle.connections.per.pool\n\n        \nMaximum ideal connection per pool.\n\n        \n100\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.min.eviction.idle.time\n\n        \nMinimum eviction idle time.\n\n        \n5 * 60 * 1000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsender.thread.count\n\n        \nHttp sender thread count.\n\n        \n20\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nevent.group.executor.thread.size\n\n        \nEvent group executor thread size.\n\n        \n15\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.wait.for.client.connection.pool\n\n        \nMaximum wait for client connection pool.\n\n        \n60000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nclientBootstrapBossGroupSize\n\n        \nproperty to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads.\n\n        \n4\n\n        \nAny integer\n\n    \n\n    \n\n        \nclientBootstrapWorkerGroupSize\n\n        \nproperty to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode.\n\n        \n8\n\n        \nAny integer\n\n    \n\n    \n\n        \ntrustStoreLocation\n\n        \nThe default truststore file path.\n\n        \n${carbon.home}/resources/security/client-truststore.jks\n\n        \nPath to client-truststore.jks\n\n    \n\n    \n\n        \ntrustStorePassword\n\n        \nThe default truststore password.\n\n        \nwso2carbon\n\n        \nTruststore password\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers=\n'content-type:xml','content-length:94'\n,client.bootstrap.configuration=\n'client.bootstrap.socket.timeout:20','client.bootstrap.worker.group.size:10'\n,client.pool.configuration=\n'client.connection.pool.count:10','client.max.active.connections.per.pool:1'\n @map(type='xml' , @payload('{{payloadBody}}')))define stream FooStream (payloadBody String, method string, headers string);\n\n\n\n\n\nIf it is xml mapping expected input should be in following format for FooStream:{\nevents\n    \nevent\n        \nsymbol\nWSO2\n/symbol\n        \nprice\n55.6\n/price\n        \nvolume\n100\n/volume\n    \n/event\n/events\n,POST,Content-Length:24#Content-Location:USA#Retry-After:120}Above event will generate output as below.~Output http event payload\nevents\nevent\nsymbol\nWSO2\n/symbol\nprice\n55.6\n/price\nvolume\n100\n/volume\n/event\n/events\n~Output http event headersContent-Length:24,Content-Location:'USA',Retry-After:120,Content-Type:'application/xml',HTTP_METHOD:'POST',~Output http event propertiesHTTP_METHOD:'POST',HOST:'localhost',PORT:8009PROTOCOL:'http'TO:'/foo'\n\n\n\nSource\n\n\nhttp \n(Source)\n\n\nThe HTTP source receives POST requests via HTTP or HTTPS in format such as \ntext\n, \nXML\n and \nJSON\n. If required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service.\n\n\n\nSyntax\n\n\n@source(type=\nhttp\n, receiver.url=\nSTRING\n, basic.auth.enabled=\nSTRING\n, worker.count=\nSTRING\n, socket.idle.timeout=\nINT\n, ssl.verify.client=\nSTRING\n, ssl.protocol=\nSTRING\n, tls.store.type=\nSTRING\n, parameters=\nSTRING\n, ciphers=\nSTRING\n, ssl.enabled.protocols=\nSTRING\n, server.enable.session.creation=\nSTRING\n, server.supported.snimatchers=\nSTRING\n, server.suported.server.names=\nSTRING\n, request.size.validation.configuration=\nSTRING\n, request.size.validation=\nSTRING\n, request.size.validation.maximum.value=\nSTRING\n, request.size.validation.reject.status.code=\nSTRING\n, request.size.validation.reject.message=\nSTRING\n, request.size.validation.reject.message.content.type=\nSTRING\n, header.size.validation=\nSTRING\n, header.validation.maximum.request.line=\nSTRING\n, header.validation.maximum.size=\nSTRING\n, header.validation.maximum.chunk.size=\nSTRING\n, header.validation.reject.status.code=\nSTRING\n, header.validation.reject.message=\nSTRING\n, header.validation.reject.message.content.type=\nSTRING\n, server.bootstrap.configuration=\nOBJECT\n, server.bootstrap.nodelay=\nBOOL\n, server.bootstrap.keepalive=\nBOOL\n, server.bootstrap.sendbuffersize=\nINT\n, server.bootstrap.recievebuffersize=\nINT\n, server.bootstrap.connect.timeout=\nINT\n, server.bootstrap.socket.reuse=\nBOOL\n, server.bootstrap.socket.timeout=\nBOOL\n, server.bootstrap.socket.backlog=\nBOOL\n, trace.log.enabled=\nBOOL\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nreceiver.url\n\n        \nThe URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format \nhttp://0.0.0.0:9763/\nappNAme\n/\nstreamName\nIf the user want to use SSL the url should be given in following format \nhttps://localhost:8080/\nstreamName\n\n        \nhttp://0.0.0.0:9763/\n/\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nbasic.auth.enabled\n\n        \nIf this is set to \ntrue\n, basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' \n\n        \nfalse\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nworker.count\n\n        \nThe number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering.\n\n        \n1\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsocket.idle.timeout\n\n        \nIdle timeout for HTTP connection.\n\n        \n120000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.verify.client\n\n        \nThe type of client certificate verification.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.protocol\n\n        \nssl/tls related options\n\n        \nTLS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.store.type\n\n        \nTLS store type.\n\n        \nJKS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nparameters\n\n        \nParameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\"\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nciphers\n\n        \nList of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.enabled.protocols\n\n        \nSSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.enable.session.creation\n\n        \nEnable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.supported.snimatchers\n\n        \nHttp SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.suported.server.names\n\n        \nHttp supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.configuration\n\n        \nParameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\"\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation\n\n        \nTo enable the request size validation.\n\n        \nfalse\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.maximum.value\n\n        \nIf request size is validated then maximum size.\n\n        \nInteger.MAX_VALUE\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.reject.status.code\n\n        \nIf request is exceed maximum size and request.size.validation is enabled then status code to be send as response.\n\n        \n401\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.reject.message\n\n        \nIf request is exceed maximum size and request.size.validation is enabled then status message to be send as response.\n\n        \nMessage is bigger than the valid size\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.reject.message.content.type\n\n        \nIf request is exceed maximum size and request.size.validation is enabled then content type to be send as response.\n\n        \nplain/text\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.size.validation\n\n        \nTo enable the header size validation.\n\n        \nfalse\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.maximum.request.line\n\n        \nIf header header validation is enabled then the maximum request line.\n\n        \n4096\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.maximum.size\n\n        \nIf header header validation is enabled then the maximum expected header size.\n\n        \n8192\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.maximum.chunk.size\n\n        \nIf header header validation is enabled then the maximum expected chunk size.\n\n        \n8192\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.reject.status.code\n\n        \n401\n\n        \nIf header is exceed maximum size and header.size.validation is enabled then status code to be send as response.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.reject.message\n\n        \nIf header is exceed maximum size and header.size.validation is enabled then message to be send as response.\n\n        \nMessage header is bigger than the valid size\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.reject.message.content.type\n\n        \nIf header is exceed maximum size and header.size.validation is enabled then content type to be send as response.\n\n        \nplain/text\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.configuration\n\n        \nParameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\"\n\n        \nnull\n\n        \nOBJECT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.nodelay\n\n        \nHttp server no delay.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.keepalive\n\n        \nHttp server keep alive.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.sendbuffersize\n\n        \nHttp server send buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.recievebuffersize\n\n        \nHttp server receive buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.connect.timeout\n\n        \nHttp server connection timeout.\n\n        \n15000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.socket.reuse\n\n        \nTo enable http socket reuse.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.socket.timeout\n\n        \nHttp server socket timeout.\n\n        \n15\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.socket.backlog\n\n        \nTHttp server socket backlog.\n\n        \n100\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntrace.log.enabled\n\n        \nHttp traffic monitoring.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nserverBootstrapBossGroupSize\n\n        \nproperty to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads.\n\n        \n4\n\n        \nAny integer\n\n    \n\n    \n\n        \nserverBootstrapWorkerGroupSize\n\n        \nproperty to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode.\n\n        \n8\n\n        \nAny integer\n\n    \n\n    \n\n        \ndefaultHost\n\n        \nThe default host of the transport.\n\n        \n0.0.0.0\n\n        \nAny valid host\n\n    \n\n    \n\n        \ndefaultHttpPort\n\n        \nThe default port if the default scheme is 'http'.\n\n        \n8280\n\n        \nAny valid port\n\n    \n\n    \n\n        \ndefaultHttpsPort\n\n        \nThe default port if the default scheme is 'https'.\n\n        \n8243\n\n        \nAny valid port\n\n    \n\n    \n\n        \ndefaultScheme\n\n        \nThe default protocol.\n\n        \nhttp\n\n        \nhttp\nhttps\n\n    \n\n    \n\n        \nkeyStoreLocation\n\n        \nThe default keystore file path.\n\n        \n${carbon.home}/resources/security/wso2carbon.jks\n\n        \nPath to wso2carbon.jks file\n\n    \n\n    \n\n        \nkeyStorePassword\n\n        \nThe default keystore password.\n\n        \nwso2carbon\n\n        \nString of keystore password\n\n    \n\n    \n\n        \ncertPassword\n\n        \nThe default cert password.\n\n        \nwso2carbon\n\n        \nString of cert password\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters=\n'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2'\n,request.size.validation.configuration=\nrequest.size.validation:true\n,server.bootstrap.configuration=\nserver.bootstrap.socket.timeout:25\n @map(type='xml'))\ndefine stream FooStream (symbol string, price float, volume long);\n\n\n\n\n\nAbove source listenerConfiguration performs a default XML input mapping. The expected input is as follows:\nevents\nevent\nsymbol\nWSO2\n/symbol\nprice\n55.6\n/price\nvolume\n100\n/volume\n/event\n/events\nIf basic authentication is enabled via the \nbasic.auth.enabled='true\n setting, each input event is also expected to contain the \nAuthorization:'Basic encodeBase64(username:Password)'\n header.", 
            "title": "1.0.18"
        }, 
        {
            "location": "/api/1.0.18/#api-docs-v1018", 
            "text": "", 
            "title": "API Docs - v1.0.18"
        }, 
        {
            "location": "/api/1.0.18/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/1.0.18/#http-sink", 
            "text": "This extension publish the HTTP events in any HTTP method  POST, GET, PUT, DELETE  via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically.  Syntax  @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         publisher.url \n         The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use  https  instead of  http  in the publisher.url.e.g.,  http://localhost:8080/endpoint ,  https://localhost:8080/endpoint \n         \n         STRING \n         No \n         No \n     \n     \n         basic.auth.username \n         The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. \n           \n         STRING \n         Yes \n         No \n     \n     \n         basic.auth.password \n         The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. \n           \n         STRING \n         Yes \n         No \n     \n     \n         https.truststore.file \n         The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. \n         ${carbon.home}/resources/security/client-truststore.jks \n         STRING \n         Yes \n         No \n     \n     \n         https.truststore.password \n         The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. \n         wso2carbon \n         STRING \n         Yes \n         No \n     \n     \n         headers \n         The headers that should be included as a HTTP request headers. There can be any number of headers concatenated on following format. \"'header1:value1','header2:value2'\". User can include content-type header if he need to any specific type for payload if not system get the mapping type as the content-Type header (ie. @map(xml):application/xml,@map(json):application/json,@map(text):plain/text ) and if user does not include any mapping type then system gets the 'plain/text' as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header. \n           \n         STRING \n         Yes \n         No \n     \n     \n         method \n         For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. \n         POST \n         STRING \n         Yes \n         No \n     \n     \n         socket.idle.timeout \n         Socket timeout value in millisecond \n         6000 \n         INT \n         Yes \n         No \n     \n     \n         chunk.disabled \n         port: Port number of the remote service \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         ssl.protocol \n         The SSL protocol version \n         TLS \n         STRING \n         Yes \n         No \n     \n     \n         parameters \n         Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ciphers \n         List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ssl.enabled.protocols \n         SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         client.enable.session.creation \n         Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         follow.redirect \n         Redirect related enabled. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         max.redirect.count \n         Maximum redirect count. \n         5 \n         INT \n         Yes \n         No \n     \n     \n         tls.store.type \n         TLS store type to be used. \n         JKS \n         STRING \n         Yes \n         No \n     \n     \n         proxy.host \n         Proxy server host \n         null \n         STRING \n         Yes \n         No \n     \n     \n         proxy.port \n         Proxy server port \n         null \n         STRING \n         Yes \n         No \n     \n     \n         proxy.username \n         Proxy server username \n         null \n         STRING \n         Yes \n         No \n     \n     \n         proxy.password \n         Proxy server password \n         null \n         STRING \n         Yes \n         No \n     \n     \n         client.bootstrap.configuration \n         Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" \n         TODO \n         STRING \n         Yes \n         No \n     \n     \n         client.bootstrap.nodelay \n         Http client no delay. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         client.bootstrap.keepalive \n         Http client keep alive. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         client.bootstrap.sendbuffersize \n         Http client send buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         client.bootstrap.recievebuffersize \n         Http client receive buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         client.bootstrap.connect.timeout \n         Http client connection timeout. \n         15000 \n         INT \n         Yes \n         No \n     \n     \n         client.bootstrap.socket.reuse \n         To enable http socket reuse. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         client.bootstrap.socket.timeout \n         Http client socket timeout. \n         15 \n         STRING \n         Yes \n         No \n     \n     \n         client.threadpool.configurations \n         Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" \n         TODO \n         STRING \n         Yes \n         No \n     \n     \n         client.connection.pool.count \n         Connection pool count. \n         0 \n         INT \n         Yes \n         No \n     \n     \n         client.max.active.connections.per.pool \n         Active connections per pool. \n         -1 \n         INT \n         Yes \n         No \n     \n     \n         client.min.idle.connections.per.pool \n         Minimum ideal connection per pool. \n         0 \n         INT \n         Yes \n         No \n     \n     \n         client.max.idle.connections.per.pool \n         Maximum ideal connection per pool. \n         100 \n         INT \n         Yes \n         No \n     \n     \n         client.min.eviction.idle.time \n         Minimum eviction idle time. \n         5 * 60 * 1000 \n         STRING \n         Yes \n         No \n     \n     \n         sender.thread.count \n         Http sender thread count. \n         20 \n         STRING \n         Yes \n         No \n     \n     \n         event.group.executor.thread.size \n         Event group executor thread size. \n         15 \n         STRING \n         Yes \n         No \n     \n     \n         max.wait.for.client.connection.pool \n         Maximum wait for client connection pool. \n         60000 \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         clientBootstrapBossGroupSize \n         property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. \n         4 \n         Any integer \n     \n     \n         clientBootstrapWorkerGroupSize \n         property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. \n         8 \n         Any integer \n     \n     \n         trustStoreLocation \n         The default truststore file path. \n         ${carbon.home}/resources/security/client-truststore.jks \n         Path to client-truststore.jks \n     \n     \n         trustStorePassword \n         The default truststore password. \n         wso2carbon \n         Truststore password \n       Examples  EXAMPLE 1  @sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers= 'content-type:xml','content-length:94' ,client.bootstrap.configuration= 'client.bootstrap.socket.timeout:20','client.bootstrap.worker.group.size:10' ,client.pool.configuration= 'client.connection.pool.count:10','client.max.active.connections.per.pool:1'  @map(type='xml' , @payload('{{payloadBody}}')))define stream FooStream (payloadBody String, method string, headers string);  If it is xml mapping expected input should be in following format for FooStream:{ events      event          symbol WSO2 /symbol          price 55.6 /price          volume 100 /volume      /event /events ,POST,Content-Length:24#Content-Location:USA#Retry-After:120}Above event will generate output as below.~Output http event payload events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ~Output http event headersContent-Length:24,Content-Location:'USA',Retry-After:120,Content-Type:'application/xml',HTTP_METHOD:'POST',~Output http event propertiesHTTP_METHOD:'POST',HOST:'localhost',PORT:8009PROTOCOL:'http'TO:'/foo'", 
            "title": "http (Sink)"
        }, 
        {
            "location": "/api/1.0.18/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.18/#http-source", 
            "text": "The HTTP source receives POST requests via HTTP or HTTPS in format such as  text ,  XML  and  JSON . If required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service.  Syntax  @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= STRING , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         receiver.url \n         The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format  http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format  https://localhost:8080/ streamName \n         http://0.0.0.0:9763/ / \n         STRING \n         Yes \n         No \n     \n     \n         basic.auth.enabled \n         If this is set to  true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false'  \n         false \n         STRING \n         Yes \n         No \n     \n     \n         worker.count \n         The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. \n         1 \n         STRING \n         Yes \n         No \n     \n     \n         socket.idle.timeout \n         Idle timeout for HTTP connection. \n         120000 \n         INT \n         Yes \n         No \n     \n     \n         ssl.verify.client \n         The type of client certificate verification. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ssl.protocol \n         ssl/tls related options \n         TLS \n         STRING \n         Yes \n         No \n     \n     \n         tls.store.type \n         TLS store type. \n         JKS \n         STRING \n         Yes \n         No \n     \n     \n         parameters \n         Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ciphers \n         List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ssl.enabled.protocols \n         SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         server.enable.session.creation \n         Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         server.supported.snimatchers \n         Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         server.suported.server.names \n         Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.configuration \n         Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" \n         null \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation \n         To enable the request size validation. \n         false \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.maximum.value \n         If request size is validated then maximum size. \n         Integer.MAX_VALUE \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.reject.status.code \n         If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. \n         401 \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.reject.message \n         If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. \n         Message is bigger than the valid size \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.reject.message.content.type \n         If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. \n         plain/text \n         STRING \n         Yes \n         No \n     \n     \n         header.size.validation \n         To enable the header size validation. \n         false \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.maximum.request.line \n         If header header validation is enabled then the maximum request line. \n         4096 \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.maximum.size \n         If header header validation is enabled then the maximum expected header size. \n         8192 \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.maximum.chunk.size \n         If header header validation is enabled then the maximum expected chunk size. \n         8192 \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.reject.status.code \n         401 \n         If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.reject.message \n         If header is exceed maximum size and header.size.validation is enabled then message to be send as response. \n         Message header is bigger than the valid size \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.reject.message.content.type \n         If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. \n         plain/text \n         STRING \n         Yes \n         No \n     \n     \n         server.bootstrap.configuration \n         Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" \n         null \n         OBJECT \n         Yes \n         No \n     \n     \n         server.bootstrap.nodelay \n         Http server no delay. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.keepalive \n         Http server keep alive. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.sendbuffersize \n         Http server send buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         server.bootstrap.recievebuffersize \n         Http server receive buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         server.bootstrap.connect.timeout \n         Http server connection timeout. \n         15000 \n         INT \n         Yes \n         No \n     \n     \n         server.bootstrap.socket.reuse \n         To enable http socket reuse. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.socket.timeout \n         Http server socket timeout. \n         15 \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.socket.backlog \n         THttp server socket backlog. \n         100 \n         BOOL \n         Yes \n         No \n     \n     \n         trace.log.enabled \n         Http traffic monitoring. \n         false \n         BOOL \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         serverBootstrapBossGroupSize \n         property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. \n         4 \n         Any integer \n     \n     \n         serverBootstrapWorkerGroupSize \n         property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. \n         8 \n         Any integer \n     \n     \n         defaultHost \n         The default host of the transport. \n         0.0.0.0 \n         Any valid host \n     \n     \n         defaultHttpPort \n         The default port if the default scheme is 'http'. \n         8280 \n         Any valid port \n     \n     \n         defaultHttpsPort \n         The default port if the default scheme is 'https'. \n         8243 \n         Any valid port \n     \n     \n         defaultScheme \n         The default protocol. \n         http \n         http https \n     \n     \n         keyStoreLocation \n         The default keystore file path. \n         ${carbon.home}/resources/security/wso2carbon.jks \n         Path to wso2carbon.jks file \n     \n     \n         keyStorePassword \n         The default keystore password. \n         wso2carbon \n         String of keystore password \n     \n     \n         certPassword \n         The default cert password. \n         wso2carbon \n         String of cert password \n       Examples  EXAMPLE 1  @source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' ,request.size.validation.configuration= request.size.validation:true ,server.bootstrap.configuration= server.bootstrap.socket.timeout:25  @map(type='xml'))\ndefine stream FooStream (symbol string, price float, volume long);  Above source listenerConfiguration performs a default XML input mapping. The expected input is as follows: events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events If basic authentication is enabled via the  basic.auth.enabled='true  setting, each input event is also expected to contain the  Authorization:'Basic encodeBase64(username:Password)'  header.", 
            "title": "http (Source)"
        }, 
        {
            "location": "/api/1.0.17/", 
            "text": "API Docs - v1.0.17\n\n\nSink\n\n\nhttp \n(Sink)\n\n\nThis extension publish the HTTP events in any HTTP method  POST, GET, PUT, DELETE  via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically.\n\n\n\nSyntax\n\n\n@sink(type=\nhttp\n, publisher.url=\nSTRING\n, basic.auth.username=\nSTRING\n, basic.auth.password=\nSTRING\n, https.truststore.file=\nSTRING\n, https.truststore.password=\nSTRING\n, headers=\nSTRING\n, method=\nSTRING\n, socket.idle.timeout=\nINT\n, chunk.disabled=\nBOOL\n, ssl.protocol=\nSTRING\n, parameters=\nSTRING\n, ciphers=\nSTRING\n, ssl.enabled.protocols=\nSTRING\n, client.enable.session.creation=\nSTRING\n, follow.redirect=\nBOOL\n, max.redirect.count=\nINT\n, tls.store.type=\nSTRING\n, proxy.host=\nSTRING\n, proxy.port=\nSTRING\n, proxy.username=\nSTRING\n, proxy.password=\nSTRING\n, client.bootstrap.configuration=\nSTRING\n, client.bootstrap.nodelay=\nBOOL\n, client.bootstrap.keepalive=\nBOOL\n, client.bootstrap.sendbuffersize=\nINT\n, client.bootstrap.recievebuffersize=\nINT\n, client.bootstrap.connect.timeout=\nINT\n, client.bootstrap.socket.reuse=\nBOOL\n, client.bootstrap.socket.timeout=\nSTRING\n, client.threadpool.configurations=\nSTRING\n, client.connection.pool.count=\nINT\n, client.max.active.connections.per.pool=\nINT\n, client.min.idle.connections.per.pool=\nINT\n, client.max.idle.connections.per.pool=\nINT\n, client.min.eviction.idle.time=\nSTRING\n, sender.thread.count=\nSTRING\n, event.group.executor.thread.size=\nSTRING\n, max.wait.for.client.connection.pool=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npublisher.url\n\n        \nThe URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use \nhttps\n instead of \nhttp\n in the publisher.url.e.g., \nhttp://localhost:8080/endpoint\n, \nhttps://localhost:8080/endpoint\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbasic.auth.username\n\n        \nThe username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI.\n\n        \n \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nbasic.auth.password\n\n        \nThe password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI.\n\n        \n \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nhttps.truststore.file\n\n        \nThe file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required.\n\n        \n${carbon.home}/resources/security/client-truststore.jks\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nhttps.truststore.password\n\n        \nThe password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password.\n\n        \nwso2carbon\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheaders\n\n        \nThe headers that should be included as a HTTP request headers. There can be any number of headers concatenated on following format. header1:value1#header2:value2. User can include content-type header if he need to any specific type for payload if not system get the mapping type as the content-Type header (ie. @map(xml):application/xml,@map(json):application/json,@map(text):plain/text ) and if user does not include any mapping type then system gets the 'plain/text' as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header.\n\n        \n \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmethod\n\n        \nFor HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header.\n\n        \nPOST\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsocket.idle.timeout\n\n        \nSocket timeout value in millisecond\n\n        \n6000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nchunk.disabled\n\n        \nport: Port number of the remote service\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.protocol\n\n        \nThe SSL protocol version\n\n        \nTLS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nparameters\n\n        \nParameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\"\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nciphers\n\n        \nList of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.enabled.protocols\n\n        \nSSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.enable.session.creation\n\n        \nEnable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfollow.redirect\n\n        \nRedirect related enabled.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.redirect.count\n\n        \nMaximum redirect count.\n\n        \n5\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.store.type\n\n        \nTLS store type to be used.\n\n        \nJKS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nproxy.host\n\n        \nProxy server host\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nproxy.port\n\n        \nProxy server port\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nproxy.username\n\n        \nProxy server username\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nproxy.password\n\n        \nProxy server password\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.configuration\n\n        \nClient bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\"\n\n        \nTODO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.nodelay\n\n        \nHttp client no delay.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.keepalive\n\n        \nHttp client keep alive.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.sendbuffersize\n\n        \nHttp client send buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.recievebuffersize\n\n        \nHttp client receive buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.connect.timeout\n\n        \nHttp client connection timeout.\n\n        \n15000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.socket.reuse\n\n        \nTo enable http socket reuse.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.socket.timeout\n\n        \nHttp client socket timeout.\n\n        \n15\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.threadpool.configurations\n\n        \nThread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\"\n\n        \nTODO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.connection.pool.count\n\n        \nConnection pool count.\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.max.active.connections.per.pool\n\n        \nActive connections per pool.\n\n        \n-1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.min.idle.connections.per.pool\n\n        \nMinimum ideal connection per pool.\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.max.idle.connections.per.pool\n\n        \nMaximum ideal connection per pool.\n\n        \n100\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.min.eviction.idle.time\n\n        \nMinimum eviction idle time.\n\n        \n5 * 60 * 1000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsender.thread.count\n\n        \nHttp sender thread count.\n\n        \n20\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nevent.group.executor.thread.size\n\n        \nEvent group executor thread size.\n\n        \n15\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.wait.for.client.connection.pool\n\n        \nMaximum wait for client connection pool.\n\n        \n60000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nclientBootstrapBossGroupSize\n\n        \nproperty to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads.\n\n        \n4\n\n        \nAny integer\n\n    \n\n    \n\n        \nclientBootstrapWorkerGroupSize\n\n        \nproperty to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode.\n\n        \n8\n\n        \nAny integer\n\n    \n\n    \n\n        \ntrustStoreLocation\n\n        \nThe default truststore file path.\n\n        \n${carbon.home}/resources/security/client-truststore.jks\n\n        \nPath to client-truststore.jks\n\n    \n\n    \n\n        \ntrustStorePassword\n\n        \nThe default truststore password.\n\n        \nwso2carbon\n\n        \nTruststore password\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers='{{headers}}',client.bootstrap.configuration=\n'client.bootstrap.socket.timeout:20','client.bootstrap.worker.group.size:10'\n,client.pool.configuration=\n'client.connection.pool.count:10','client.max.active.connections.per.pool:1'\n @map(type='xml' , @payload('{{payloadBody}}')))define stream FooStream (payloadBody String, method string, headers string);\n\n\n\n\n\nIf it is xml mapping expected input should be in following format for FooStream:{\nevents\n    \nevent\n        \nsymbol\nWSO2\n/symbol\n        \nprice\n55.6\n/price\n        \nvolume\n100\n/volume\n    \n/event\n/events\n,POST,Content-Length:24#Content-Location:USA#Retry-After:120}Above event will generate output as below.~Output http event payload\nevents\nevent\nsymbol\nWSO2\n/symbol\nprice\n55.6\n/price\nvolume\n100\n/volume\n/event\n/events\n~Output http event headersContent-Length:24,Content-Location:'USA',Retry-After:120,Content-Type:'application/xml',HTTP_METHOD:'POST',~Output http event propertiesHTTP_METHOD:'POST',HOST:'localhost',PORT:8009PROTOCOL:'http'TO:'/foo'\n\n\n\nSource\n\n\nhttp \n(Source)\n\n\nThe HTTP source receives POST requests via HTTP or HTTPS in format such as \ntext\n, \nXML\n and \nJSON\n. If required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service.\n\n\n\nSyntax\n\n\n@source(type=\nhttp\n, receiver.url=\nSTRING\n, basic.auth.enabled=\nSTRING\n, worker.count=\nSTRING\n, socket.idle.timeout=\nINT\n, ssl.verify.client=\nSTRING\n, ssl.protocol=\nSTRING\n, tls.store.type=\nSTRING\n, parameters=\nSTRING\n, ciphers=\nSTRING\n, ssl.enabled.protocols=\nSTRING\n, server.enable.session.creation=\nSTRING\n, server.supported.snimatchers=\nSTRING\n, server.suported.server.names=\nSTRING\n, request.size.validation.configuration=\nSTRING\n, request.size.validation=\nSTRING\n, request.size.validation.maximum.value=\nSTRING\n, request.size.validation.reject.status.code=\nSTRING\n, request.size.validation.reject.message=\nSTRING\n, request.size.validation.reject.message.content.type=\nSTRING\n, header.size.validation=\nSTRING\n, header.validation.maximum.request.line=\nSTRING\n, header.validation.maximum.size=\nSTRING\n, header.validation.maximum.chunk.size=\nSTRING\n, header.validation.reject.status.code=\nSTRING\n, header.validation.reject.message=\nSTRING\n, header.validation.reject.message.content.type=\nSTRING\n, server.bootstrap.configuration=\nOBJECT\n, server.bootstrap.nodelay=\nBOOL\n, server.bootstrap.keepalive=\nBOOL\n, server.bootstrap.sendbuffersize=\nINT\n, server.bootstrap.recievebuffersize=\nINT\n, server.bootstrap.connect.timeout=\nINT\n, server.bootstrap.socket.reuse=\nBOOL\n, server.bootstrap.socket.timeout=\nBOOL\n, server.bootstrap.socket.backlog=\nBOOL\n, trace.log.enabled=\nBOOL\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nreceiver.url\n\n        \nThe URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format \nhttp://0.0.0.0:9763/\nappNAme\n/\nstreamName\nIf the user want to use SSL the url should be given in following format \nhttps://localhost:8080/\nstreamName\n\n        \nhttp://0.0.0.0:9763/\n/\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nbasic.auth.enabled\n\n        \nIf this is set to \ntrue\n, basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' \n\n        \nfalse\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nworker.count\n\n        \nThe number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering.\n\n        \n1\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsocket.idle.timeout\n\n        \nIdle timeout for HTTP connection.\n\n        \n120000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.verify.client\n\n        \nThe type of client certificate verification.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.protocol\n\n        \nssl/tls related options\n\n        \nTLS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.store.type\n\n        \nTLS store type.\n\n        \nJKS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nparameters\n\n        \nParameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\"\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nciphers\n\n        \nList of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.enabled.protocols\n\n        \nSSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.enable.session.creation\n\n        \nEnable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.supported.snimatchers\n\n        \nHttp SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.suported.server.names\n\n        \nHttp supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.configuration\n\n        \nParameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\"\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation\n\n        \nTo enable the request size validation.\n\n        \nfalse\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.maximum.value\n\n        \nIf request size is validated then maximum size.\n\n        \nInteger.MAX_VALUE\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.reject.status.code\n\n        \nIf request is exceed maximum size and request.size.validation is enabled then status code to be send as response.\n\n        \n401\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.reject.message\n\n        \nIf request is exceed maximum size and request.size.validation is enabled then status message to be send as response.\n\n        \nMessage is bigger than the valid size\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.reject.message.content.type\n\n        \nIf request is exceed maximum size and request.size.validation is enabled then content type to be send as response.\n\n        \nplain/text\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.size.validation\n\n        \nTo enable the header size validation.\n\n        \nfalse\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.maximum.request.line\n\n        \nIf header header validation is enabled then the maximum request line.\n\n        \n4096\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.maximum.size\n\n        \nIf header header validation is enabled then the maximum expected header size.\n\n        \n8192\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.maximum.chunk.size\n\n        \nIf header header validation is enabled then the maximum expected chunk size.\n\n        \n8192\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.reject.status.code\n\n        \n401\n\n        \nIf header is exceed maximum size and header.size.validation is enabled then status code to be send as response.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.reject.message\n\n        \nIf header is exceed maximum size and header.size.validation is enabled then message to be send as response.\n\n        \nMessage header is bigger than the valid size\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.reject.message.content.type\n\n        \nIf header is exceed maximum size and header.size.validation is enabled then content type to be send as response.\n\n        \nplain/text\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.configuration\n\n        \nParameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\"\n\n        \nnull\n\n        \nOBJECT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.nodelay\n\n        \nHttp server no delay.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.keepalive\n\n        \nHttp server keep alive.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.sendbuffersize\n\n        \nHttp server send buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.recievebuffersize\n\n        \nHttp server receive buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.connect.timeout\n\n        \nHttp server connection timeout.\n\n        \n15000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.socket.reuse\n\n        \nTo enable http socket reuse.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.socket.timeout\n\n        \nHttp server socket timeout.\n\n        \n15\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.socket.backlog\n\n        \nTHttp server socket backlog.\n\n        \n100\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntrace.log.enabled\n\n        \nHttp traffic monitoring.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nserverBootstrapBossGroupSize\n\n        \nproperty to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads.\n\n        \n4\n\n        \nAny integer\n\n    \n\n    \n\n        \nserverBootstrapWorkerGroupSize\n\n        \nproperty to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode.\n\n        \n8\n\n        \nAny integer\n\n    \n\n    \n\n        \ndefaultHost\n\n        \nThe default host of the transport.\n\n        \n0.0.0.0\n\n        \nAny valid host\n\n    \n\n    \n\n        \ndefaultHttpPort\n\n        \nThe default port if the default scheme is 'http'.\n\n        \n8280\n\n        \nAny valid port\n\n    \n\n    \n\n        \ndefaultHttpsPort\n\n        \nThe default port if the default scheme is 'https'.\n\n        \n8243\n\n        \nAny valid port\n\n    \n\n    \n\n        \ndefaultScheme\n\n        \nThe default protocol.\n\n        \nhttp\n\n        \nhttp\nhttps\n\n    \n\n    \n\n        \nkeyStoreLocation\n\n        \nThe default keystore file path.\n\n        \n${carbon.home}/resources/security/wso2carbon.jks\n\n        \nPath to wso2carbon.jks file\n\n    \n\n    \n\n        \nkeyStorePassword\n\n        \nThe default keystore password.\n\n        \nwso2carbon\n\n        \nString of keystore password\n\n    \n\n    \n\n        \ncertPassword\n\n        \nThe default cert password.\n\n        \nwso2carbon\n\n        \nString of cert password\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters=\n'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2'\n,request.size.validation.configuration=\nrequest.size.validation:true\n,server.bootstrap.configuration=\nserver.bootstrap.socket.timeout:25\n @map(type='xml'))\ndefine stream FooStream (symbol string, price float, volume long);\n\n\n\n\n\nAbove source listenerConfiguration performs a default XML input mapping. The expected input is as follows:\nevents\nevent\nsymbol\nWSO2\n/symbol\nprice\n55.6\n/price\nvolume\n100\n/volume\n/event\n/events\nIf basic authentication is enabled via the \nbasic.auth.enabled='true\n setting, each input event is also expected to contain the \nAuthorization:'Basic encodeBase64(username:Password)'\n header.", 
            "title": "1.0.17"
        }, 
        {
            "location": "/api/1.0.17/#api-docs-v1017", 
            "text": "", 
            "title": "API Docs - v1.0.17"
        }, 
        {
            "location": "/api/1.0.17/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/1.0.17/#http-sink", 
            "text": "This extension publish the HTTP events in any HTTP method  POST, GET, PUT, DELETE  via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically.  Syntax  @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         publisher.url \n         The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use  https  instead of  http  in the publisher.url.e.g.,  http://localhost:8080/endpoint ,  https://localhost:8080/endpoint \n         \n         STRING \n         No \n         No \n     \n     \n         basic.auth.username \n         The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. \n           \n         STRING \n         Yes \n         No \n     \n     \n         basic.auth.password \n         The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. \n           \n         STRING \n         Yes \n         No \n     \n     \n         https.truststore.file \n         The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. \n         ${carbon.home}/resources/security/client-truststore.jks \n         STRING \n         Yes \n         No \n     \n     \n         https.truststore.password \n         The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. \n         wso2carbon \n         STRING \n         Yes \n         No \n     \n     \n         headers \n         The headers that should be included as a HTTP request headers. There can be any number of headers concatenated on following format. header1:value1#header2:value2. User can include content-type header if he need to any specific type for payload if not system get the mapping type as the content-Type header (ie. @map(xml):application/xml,@map(json):application/json,@map(text):plain/text ) and if user does not include any mapping type then system gets the 'plain/text' as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header. \n           \n         STRING \n         Yes \n         No \n     \n     \n         method \n         For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. \n         POST \n         STRING \n         Yes \n         No \n     \n     \n         socket.idle.timeout \n         Socket timeout value in millisecond \n         6000 \n         INT \n         Yes \n         No \n     \n     \n         chunk.disabled \n         port: Port number of the remote service \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         ssl.protocol \n         The SSL protocol version \n         TLS \n         STRING \n         Yes \n         No \n     \n     \n         parameters \n         Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ciphers \n         List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ssl.enabled.protocols \n         SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         client.enable.session.creation \n         Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         follow.redirect \n         Redirect related enabled. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         max.redirect.count \n         Maximum redirect count. \n         5 \n         INT \n         Yes \n         No \n     \n     \n         tls.store.type \n         TLS store type to be used. \n         JKS \n         STRING \n         Yes \n         No \n     \n     \n         proxy.host \n         Proxy server host \n         null \n         STRING \n         Yes \n         No \n     \n     \n         proxy.port \n         Proxy server port \n         null \n         STRING \n         Yes \n         No \n     \n     \n         proxy.username \n         Proxy server username \n         null \n         STRING \n         Yes \n         No \n     \n     \n         proxy.password \n         Proxy server password \n         null \n         STRING \n         Yes \n         No \n     \n     \n         client.bootstrap.configuration \n         Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" \n         TODO \n         STRING \n         Yes \n         No \n     \n     \n         client.bootstrap.nodelay \n         Http client no delay. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         client.bootstrap.keepalive \n         Http client keep alive. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         client.bootstrap.sendbuffersize \n         Http client send buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         client.bootstrap.recievebuffersize \n         Http client receive buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         client.bootstrap.connect.timeout \n         Http client connection timeout. \n         15000 \n         INT \n         Yes \n         No \n     \n     \n         client.bootstrap.socket.reuse \n         To enable http socket reuse. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         client.bootstrap.socket.timeout \n         Http client socket timeout. \n         15 \n         STRING \n         Yes \n         No \n     \n     \n         client.threadpool.configurations \n         Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" \n         TODO \n         STRING \n         Yes \n         No \n     \n     \n         client.connection.pool.count \n         Connection pool count. \n         0 \n         INT \n         Yes \n         No \n     \n     \n         client.max.active.connections.per.pool \n         Active connections per pool. \n         -1 \n         INT \n         Yes \n         No \n     \n     \n         client.min.idle.connections.per.pool \n         Minimum ideal connection per pool. \n         0 \n         INT \n         Yes \n         No \n     \n     \n         client.max.idle.connections.per.pool \n         Maximum ideal connection per pool. \n         100 \n         INT \n         Yes \n         No \n     \n     \n         client.min.eviction.idle.time \n         Minimum eviction idle time. \n         5 * 60 * 1000 \n         STRING \n         Yes \n         No \n     \n     \n         sender.thread.count \n         Http sender thread count. \n         20 \n         STRING \n         Yes \n         No \n     \n     \n         event.group.executor.thread.size \n         Event group executor thread size. \n         15 \n         STRING \n         Yes \n         No \n     \n     \n         max.wait.for.client.connection.pool \n         Maximum wait for client connection pool. \n         60000 \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         clientBootstrapBossGroupSize \n         property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. \n         4 \n         Any integer \n     \n     \n         clientBootstrapWorkerGroupSize \n         property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. \n         8 \n         Any integer \n     \n     \n         trustStoreLocation \n         The default truststore file path. \n         ${carbon.home}/resources/security/client-truststore.jks \n         Path to client-truststore.jks \n     \n     \n         trustStorePassword \n         The default truststore password. \n         wso2carbon \n         Truststore password \n       Examples  EXAMPLE 1  @sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers='{{headers}}',client.bootstrap.configuration= 'client.bootstrap.socket.timeout:20','client.bootstrap.worker.group.size:10' ,client.pool.configuration= 'client.connection.pool.count:10','client.max.active.connections.per.pool:1'  @map(type='xml' , @payload('{{payloadBody}}')))define stream FooStream (payloadBody String, method string, headers string);  If it is xml mapping expected input should be in following format for FooStream:{ events      event          symbol WSO2 /symbol          price 55.6 /price          volume 100 /volume      /event /events ,POST,Content-Length:24#Content-Location:USA#Retry-After:120}Above event will generate output as below.~Output http event payload events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ~Output http event headersContent-Length:24,Content-Location:'USA',Retry-After:120,Content-Type:'application/xml',HTTP_METHOD:'POST',~Output http event propertiesHTTP_METHOD:'POST',HOST:'localhost',PORT:8009PROTOCOL:'http'TO:'/foo'", 
            "title": "http (Sink)"
        }, 
        {
            "location": "/api/1.0.17/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.17/#http-source", 
            "text": "The HTTP source receives POST requests via HTTP or HTTPS in format such as  text ,  XML  and  JSON . If required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service.  Syntax  @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= STRING , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         receiver.url \n         The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format  http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format  https://localhost:8080/ streamName \n         http://0.0.0.0:9763/ / \n         STRING \n         Yes \n         No \n     \n     \n         basic.auth.enabled \n         If this is set to  true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false'  \n         false \n         STRING \n         Yes \n         No \n     \n     \n         worker.count \n         The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. \n         1 \n         STRING \n         Yes \n         No \n     \n     \n         socket.idle.timeout \n         Idle timeout for HTTP connection. \n         120000 \n         INT \n         Yes \n         No \n     \n     \n         ssl.verify.client \n         The type of client certificate verification. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ssl.protocol \n         ssl/tls related options \n         TLS \n         STRING \n         Yes \n         No \n     \n     \n         tls.store.type \n         TLS store type. \n         JKS \n         STRING \n         Yes \n         No \n     \n     \n         parameters \n         Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ciphers \n         List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ssl.enabled.protocols \n         SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         server.enable.session.creation \n         Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         server.supported.snimatchers \n         Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         server.suported.server.names \n         Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.configuration \n         Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" \n         null \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation \n         To enable the request size validation. \n         false \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.maximum.value \n         If request size is validated then maximum size. \n         Integer.MAX_VALUE \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.reject.status.code \n         If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. \n         401 \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.reject.message \n         If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. \n         Message is bigger than the valid size \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.reject.message.content.type \n         If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. \n         plain/text \n         STRING \n         Yes \n         No \n     \n     \n         header.size.validation \n         To enable the header size validation. \n         false \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.maximum.request.line \n         If header header validation is enabled then the maximum request line. \n         4096 \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.maximum.size \n         If header header validation is enabled then the maximum expected header size. \n         8192 \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.maximum.chunk.size \n         If header header validation is enabled then the maximum expected chunk size. \n         8192 \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.reject.status.code \n         401 \n         If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.reject.message \n         If header is exceed maximum size and header.size.validation is enabled then message to be send as response. \n         Message header is bigger than the valid size \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.reject.message.content.type \n         If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. \n         plain/text \n         STRING \n         Yes \n         No \n     \n     \n         server.bootstrap.configuration \n         Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" \n         null \n         OBJECT \n         Yes \n         No \n     \n     \n         server.bootstrap.nodelay \n         Http server no delay. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.keepalive \n         Http server keep alive. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.sendbuffersize \n         Http server send buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         server.bootstrap.recievebuffersize \n         Http server receive buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         server.bootstrap.connect.timeout \n         Http server connection timeout. \n         15000 \n         INT \n         Yes \n         No \n     \n     \n         server.bootstrap.socket.reuse \n         To enable http socket reuse. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.socket.timeout \n         Http server socket timeout. \n         15 \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.socket.backlog \n         THttp server socket backlog. \n         100 \n         BOOL \n         Yes \n         No \n     \n     \n         trace.log.enabled \n         Http traffic monitoring. \n         false \n         BOOL \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         serverBootstrapBossGroupSize \n         property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. \n         4 \n         Any integer \n     \n     \n         serverBootstrapWorkerGroupSize \n         property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. \n         8 \n         Any integer \n     \n     \n         defaultHost \n         The default host of the transport. \n         0.0.0.0 \n         Any valid host \n     \n     \n         defaultHttpPort \n         The default port if the default scheme is 'http'. \n         8280 \n         Any valid port \n     \n     \n         defaultHttpsPort \n         The default port if the default scheme is 'https'. \n         8243 \n         Any valid port \n     \n     \n         defaultScheme \n         The default protocol. \n         http \n         http https \n     \n     \n         keyStoreLocation \n         The default keystore file path. \n         ${carbon.home}/resources/security/wso2carbon.jks \n         Path to wso2carbon.jks file \n     \n     \n         keyStorePassword \n         The default keystore password. \n         wso2carbon \n         String of keystore password \n     \n     \n         certPassword \n         The default cert password. \n         wso2carbon \n         String of cert password \n       Examples  EXAMPLE 1  @source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' ,request.size.validation.configuration= request.size.validation:true ,server.bootstrap.configuration= server.bootstrap.socket.timeout:25  @map(type='xml'))\ndefine stream FooStream (symbol string, price float, volume long);  Above source listenerConfiguration performs a default XML input mapping. The expected input is as follows: events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events If basic authentication is enabled via the  basic.auth.enabled='true  setting, each input event is also expected to contain the  Authorization:'Basic encodeBase64(username:Password)'  header.", 
            "title": "http (Source)"
        }, 
        {
            "location": "/api/1.0.16/", 
            "text": "API Docs - v1.0.16\n\n\nSink\n\n\nhttp \n(Sink)\n\n\nThis extension publish the HTTP events in any HTTP method  POST, GET, PUT, DELETE  via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically.\n\n\n\nSyntax\n\n\n@sink(type=\nhttp\n, publisher.url=\nSTRING\n, basic.auth.username=\nSTRING\n, basic.auth.password=\nSTRING\n, https.truststore.file=\nSTRING\n, https.truststore.password=\nSTRING\n, headers=\nSTRING\n, method=\nSTRING\n, socket.idle.timeout=\nINT\n, chunk.disabled=\nBOOL\n, ssl.protocol=\nSTRING\n, parameters=\nSTRING\n, ciphers=\nSTRING\n, ssl.enabled.protocols=\nSTRING\n, client.enable.session.creation=\nSTRING\n, follow.redirect=\nBOOL\n, max.redirect.count=\nINT\n, tls.store.type=\nSTRING\n, proxy.host=\nSTRING\n, proxy.port=\nSTRING\n, proxy.username=\nSTRING\n, proxy.password=\nSTRING\n, client.bootstrap.configuration=\nSTRING\n, client.bootstrap.nodelay=\nBOOL\n, client.bootstrap.keepalive=\nBOOL\n, client.bootstrap.sendbuffersize=\nINT\n, client.bootstrap.recievebuffersize=\nINT\n, client.bootstrap.connect.timeout=\nINT\n, client.bootstrap.socket.reuse=\nBOOL\n, client.bootstrap.socket.timeout=\nSTRING\n, client.threadpool.configurations=\nSTRING\n, client.connection.pool.count=\nINT\n, client.max.active.connections.per.pool=\nINT\n, client.min.idle.connections.per.pool=\nINT\n, client.max.idle.connections.per.pool=\nINT\n, client.min.eviction.idle.time=\nSTRING\n, sender.thread.count=\nSTRING\n, event.group.executor.thread.size=\nSTRING\n, max.wait.for.client.connection.pool=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npublisher.url\n\n        \nThe URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use \nhttps\n instead of \nhttp\n in the publisher.url.e.g., \nhttp://localhost:8080/endpoint\n, \nhttps://localhost:8080/endpoint\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbasic.auth.username\n\n        \nThe username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI.\n\n        \n \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nbasic.auth.password\n\n        \nThe password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI.\n\n        \n \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nhttps.truststore.file\n\n        \nThe file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required.\n\n        \n${carbon.home}/resources/security/client-truststore.jks\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nhttps.truststore.password\n\n        \nThe password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password.\n\n        \nwso2carbon\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheaders\n\n        \nThe headers that should be included as a HTTP request headers. There can be any number of headers concatenated on following format. header1:value1#header2:value2. User can include content-type header if he need to any specific type for payload if not system get the mapping type as the content-Type header (ie. @map(xml):application/xml,@map(json):application/json,@map(text):plain/text ) and if user does not include any mapping type then system gets the 'plain/text' as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header.\n\n        \n \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmethod\n\n        \nFor HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header.\n\n        \nPOST\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsocket.idle.timeout\n\n        \nSocket timeout value in millisecond\n\n        \n6000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nchunk.disabled\n\n        \nport: Port number of the remote service\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.protocol\n\n        \nThe SSL protocol version\n\n        \nTLS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nparameters\n\n        \nParameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\"\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nciphers\n\n        \nList of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.enabled.protocols\n\n        \nSSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.enable.session.creation\n\n        \nEnable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfollow.redirect\n\n        \nRedirect related enabled.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.redirect.count\n\n        \nMaximum redirect count.\n\n        \n5\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.store.type\n\n        \nTLS store type to be used.\n\n        \nJKS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nproxy.host\n\n        \nProxy server host\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nproxy.port\n\n        \nProxy server port\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nproxy.username\n\n        \nProxy server username\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nproxy.password\n\n        \nProxy server password\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.configuration\n\n        \nClient bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\"\n\n        \nTODO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.nodelay\n\n        \nHttp client no delay.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.keepalive\n\n        \nHttp client keep alive.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.sendbuffersize\n\n        \nHttp client send buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.recievebuffersize\n\n        \nHttp client receive buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.connect.timeout\n\n        \nHttp client connection timeout.\n\n        \n15000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.socket.reuse\n\n        \nTo enable http socket reuse.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.socket.timeout\n\n        \nHttp client socket timeout.\n\n        \n15\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.threadpool.configurations\n\n        \nThread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\"\n\n        \nTODO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.connection.pool.count\n\n        \nConnection pool count.\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.max.active.connections.per.pool\n\n        \nActive connections per pool.\n\n        \n-1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.min.idle.connections.per.pool\n\n        \nMinimum ideal connection per pool.\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.max.idle.connections.per.pool\n\n        \nMaximum ideal connection per pool.\n\n        \n100\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.min.eviction.idle.time\n\n        \nMinimum eviction idle time.\n\n        \n5 * 60 * 1000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsender.thread.count\n\n        \nHttp sender thread count.\n\n        \n20\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nevent.group.executor.thread.size\n\n        \nEvent group executor thread size.\n\n        \n15\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.wait.for.client.connection.pool\n\n        \nMaximum wait for client connection pool.\n\n        \n60000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nclientBootstrapBossGroupSize\n\n        \nproperty to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads.\n\n        \n4\n\n        \nAny integer\n\n    \n\n    \n\n        \nclientBootstrapWorkerGroupSize\n\n        \nproperty to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode.\n\n        \n8\n\n        \nAny integer\n\n    \n\n    \n\n        \ntrustStoreLocation\n\n        \nThe default truststore file path.\n\n        \n${carbon.home}/resources/security/client-truststore.jks\n\n        \nPath to client-truststore.jks\n\n    \n\n    \n\n        \ntrustStorePassword\n\n        \nThe default truststore password.\n\n        \nwso2carbon\n\n        \nTruststore password\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers='{{headers}}',client.bootstrap.configuration=\n'client.bootstrap.socket.timeout:20','client.bootstrap.worker.group.size:10'\n,client.pool.configuration=\n'client.connection.pool.count:10','client.max.active.connections.per.pool:1'\n @map(type='xml' , @payload('{{payloadBody}}')))define stream FooStream (payloadBody String, method string, headers string);\n\n\n\n\n\nIf it is xml mapping expected input should be in following format for FooStream:{\nevents\n    \nevent\n        \nsymbol\nWSO2\n/symbol\n        \nprice\n55.6\n/price\n        \nvolume\n100\n/volume\n    \n/event\n/events\n,POST,Content-Length:24#Content-Location:USA#Retry-After:120}Above event will generate output as below.~Output http event payload\nevents\nevent\nsymbol\nWSO2\n/symbol\nprice\n55.6\n/price\nvolume\n100\n/volume\n/event\n/events\n~Output http event headersContent-Length:24,Content-Location:'USA',Retry-After:120,Content-Type:'application/xml',HTTP_METHOD:'POST',~Output http event propertiesHTTP_METHOD:'POST',HOST:'localhost',PORT:8009PROTOCOL:'http'TO:'/foo'\n\n\n\nSource\n\n\nhttp \n(Source)\n\n\nThe HTTP source receives POST requests via HTTP or HTTPS in format such as \ntext\n, \nXML\n and \nJSON\n. If required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service.\n\n\n\nSyntax\n\n\n@source(type=\nhttp\n, receiver.url=\nSTRING\n, basic.auth.enabled=\nSTRING\n, worker.count=\nSTRING\n, socket.idle.timeout=\nINT\n, ssl.verify.client=\nSTRING\n, ssl.protocol=\nSTRING\n, tls.store.type=\nSTRING\n, parameters=\nSTRING\n, ciphers=\nSTRING\n, ssl.enabled.protocols=\nSTRING\n, server.enable.session.creation=\nSTRING\n, server.supported.snimatchers=\nSTRING\n, server.suported.server.names=\nSTRING\n, request.size.validation.configuration=\nSTRING\n, request.size.validation=\nSTRING\n, request.size.validation.maximum.value=\nSTRING\n, request.size.validation.reject.status.code=\nSTRING\n, request.size.validation.reject.message=\nSTRING\n, request.size.validation.reject.message.content.type=\nSTRING\n, header.size.validation=\nSTRING\n, header.validation.maximum.request.line=\nSTRING\n, header.validation.maximum.size=\nSTRING\n, header.validation.maximum.chunk.size=\nSTRING\n, header.validation.reject.status.code=\nSTRING\n, header.validation.reject.message=\nSTRING\n, header.validation.reject.message.content.type=\nSTRING\n, server.bootstrap.configuration=\nOBJECT\n, server.bootstrap.nodelay=\nBOOL\n, server.bootstrap.keepalive=\nBOOL\n, server.bootstrap.sendbuffersize=\nINT\n, server.bootstrap.recievebuffersize=\nINT\n, server.bootstrap.connect.timeout=\nINT\n, server.bootstrap.socket.reuse=\nBOOL\n, server.bootstrap.socket.timeout=\nBOOL\n, server.bootstrap.socket.backlog=\nBOOL\n, trace.log.enabled=\nBOOL\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nreceiver.url\n\n        \nThe URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format \nhttp://0.0.0.0:9763/\nappNAme\n/\nstreamName\nIf the user want to use SSL the url should be given in following format \nhttps://localhost:8080/\nstreamName\n\n        \nhttp://0.0.0.0:9763/\n/\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nbasic.auth.enabled\n\n        \nIf this is set to \ntrue\n, basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' \n\n        \nfalse\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nworker.count\n\n        \nThe number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering.\n\n        \n1\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsocket.idle.timeout\n\n        \nIdle timeout for HTTP connection.\n\n        \n120000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.verify.client\n\n        \nThe type of client certificate verification.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.protocol\n\n        \nssl/tls related options\n\n        \nTLS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.store.type\n\n        \nTLS store type.\n\n        \nJKS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nparameters\n\n        \nParameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\"\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nciphers\n\n        \nList of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.enabled.protocols\n\n        \nSSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.enable.session.creation\n\n        \nEnable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.supported.snimatchers\n\n        \nHttp SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.suported.server.names\n\n        \nHttp supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.configuration\n\n        \nParameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\"\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation\n\n        \nTo enable the request size validation.\n\n        \nfalse\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.maximum.value\n\n        \nIf request size is validated then maximum size.\n\n        \nInteger.MAX_VALUE\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.reject.status.code\n\n        \nIf request is exceed maximum size and request.size.validation is enabled then status code to be send as response.\n\n        \n401\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.reject.message\n\n        \nIf request is exceed maximum size and request.size.validation is enabled then status message to be send as response.\n\n        \nMessage is bigger than the valid size\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.reject.message.content.type\n\n        \nIf request is exceed maximum size and request.size.validation is enabled then content type to be send as response.\n\n        \nplain/text\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.size.validation\n\n        \nTo enable the header size validation.\n\n        \nfalse\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.maximum.request.line\n\n        \nIf header header validation is enabled then the maximum request line.\n\n        \n4096\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.maximum.size\n\n        \nIf header header validation is enabled then the maximum expected header size.\n\n        \n8192\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.maximum.chunk.size\n\n        \nIf header header validation is enabled then the maximum expected chunk size.\n\n        \n8192\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.reject.status.code\n\n        \n401\n\n        \nIf header is exceed maximum size and header.size.validation is enabled then status code to be send as response.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.reject.message\n\n        \nIf header is exceed maximum size and header.size.validation is enabled then message to be send as response.\n\n        \nMessage header is bigger than the valid size\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.reject.message.content.type\n\n        \nIf header is exceed maximum size and header.size.validation is enabled then content type to be send as response.\n\n        \nplain/text\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.configuration\n\n        \nParameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\"\n\n        \nnull\n\n        \nOBJECT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.nodelay\n\n        \nHttp server no delay.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.keepalive\n\n        \nHttp server keep alive.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.sendbuffersize\n\n        \nHttp server send buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.recievebuffersize\n\n        \nHttp server receive buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.connect.timeout\n\n        \nHttp server connection timeout.\n\n        \n15000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.socket.reuse\n\n        \nTo enable http socket reuse.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.socket.timeout\n\n        \nHttp server socket timeout.\n\n        \n15\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.socket.backlog\n\n        \nTHttp server socket backlog.\n\n        \n100\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntrace.log.enabled\n\n        \nHttp traffic monitoring.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nserverBootstrapBossGroupSize\n\n        \nproperty to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads.\n\n        \n4\n\n        \nAny integer\n\n    \n\n    \n\n        \nserverBootstrapWorkerGroupSize\n\n        \nproperty to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode.\n\n        \n8\n\n        \nAny integer\n\n    \n\n    \n\n        \ndefaultHost\n\n        \nThe default host of the transport.\n\n        \n0.0.0.0\n\n        \nAny valid host\n\n    \n\n    \n\n        \ndefaultHttpPort\n\n        \nThe default port if the default scheme is 'http'.\n\n        \n8280\n\n        \nAny valid port\n\n    \n\n    \n\n        \ndefaultHttpsPort\n\n        \nThe default port if the default scheme is 'https'.\n\n        \n8243\n\n        \nAny valid port\n\n    \n\n    \n\n        \ndefaultScheme\n\n        \nThe default protocol.\n\n        \nhttp\n\n        \nhttp\nhttps\n\n    \n\n    \n\n        \nkeyStoreLocation\n\n        \nThe default keystore file path.\n\n        \n${carbon.home}/resources/security/wso2carbon.jks\n\n        \nPath to wso2carbon.jks file\n\n    \n\n    \n\n        \nkeyStorePassword\n\n        \nThe default keystore password.\n\n        \nwso2carbon\n\n        \nString of keystore password\n\n    \n\n    \n\n        \ncertPassword\n\n        \nThe default cert password.\n\n        \nwso2carbon\n\n        \nString of cert password\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters=\n'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2'\n,request.size.validation.configuration=\nrequest.size.validation:true\n,server.bootstrap.configuration=\nserver.bootstrap.socket.timeout:25\n @map(type='xml'))\ndefine stream FooStream (symbol string, price float, volume long);\n\n\n\n\n\nAbove source listenerConfiguration performs a default XML input mapping. The expected input is as follows:\nevents\nevent\nsymbol\nWSO2\n/symbol\nprice\n55.6\n/price\nvolume\n100\n/volume\n/event\n/events\nIf basic authentication is enabled via the \nbasic.auth.enabled='true\n setting, each input event is also expected to contain the \nAuthorization:'Basic encodeBase64(username:Password)'\n header.", 
            "title": "1.0.16"
        }, 
        {
            "location": "/api/1.0.16/#api-docs-v1016", 
            "text": "", 
            "title": "API Docs - v1.0.16"
        }, 
        {
            "location": "/api/1.0.16/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/1.0.16/#http-sink", 
            "text": "This extension publish the HTTP events in any HTTP method  POST, GET, PUT, DELETE  via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically.  Syntax  @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         publisher.url \n         The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use  https  instead of  http  in the publisher.url.e.g.,  http://localhost:8080/endpoint ,  https://localhost:8080/endpoint \n         \n         STRING \n         No \n         No \n     \n     \n         basic.auth.username \n         The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. \n           \n         STRING \n         Yes \n         No \n     \n     \n         basic.auth.password \n         The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. \n           \n         STRING \n         Yes \n         No \n     \n     \n         https.truststore.file \n         The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. \n         ${carbon.home}/resources/security/client-truststore.jks \n         STRING \n         Yes \n         No \n     \n     \n         https.truststore.password \n         The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. \n         wso2carbon \n         STRING \n         Yes \n         No \n     \n     \n         headers \n         The headers that should be included as a HTTP request headers. There can be any number of headers concatenated on following format. header1:value1#header2:value2. User can include content-type header if he need to any specific type for payload if not system get the mapping type as the content-Type header (ie. @map(xml):application/xml,@map(json):application/json,@map(text):plain/text ) and if user does not include any mapping type then system gets the 'plain/text' as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header. \n           \n         STRING \n         Yes \n         No \n     \n     \n         method \n         For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. \n         POST \n         STRING \n         Yes \n         No \n     \n     \n         socket.idle.timeout \n         Socket timeout value in millisecond \n         6000 \n         INT \n         Yes \n         No \n     \n     \n         chunk.disabled \n         port: Port number of the remote service \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         ssl.protocol \n         The SSL protocol version \n         TLS \n         STRING \n         Yes \n         No \n     \n     \n         parameters \n         Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ciphers \n         List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ssl.enabled.protocols \n         SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         client.enable.session.creation \n         Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         follow.redirect \n         Redirect related enabled. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         max.redirect.count \n         Maximum redirect count. \n         5 \n         INT \n         Yes \n         No \n     \n     \n         tls.store.type \n         TLS store type to be used. \n         JKS \n         STRING \n         Yes \n         No \n     \n     \n         proxy.host \n         Proxy server host \n         null \n         STRING \n         Yes \n         No \n     \n     \n         proxy.port \n         Proxy server port \n         null \n         STRING \n         Yes \n         No \n     \n     \n         proxy.username \n         Proxy server username \n         null \n         STRING \n         Yes \n         No \n     \n     \n         proxy.password \n         Proxy server password \n         null \n         STRING \n         Yes \n         No \n     \n     \n         client.bootstrap.configuration \n         Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" \n         TODO \n         STRING \n         Yes \n         No \n     \n     \n         client.bootstrap.nodelay \n         Http client no delay. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         client.bootstrap.keepalive \n         Http client keep alive. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         client.bootstrap.sendbuffersize \n         Http client send buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         client.bootstrap.recievebuffersize \n         Http client receive buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         client.bootstrap.connect.timeout \n         Http client connection timeout. \n         15000 \n         INT \n         Yes \n         No \n     \n     \n         client.bootstrap.socket.reuse \n         To enable http socket reuse. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         client.bootstrap.socket.timeout \n         Http client socket timeout. \n         15 \n         STRING \n         Yes \n         No \n     \n     \n         client.threadpool.configurations \n         Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" \n         TODO \n         STRING \n         Yes \n         No \n     \n     \n         client.connection.pool.count \n         Connection pool count. \n         0 \n         INT \n         Yes \n         No \n     \n     \n         client.max.active.connections.per.pool \n         Active connections per pool. \n         -1 \n         INT \n         Yes \n         No \n     \n     \n         client.min.idle.connections.per.pool \n         Minimum ideal connection per pool. \n         0 \n         INT \n         Yes \n         No \n     \n     \n         client.max.idle.connections.per.pool \n         Maximum ideal connection per pool. \n         100 \n         INT \n         Yes \n         No \n     \n     \n         client.min.eviction.idle.time \n         Minimum eviction idle time. \n         5 * 60 * 1000 \n         STRING \n         Yes \n         No \n     \n     \n         sender.thread.count \n         Http sender thread count. \n         20 \n         STRING \n         Yes \n         No \n     \n     \n         event.group.executor.thread.size \n         Event group executor thread size. \n         15 \n         STRING \n         Yes \n         No \n     \n     \n         max.wait.for.client.connection.pool \n         Maximum wait for client connection pool. \n         60000 \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         clientBootstrapBossGroupSize \n         property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. \n         4 \n         Any integer \n     \n     \n         clientBootstrapWorkerGroupSize \n         property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. \n         8 \n         Any integer \n     \n     \n         trustStoreLocation \n         The default truststore file path. \n         ${carbon.home}/resources/security/client-truststore.jks \n         Path to client-truststore.jks \n     \n     \n         trustStorePassword \n         The default truststore password. \n         wso2carbon \n         Truststore password \n       Examples  EXAMPLE 1  @sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers='{{headers}}',client.bootstrap.configuration= 'client.bootstrap.socket.timeout:20','client.bootstrap.worker.group.size:10' ,client.pool.configuration= 'client.connection.pool.count:10','client.max.active.connections.per.pool:1'  @map(type='xml' , @payload('{{payloadBody}}')))define stream FooStream (payloadBody String, method string, headers string);  If it is xml mapping expected input should be in following format for FooStream:{ events      event          symbol WSO2 /symbol          price 55.6 /price          volume 100 /volume      /event /events ,POST,Content-Length:24#Content-Location:USA#Retry-After:120}Above event will generate output as below.~Output http event payload events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ~Output http event headersContent-Length:24,Content-Location:'USA',Retry-After:120,Content-Type:'application/xml',HTTP_METHOD:'POST',~Output http event propertiesHTTP_METHOD:'POST',HOST:'localhost',PORT:8009PROTOCOL:'http'TO:'/foo'", 
            "title": "http (Sink)"
        }, 
        {
            "location": "/api/1.0.16/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.16/#http-source", 
            "text": "The HTTP source receives POST requests via HTTP or HTTPS in format such as  text ,  XML  and  JSON . If required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service.  Syntax  @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= STRING , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         receiver.url \n         The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format  http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format  https://localhost:8080/ streamName \n         http://0.0.0.0:9763/ / \n         STRING \n         Yes \n         No \n     \n     \n         basic.auth.enabled \n         If this is set to  true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false'  \n         false \n         STRING \n         Yes \n         No \n     \n     \n         worker.count \n         The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. \n         1 \n         STRING \n         Yes \n         No \n     \n     \n         socket.idle.timeout \n         Idle timeout for HTTP connection. \n         120000 \n         INT \n         Yes \n         No \n     \n     \n         ssl.verify.client \n         The type of client certificate verification. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ssl.protocol \n         ssl/tls related options \n         TLS \n         STRING \n         Yes \n         No \n     \n     \n         tls.store.type \n         TLS store type. \n         JKS \n         STRING \n         Yes \n         No \n     \n     \n         parameters \n         Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ciphers \n         List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ssl.enabled.protocols \n         SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         server.enable.session.creation \n         Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         server.supported.snimatchers \n         Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         server.suported.server.names \n         Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.configuration \n         Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" \n         null \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation \n         To enable the request size validation. \n         false \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.maximum.value \n         If request size is validated then maximum size. \n         Integer.MAX_VALUE \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.reject.status.code \n         If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. \n         401 \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.reject.message \n         If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. \n         Message is bigger than the valid size \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.reject.message.content.type \n         If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. \n         plain/text \n         STRING \n         Yes \n         No \n     \n     \n         header.size.validation \n         To enable the header size validation. \n         false \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.maximum.request.line \n         If header header validation is enabled then the maximum request line. \n         4096 \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.maximum.size \n         If header header validation is enabled then the maximum expected header size. \n         8192 \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.maximum.chunk.size \n         If header header validation is enabled then the maximum expected chunk size. \n         8192 \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.reject.status.code \n         401 \n         If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.reject.message \n         If header is exceed maximum size and header.size.validation is enabled then message to be send as response. \n         Message header is bigger than the valid size \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.reject.message.content.type \n         If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. \n         plain/text \n         STRING \n         Yes \n         No \n     \n     \n         server.bootstrap.configuration \n         Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" \n         null \n         OBJECT \n         Yes \n         No \n     \n     \n         server.bootstrap.nodelay \n         Http server no delay. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.keepalive \n         Http server keep alive. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.sendbuffersize \n         Http server send buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         server.bootstrap.recievebuffersize \n         Http server receive buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         server.bootstrap.connect.timeout \n         Http server connection timeout. \n         15000 \n         INT \n         Yes \n         No \n     \n     \n         server.bootstrap.socket.reuse \n         To enable http socket reuse. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.socket.timeout \n         Http server socket timeout. \n         15 \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.socket.backlog \n         THttp server socket backlog. \n         100 \n         BOOL \n         Yes \n         No \n     \n     \n         trace.log.enabled \n         Http traffic monitoring. \n         false \n         BOOL \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         serverBootstrapBossGroupSize \n         property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. \n         4 \n         Any integer \n     \n     \n         serverBootstrapWorkerGroupSize \n         property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. \n         8 \n         Any integer \n     \n     \n         defaultHost \n         The default host of the transport. \n         0.0.0.0 \n         Any valid host \n     \n     \n         defaultHttpPort \n         The default port if the default scheme is 'http'. \n         8280 \n         Any valid port \n     \n     \n         defaultHttpsPort \n         The default port if the default scheme is 'https'. \n         8243 \n         Any valid port \n     \n     \n         defaultScheme \n         The default protocol. \n         http \n         http https \n     \n     \n         keyStoreLocation \n         The default keystore file path. \n         ${carbon.home}/resources/security/wso2carbon.jks \n         Path to wso2carbon.jks file \n     \n     \n         keyStorePassword \n         The default keystore password. \n         wso2carbon \n         String of keystore password \n     \n     \n         certPassword \n         The default cert password. \n         wso2carbon \n         String of cert password \n       Examples  EXAMPLE 1  @source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' ,request.size.validation.configuration= request.size.validation:true ,server.bootstrap.configuration= server.bootstrap.socket.timeout:25  @map(type='xml'))\ndefine stream FooStream (symbol string, price float, volume long);  Above source listenerConfiguration performs a default XML input mapping. The expected input is as follows: events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events If basic authentication is enabled via the  basic.auth.enabled='true  setting, each input event is also expected to contain the  Authorization:'Basic encodeBase64(username:Password)'  header.", 
            "title": "http (Source)"
        }, 
        {
            "location": "/api/1.0.15/", 
            "text": "API Docs - v1.0.15\n\n\nSink\n\n\nhttp \n(Sink)\n\n\nThis extension publish the HTTP events in any HTTP method  POST, GET, PUT, DELETE  via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically.\n\n\n\nSyntax\n\n\n@sink(type=\nhttp\n, publisher.url=\nSTRING\n, basic.auth.username=\nSTRING\n, basic.auth.password=\nSTRING\n, https.truststore.file=\nSTRING\n, https.truststore.password=\nSTRING\n, headers=\nSTRING\n, method=\nSTRING\n, socket.idle.timeout=\nINT\n, chunk.disabled=\nBOOL\n, ssl.protocol=\nSTRING\n, parameters=\nSTRING\n, ciphers=\nSTRING\n, ssl.enabled.protocols=\nSTRING\n, client.enable.session.creation=\nSTRING\n, follow.redirect=\nBOOL\n, max.redirect.count=\nINT\n, tls.store.type=\nSTRING\n, proxy.host=\nSTRING\n, proxy.port=\nSTRING\n, proxy.username=\nSTRING\n, proxy.password=\nSTRING\n, client.bootstrap.configuration=\nSTRING\n, client.bootstrap.nodelay=\nBOOL\n, client.bootstrap.keepalive=\nBOOL\n, client.bootstrap.sendbuffersize=\nINT\n, client.bootstrap.recievebuffersize=\nINT\n, client.bootstrap.connect.timeout=\nINT\n, client.bootstrap.socket.reuse=\nBOOL\n, client.bootstrap.socket.timeout=\nSTRING\n, client.threadpool.configurations=\nSTRING\n, client.connection.pool.count=\nINT\n, client.max.active.connections.per.pool=\nINT\n, client.min.idle.connections.per.pool=\nINT\n, client.max.idle.connections.per.pool=\nINT\n, client.min.eviction.idle.time=\nSTRING\n, sender.thread.count=\nSTRING\n, event.group.executor.thread.size=\nSTRING\n, max.wait.for.client.connection.pool=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npublisher.url\n\n        \nThe URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use \nhttps\n instead of \nhttp\n in the publisher.url.e.g., \nhttp://localhost:8080/endpoint\n, \nhttps://localhost:8080/endpoint\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbasic.auth.username\n\n        \nThe username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI.\n\n        \n \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nbasic.auth.password\n\n        \nThe password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI.\n\n        \n \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nhttps.truststore.file\n\n        \nThe file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required.\n\n        \n${carbon.home}/resources/security/client-truststore.jks\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nhttps.truststore.password\n\n        \nThe password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password.\n\n        \nwso2carbon\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheaders\n\n        \nThe headers that should be included as a HTTP request headers. There can be any number of headers concatenated on following format. header1:value1#header2:value2. User can include content-type header if he need to any specific type for payload if not system get the mapping type as the content-Type header (ie. @map(xml):application/xml,@map(json):application/json,@map(text):plain/text ) and if user does not include any mapping type then system gets the 'plain/text' as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header.\n\n        \n \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmethod\n\n        \nFor HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header.\n\n        \nPOST\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsocket.idle.timeout\n\n        \nSocket timeout value in millisecond\n\n        \n6000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nchunk.disabled\n\n        \nport: Port number of the remote service\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.protocol\n\n        \nThe SSL protocol version\n\n        \nTLS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nparameters\n\n        \nParameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\"\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nciphers\n\n        \nList of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.enabled.protocols\n\n        \nSSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.enable.session.creation\n\n        \nEnable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfollow.redirect\n\n        \nRedirect related enabled.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.redirect.count\n\n        \nMaximum redirect count.\n\n        \n5\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.store.type\n\n        \nTLS store type to be used.\n\n        \nJKS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nproxy.host\n\n        \nProxy server host\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nproxy.port\n\n        \nProxy server port\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nproxy.username\n\n        \nProxy server username\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nproxy.password\n\n        \nProxy server password\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.configuration\n\n        \nClient bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\"\n\n        \nTODO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.nodelay\n\n        \nHttp client no delay.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.keepalive\n\n        \nHttp client keep alive.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.sendbuffersize\n\n        \nHttp client send buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.recievebuffersize\n\n        \nHttp client receive buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.connect.timeout\n\n        \nHttp client connection timeout.\n\n        \n15000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.socket.reuse\n\n        \nTo enable http socket reuse.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.socket.timeout\n\n        \nHttp client socket timeout.\n\n        \n15\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.threadpool.configurations\n\n        \nThread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\"\n\n        \nTODO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.connection.pool.count\n\n        \nConnection pool count.\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.max.active.connections.per.pool\n\n        \nActive connections per pool.\n\n        \n-1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.min.idle.connections.per.pool\n\n        \nMinimum ideal connection per pool.\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.max.idle.connections.per.pool\n\n        \nMaximum ideal connection per pool.\n\n        \n100\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.min.eviction.idle.time\n\n        \nMinimum eviction idle time.\n\n        \n5 * 60 * 1000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsender.thread.count\n\n        \nHttp sender thread count.\n\n        \n20\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nevent.group.executor.thread.size\n\n        \nEvent group executor thread size.\n\n        \n15\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.wait.for.client.connection.pool\n\n        \nMaximum wait for client connection pool.\n\n        \n60000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nclientBootstrapBossGroupSize\n\n        \nproperty to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads.\n\n        \n4\n\n        \nAny integer\n\n    \n\n    \n\n        \nclientBootstrapWorkerGroupSize\n\n        \nproperty to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode.\n\n        \n8\n\n        \nAny integer\n\n    \n\n    \n\n        \ntrustStoreLocation\n\n        \nThe default truststore file path.\n\n        \n${carbon.home}/resources/security/client-truststore.jks\n\n        \nPath to client-truststore.jks\n\n    \n\n    \n\n        \ntrustStorePassword\n\n        \nThe default truststore password.\n\n        \nwso2carbon\n\n        \nTruststore password\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers='{{headers}}',client.bootstrap.configuration=\n'client.bootstrap.socket.timeout:20','client.bootstrap.worker.group.size:10'\n,client.pool.configuration=\n'client.connection.pool.count:10','client.max.active.connections.per.pool:1'\n @map(type='xml' , @payload('{{payloadBody}}')))define stream FooStream (payloadBody String, method string, headers string);\n\n\n\n\n\nIf it is xml mapping expected input should be in following format for FooStream:{\nevents\n    \nevent\n        \nsymbol\nWSO2\n/symbol\n        \nprice\n55.6\n/price\n        \nvolume\n100\n/volume\n    \n/event\n/events\n,POST,Content-Length:24#Content-Location:USA#Retry-After:120}Above event will generate output as below.~Output http event payload\nevents\nevent\nsymbol\nWSO2\n/symbol\nprice\n55.6\n/price\nvolume\n100\n/volume\n/event\n/events\n~Output http event headersContent-Length:24,Content-Location:'USA',Retry-After:120,Content-Type:'application/xml',HTTP_METHOD:'POST',~Output http event propertiesHTTP_METHOD:'POST',HOST:'localhost',PORT:8009PROTOCOL:'http'TO:'/foo'\n\n\n\nSource\n\n\nhttp \n(Source)\n\n\nThe HTTP source receives POST requests via HTTP or HTTPS in format such as \ntext\n, \nXML\n and \nJSON\n. If required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service.\n\n\n\nSyntax\n\n\n@source(type=\nhttp\n, receiver.url=\nSTRING\n, basic.auth.enabled=\nSTRING\n, worker.count=\nSTRING\n, socket.idle.timeout=\nINT\n, ssl.verify.client=\nSTRING\n, ssl.protocol=\nSTRING\n, tls.store.type=\nSTRING\n, parameters=\nSTRING\n, ciphers=\nSTRING\n, ssl.enabled.protocols=\nSTRING\n, server.enable.session.creation=\nSTRING\n, server.supported.snimatchers=\nSTRING\n, server.suported.server.names=\nSTRING\n, request.size.validation.configuration=\nSTRING\n, request.size.validation=\nSTRING\n, request.size.validation.maximum.value=\nSTRING\n, request.size.validation.reject.status.code=\nSTRING\n, request.size.validation.reject.message=\nSTRING\n, request.size.validation.reject.message.content.type=\nSTRING\n, header.size.validation=\nSTRING\n, header.validation.maximum.request.line=\nSTRING\n, header.validation.maximum.size=\nSTRING\n, header.validation.maximum.chunk.size=\nSTRING\n, header.validation.reject.status.code=\nSTRING\n, header.validation.reject.message=\nSTRING\n, header.validation.reject.message.content.type=\nSTRING\n, server.bootstrap.configuration=\nOBJECT\n, server.bootstrap.nodelay=\nBOOL\n, server.bootstrap.keepalive=\nBOOL\n, server.bootstrap.sendbuffersize=\nINT\n, server.bootstrap.recievebuffersize=\nINT\n, server.bootstrap.connect.timeout=\nINT\n, server.bootstrap.socket.reuse=\nBOOL\n, server.bootstrap.socket.timeout=\nBOOL\n, server.bootstrap.socket.backlog=\nBOOL\n, trace.log.enabled=\nBOOL\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nreceiver.url\n\n        \nThe URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format \nhttp://0.0.0.0:9763/\nappNAme\n/\nstreamName\nIf the user want to use SSL the url should be given in following format \nhttps://localhost:8080/\nstreamName\n\n        \nhttp://0.0.0.0:9763/\n/\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nbasic.auth.enabled\n\n        \nIf this is set to \ntrue\n, basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' \n\n        \nfalse\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nworker.count\n\n        \nThe number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering.\n\n        \n1\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsocket.idle.timeout\n\n        \nIdle timeout for HTTP connection.\n\n        \n120000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.verify.client\n\n        \nThe type of client certificate verification.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.protocol\n\n        \nssl/tls related options\n\n        \nTLS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.store.type\n\n        \nTLS store type.\n\n        \nJKS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nparameters\n\n        \nParameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\"\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nciphers\n\n        \nList of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.enabled.protocols\n\n        \nSSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.enable.session.creation\n\n        \nEnable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.supported.snimatchers\n\n        \nHttp SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.suported.server.names\n\n        \nHttp supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.configuration\n\n        \nParameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\"\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation\n\n        \nTo enable the request size validation.\n\n        \nfalse\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.maximum.value\n\n        \nIf request size is validated then maximum size.\n\n        \nInteger.MAX_VALUE\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.reject.status.code\n\n        \nIf request is exceed maximum size and request.size.validation is enabled then status code to be send as response.\n\n        \n401\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.reject.message\n\n        \nIf request is exceed maximum size and request.size.validation is enabled then status message to be send as response.\n\n        \nMessage is bigger than the valid size\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.reject.message.content.type\n\n        \nIf request is exceed maximum size and request.size.validation is enabled then content type to be send as response.\n\n        \nplain/text\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.size.validation\n\n        \nTo enable the header size validation.\n\n        \nfalse\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.maximum.request.line\n\n        \nIf header header validation is enabled then the maximum request line.\n\n        \n4096\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.maximum.size\n\n        \nIf header header validation is enabled then the maximum expected header size.\n\n        \n8192\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.maximum.chunk.size\n\n        \nIf header header validation is enabled then the maximum expected chunk size.\n\n        \n8192\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.reject.status.code\n\n        \n401\n\n        \nIf header is exceed maximum size and header.size.validation is enabled then status code to be send as response.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.reject.message\n\n        \nIf header is exceed maximum size and header.size.validation is enabled then message to be send as response.\n\n        \nMessage header is bigger than the valid size\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.reject.message.content.type\n\n        \nIf header is exceed maximum size and header.size.validation is enabled then content type to be send as response.\n\n        \nplain/text\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.configuration\n\n        \nParameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\"\n\n        \nnull\n\n        \nOBJECT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.nodelay\n\n        \nHttp server no delay.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.keepalive\n\n        \nHttp server keep alive.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.sendbuffersize\n\n        \nHttp server send buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.recievebuffersize\n\n        \nHttp server receive buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.connect.timeout\n\n        \nHttp server connection timeout.\n\n        \n15000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.socket.reuse\n\n        \nTo enable http socket reuse.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.socket.timeout\n\n        \nHttp server socket timeout.\n\n        \n15\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.socket.backlog\n\n        \nTHttp server socket backlog.\n\n        \n100\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntrace.log.enabled\n\n        \nHttp traffic monitoring.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nserverBootstrapBossGroupSize\n\n        \nproperty to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads.\n\n        \n4\n\n        \nAny integer\n\n    \n\n    \n\n        \nserverBootstrapWorkerGroupSize\n\n        \nproperty to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode.\n\n        \n8\n\n        \nAny integer\n\n    \n\n    \n\n        \ndefaultHost\n\n        \nThe default host of the transport.\n\n        \n0.0.0.0\n\n        \nAny valid host\n\n    \n\n    \n\n        \ndefaultHttpPort\n\n        \nThe default port if the default scheme is 'http'.\n\n        \n8280\n\n        \nAny valid port\n\n    \n\n    \n\n        \ndefaultHttpsPort\n\n        \nThe default port if the default scheme is 'https'.\n\n        \n8243\n\n        \nAny valid port\n\n    \n\n    \n\n        \ndefaultScheme\n\n        \nThe default protocol.\n\n        \nhttp\n\n        \nhttp\nhttps\n\n    \n\n    \n\n        \nkeyStoreLocation\n\n        \nThe default keystore file path.\n\n        \n${carbon.home}/resources/security/wso2carbon.jks\n\n        \nPath to wso2carbon.jks file\n\n    \n\n    \n\n        \nkeyStorePassword\n\n        \nThe default keystore password.\n\n        \nwso2carbon\n\n        \nString of keystore password\n\n    \n\n    \n\n        \ncertPassword\n\n        \nThe default cert password.\n\n        \nwso2carbon\n\n        \nString of cert password\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters=\n'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2'\n,request.size.validation.configuration=\nrequest.size.validation:true\n,server.bootstrap.configuration=\nserver.bootstrap.socket.timeout:25\n @map(type='xml'))\ndefine stream FooStream (symbol string, price float, volume long);\n\n\n\n\n\nAbove source listenerConfiguration performs a default XML input mapping. The expected input is as follows:\nevents\nevent\nsymbol\nWSO2\n/symbol\nprice\n55.6\n/price\nvolume\n100\n/volume\n/event\n/events\nIf basic authentication is enabled via the \nbasic.auth.enabled='true\n setting, each input event is also expected to contain the \nAuthorization:'Basic encodeBase64(username:Password)'\n header.", 
            "title": "1.0.15"
        }, 
        {
            "location": "/api/1.0.15/#api-docs-v1015", 
            "text": "", 
            "title": "API Docs - v1.0.15"
        }, 
        {
            "location": "/api/1.0.15/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/1.0.15/#http-sink", 
            "text": "This extension publish the HTTP events in any HTTP method  POST, GET, PUT, DELETE  via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically.  Syntax  @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         publisher.url \n         The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use  https  instead of  http  in the publisher.url.e.g.,  http://localhost:8080/endpoint ,  https://localhost:8080/endpoint \n         \n         STRING \n         No \n         No \n     \n     \n         basic.auth.username \n         The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. \n           \n         STRING \n         Yes \n         No \n     \n     \n         basic.auth.password \n         The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. \n           \n         STRING \n         Yes \n         No \n     \n     \n         https.truststore.file \n         The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. \n         ${carbon.home}/resources/security/client-truststore.jks \n         STRING \n         Yes \n         No \n     \n     \n         https.truststore.password \n         The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. \n         wso2carbon \n         STRING \n         Yes \n         No \n     \n     \n         headers \n         The headers that should be included as a HTTP request headers. There can be any number of headers concatenated on following format. header1:value1#header2:value2. User can include content-type header if he need to any specific type for payload if not system get the mapping type as the content-Type header (ie. @map(xml):application/xml,@map(json):application/json,@map(text):plain/text ) and if user does not include any mapping type then system gets the 'plain/text' as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header. \n           \n         STRING \n         Yes \n         No \n     \n     \n         method \n         For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. \n         POST \n         STRING \n         Yes \n         No \n     \n     \n         socket.idle.timeout \n         Socket timeout value in millisecond \n         6000 \n         INT \n         Yes \n         No \n     \n     \n         chunk.disabled \n         port: Port number of the remote service \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         ssl.protocol \n         The SSL protocol version \n         TLS \n         STRING \n         Yes \n         No \n     \n     \n         parameters \n         Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ciphers \n         List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ssl.enabled.protocols \n         SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         client.enable.session.creation \n         Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         follow.redirect \n         Redirect related enabled. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         max.redirect.count \n         Maximum redirect count. \n         5 \n         INT \n         Yes \n         No \n     \n     \n         tls.store.type \n         TLS store type to be used. \n         JKS \n         STRING \n         Yes \n         No \n     \n     \n         proxy.host \n         Proxy server host \n         null \n         STRING \n         Yes \n         No \n     \n     \n         proxy.port \n         Proxy server port \n         null \n         STRING \n         Yes \n         No \n     \n     \n         proxy.username \n         Proxy server username \n         null \n         STRING \n         Yes \n         No \n     \n     \n         proxy.password \n         Proxy server password \n         null \n         STRING \n         Yes \n         No \n     \n     \n         client.bootstrap.configuration \n         Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" \n         TODO \n         STRING \n         Yes \n         No \n     \n     \n         client.bootstrap.nodelay \n         Http client no delay. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         client.bootstrap.keepalive \n         Http client keep alive. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         client.bootstrap.sendbuffersize \n         Http client send buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         client.bootstrap.recievebuffersize \n         Http client receive buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         client.bootstrap.connect.timeout \n         Http client connection timeout. \n         15000 \n         INT \n         Yes \n         No \n     \n     \n         client.bootstrap.socket.reuse \n         To enable http socket reuse. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         client.bootstrap.socket.timeout \n         Http client socket timeout. \n         15 \n         STRING \n         Yes \n         No \n     \n     \n         client.threadpool.configurations \n         Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" \n         TODO \n         STRING \n         Yes \n         No \n     \n     \n         client.connection.pool.count \n         Connection pool count. \n         0 \n         INT \n         Yes \n         No \n     \n     \n         client.max.active.connections.per.pool \n         Active connections per pool. \n         -1 \n         INT \n         Yes \n         No \n     \n     \n         client.min.idle.connections.per.pool \n         Minimum ideal connection per pool. \n         0 \n         INT \n         Yes \n         No \n     \n     \n         client.max.idle.connections.per.pool \n         Maximum ideal connection per pool. \n         100 \n         INT \n         Yes \n         No \n     \n     \n         client.min.eviction.idle.time \n         Minimum eviction idle time. \n         5 * 60 * 1000 \n         STRING \n         Yes \n         No \n     \n     \n         sender.thread.count \n         Http sender thread count. \n         20 \n         STRING \n         Yes \n         No \n     \n     \n         event.group.executor.thread.size \n         Event group executor thread size. \n         15 \n         STRING \n         Yes \n         No \n     \n     \n         max.wait.for.client.connection.pool \n         Maximum wait for client connection pool. \n         60000 \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         clientBootstrapBossGroupSize \n         property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. \n         4 \n         Any integer \n     \n     \n         clientBootstrapWorkerGroupSize \n         property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. \n         8 \n         Any integer \n     \n     \n         trustStoreLocation \n         The default truststore file path. \n         ${carbon.home}/resources/security/client-truststore.jks \n         Path to client-truststore.jks \n     \n     \n         trustStorePassword \n         The default truststore password. \n         wso2carbon \n         Truststore password \n       Examples  EXAMPLE 1  @sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers='{{headers}}',client.bootstrap.configuration= 'client.bootstrap.socket.timeout:20','client.bootstrap.worker.group.size:10' ,client.pool.configuration= 'client.connection.pool.count:10','client.max.active.connections.per.pool:1'  @map(type='xml' , @payload('{{payloadBody}}')))define stream FooStream (payloadBody String, method string, headers string);  If it is xml mapping expected input should be in following format for FooStream:{ events      event          symbol WSO2 /symbol          price 55.6 /price          volume 100 /volume      /event /events ,POST,Content-Length:24#Content-Location:USA#Retry-After:120}Above event will generate output as below.~Output http event payload events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ~Output http event headersContent-Length:24,Content-Location:'USA',Retry-After:120,Content-Type:'application/xml',HTTP_METHOD:'POST',~Output http event propertiesHTTP_METHOD:'POST',HOST:'localhost',PORT:8009PROTOCOL:'http'TO:'/foo'", 
            "title": "http (Sink)"
        }, 
        {
            "location": "/api/1.0.15/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.15/#http-source", 
            "text": "The HTTP source receives POST requests via HTTP or HTTPS in format such as  text ,  XML  and  JSON . If required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service.  Syntax  @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= STRING , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         receiver.url \n         The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format  http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format  https://localhost:8080/ streamName \n         http://0.0.0.0:9763/ / \n         STRING \n         Yes \n         No \n     \n     \n         basic.auth.enabled \n         If this is set to  true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false'  \n         false \n         STRING \n         Yes \n         No \n     \n     \n         worker.count \n         The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. \n         1 \n         STRING \n         Yes \n         No \n     \n     \n         socket.idle.timeout \n         Idle timeout for HTTP connection. \n         120000 \n         INT \n         Yes \n         No \n     \n     \n         ssl.verify.client \n         The type of client certificate verification. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ssl.protocol \n         ssl/tls related options \n         TLS \n         STRING \n         Yes \n         No \n     \n     \n         tls.store.type \n         TLS store type. \n         JKS \n         STRING \n         Yes \n         No \n     \n     \n         parameters \n         Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ciphers \n         List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ssl.enabled.protocols \n         SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         server.enable.session.creation \n         Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         server.supported.snimatchers \n         Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         server.suported.server.names \n         Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.configuration \n         Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" \n         null \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation \n         To enable the request size validation. \n         false \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.maximum.value \n         If request size is validated then maximum size. \n         Integer.MAX_VALUE \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.reject.status.code \n         If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. \n         401 \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.reject.message \n         If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. \n         Message is bigger than the valid size \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.reject.message.content.type \n         If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. \n         plain/text \n         STRING \n         Yes \n         No \n     \n     \n         header.size.validation \n         To enable the header size validation. \n         false \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.maximum.request.line \n         If header header validation is enabled then the maximum request line. \n         4096 \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.maximum.size \n         If header header validation is enabled then the maximum expected header size. \n         8192 \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.maximum.chunk.size \n         If header header validation is enabled then the maximum expected chunk size. \n         8192 \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.reject.status.code \n         401 \n         If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.reject.message \n         If header is exceed maximum size and header.size.validation is enabled then message to be send as response. \n         Message header is bigger than the valid size \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.reject.message.content.type \n         If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. \n         plain/text \n         STRING \n         Yes \n         No \n     \n     \n         server.bootstrap.configuration \n         Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" \n         null \n         OBJECT \n         Yes \n         No \n     \n     \n         server.bootstrap.nodelay \n         Http server no delay. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.keepalive \n         Http server keep alive. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.sendbuffersize \n         Http server send buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         server.bootstrap.recievebuffersize \n         Http server receive buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         server.bootstrap.connect.timeout \n         Http server connection timeout. \n         15000 \n         INT \n         Yes \n         No \n     \n     \n         server.bootstrap.socket.reuse \n         To enable http socket reuse. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.socket.timeout \n         Http server socket timeout. \n         15 \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.socket.backlog \n         THttp server socket backlog. \n         100 \n         BOOL \n         Yes \n         No \n     \n     \n         trace.log.enabled \n         Http traffic monitoring. \n         false \n         BOOL \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         serverBootstrapBossGroupSize \n         property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. \n         4 \n         Any integer \n     \n     \n         serverBootstrapWorkerGroupSize \n         property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. \n         8 \n         Any integer \n     \n     \n         defaultHost \n         The default host of the transport. \n         0.0.0.0 \n         Any valid host \n     \n     \n         defaultHttpPort \n         The default port if the default scheme is 'http'. \n         8280 \n         Any valid port \n     \n     \n         defaultHttpsPort \n         The default port if the default scheme is 'https'. \n         8243 \n         Any valid port \n     \n     \n         defaultScheme \n         The default protocol. \n         http \n         http https \n     \n     \n         keyStoreLocation \n         The default keystore file path. \n         ${carbon.home}/resources/security/wso2carbon.jks \n         Path to wso2carbon.jks file \n     \n     \n         keyStorePassword \n         The default keystore password. \n         wso2carbon \n         String of keystore password \n     \n     \n         certPassword \n         The default cert password. \n         wso2carbon \n         String of cert password \n       Examples  EXAMPLE 1  @source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' ,request.size.validation.configuration= request.size.validation:true ,server.bootstrap.configuration= server.bootstrap.socket.timeout:25  @map(type='xml'))\ndefine stream FooStream (symbol string, price float, volume long);  Above source listenerConfiguration performs a default XML input mapping. The expected input is as follows: events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events If basic authentication is enabled via the  basic.auth.enabled='true  setting, each input event is also expected to contain the  Authorization:'Basic encodeBase64(username:Password)'  header.", 
            "title": "http (Source)"
        }, 
        {
            "location": "/api/1.0.14/", 
            "text": "API Docs - v1.0.14\n\n\nSink\n\n\nhttp \n(Sink)\n\n\nThis extension publish the HTTP events in any HTTP method  POST, GET, PUT, DELETE  via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically.\n\n\n\nSyntax\n\n\n@sink(type=\nhttp\n, publisher.url=\nSTRING\n, basic.auth.username=\nSTRING\n, basic.auth.password=\nSTRING\n, https.truststore.file=\nSTRING\n, https.truststore.password=\nSTRING\n, headers=\nSTRING\n, method=\nSTRING\n, socket.idle.timeout=\nINT\n, chunk.disabled=\nBOOL\n, ssl.protocol=\nSTRING\n, parameters=\nSTRING\n, ciphers=\nSTRING\n, ssl.enabled.protocols=\nSTRING\n, client.enable.session.creation=\nSTRING\n, follow.redirect=\nBOOL\n, max.redirect.count=\nINT\n, tls.store.type=\nSTRING\n, proxy.host=\nSTRING\n, proxy.port=\nSTRING\n, proxy.username=\nSTRING\n, proxy.password=\nSTRING\n, client.bootstrap.configuration=\nSTRING\n, client.bootstrap.nodelay=\nBOOL\n, client.bootstrap.keepalive=\nBOOL\n, client.bootstrap.sendbuffersize=\nINT\n, client.bootstrap.recievebuffersize=\nINT\n, client.bootstrap.connect.timeout=\nINT\n, client.bootstrap.socket.reuse=\nBOOL\n, client.bootstrap.socket.timeout=\nSTRING\n, client.threadpool.configurations=\nSTRING\n, client.connection.pool.count=\nINT\n, client.max.active.connections.per.pool=\nINT\n, client.min.idle.connections.per.pool=\nINT\n, client.max.idle.connections.per.pool=\nINT\n, client.min.eviction.idle.time=\nSTRING\n, sender.thread.count=\nSTRING\n, event.group.executor.thread.size=\nSTRING\n, max.wait.for.client.connection.pool=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npublisher.url\n\n        \nThe URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use \nhttps\n instead of \nhttp\n in the publisher.url.e.g., \nhttp://localhost:8080/endpoint\n, \nhttps://localhost:8080/endpoint\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbasic.auth.username\n\n        \nThe username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI.\n\n        \n \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nbasic.auth.password\n\n        \nThe password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI.\n\n        \n \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nhttps.truststore.file\n\n        \nThe file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required.\n\n        \n${carbon.home}/resources/security/client-truststore.jks\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nhttps.truststore.password\n\n        \nThe password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password.\n\n        \nwso2carbon\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheaders\n\n        \nThe headers that should be included as a HTTP request headers. There can be any number of headers concatenated on following format. header1:value1#header2:value2. User can include content-type header if he need to any specific type for payload if not system get the mapping type as the content-Type header (ie. @map(xml):application/xml,@map(json):application/json,@map(text):plain/text ) and if user does not include any mapping type then system gets the 'plain/text' as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header.\n\n        \n \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmethod\n\n        \nFor HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header.\n\n        \nPOST\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsocket.idle.timeout\n\n        \nSocket timeout value in millisecond\n\n        \n6000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nchunk.disabled\n\n        \nport: Port number of the remote service\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.protocol\n\n        \nThe SSL protocol version\n\n        \nTLS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nparameters\n\n        \nParameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\"\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nciphers\n\n        \nList of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.enabled.protocols\n\n        \nSSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.enable.session.creation\n\n        \nEnable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfollow.redirect\n\n        \nRedirect related enabled.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.redirect.count\n\n        \nMaximum redirect count.\n\n        \n5\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.store.type\n\n        \nTLS store type to be used.\n\n        \nJKS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nproxy.host\n\n        \nProxy server host\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nproxy.port\n\n        \nProxy server port\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nproxy.username\n\n        \nProxy server username\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nproxy.password\n\n        \nProxy server password\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.configuration\n\n        \nClient bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\"\n\n        \nTODO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.nodelay\n\n        \nHttp client no delay.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.keepalive\n\n        \nHttp client keep alive.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.sendbuffersize\n\n        \nHttp client send buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.recievebuffersize\n\n        \nHttp client receive buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.connect.timeout\n\n        \nHttp client connection timeout.\n\n        \n15000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.socket.reuse\n\n        \nTo enable http socket reuse.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.socket.timeout\n\n        \nHttp client socket timeout.\n\n        \n15\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.threadpool.configurations\n\n        \nThread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\"\n\n        \nTODO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.connection.pool.count\n\n        \nConnection pool count.\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.max.active.connections.per.pool\n\n        \nActive connections per pool.\n\n        \n-1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.min.idle.connections.per.pool\n\n        \nMinimum ideal connection per pool.\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.max.idle.connections.per.pool\n\n        \nMaximum ideal connection per pool.\n\n        \n100\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.min.eviction.idle.time\n\n        \nMinimum eviction idle time.\n\n        \n5 * 60 * 1000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsender.thread.count\n\n        \nHttp sender thread count.\n\n        \n20\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nevent.group.executor.thread.size\n\n        \nEvent group executor thread size.\n\n        \n15\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.wait.for.client.connection.pool\n\n        \nMaximum wait for client connection pool.\n\n        \n60000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nclientBootstrapBossGroupSize\n\n        \nproperty to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads.\n\n        \n4\n\n        \nAny integer\n\n    \n\n    \n\n        \nclientBootstrapWorkerGroupSize\n\n        \nproperty to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode.\n\n        \n8\n\n        \nAny integer\n\n    \n\n    \n\n        \ntrustStoreLocation\n\n        \nThe default truststore file path.\n\n        \n${carbon.home}/resources/security/client-truststore.jks\n\n        \nPath to client-truststore.jks\n\n    \n\n    \n\n        \ntrustStorePassword\n\n        \nThe default truststore password.\n\n        \nwso2carbon\n\n        \nTruststore password\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers='{{headers}}',client.bootstrap.configuration=\n'client.bootstrap.socket.timeout:20','client.bootstrap.worker.group.size:10'\n,client.pool.configuration=\n'client.connection.pool.count:10','client.max.active.connections.per.pool:1'\n @map(type='xml' , @payload('{{payloadBody}}')))define stream FooStream (payloadBody String, method string, headers string);\n\n\n\n\n\nIf it is xml mapping expected input should be in following format for FooStream:{\nevents\n    \nevent\n        \nsymbol\nWSO2\n/symbol\n        \nprice\n55.6\n/price\n        \nvolume\n100\n/volume\n    \n/event\n/events\n,POST,Content-Length:24#Content-Location:USA#Retry-After:120}Above event will generate output as below.~Output http event payload\nevents\nevent\nsymbol\nWSO2\n/symbol\nprice\n55.6\n/price\nvolume\n100\n/volume\n/event\n/events\n~Output http event headersContent-Length:24,Content-Location:'USA',Retry-After:120,Content-Type:'application/xml',HTTP_METHOD:'POST',~Output http event propertiesHTTP_METHOD:'POST',HOST:'localhost',PORT:8009PROTOCOL:'http'TO:'/foo'\n\n\n\nSource\n\n\nhttp \n(Source)\n\n\nThe HTTP source receives POST requests via HTTP or HTTPS in format such as \ntext\n, \nXML\n and \nJSON\n. If required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service.\n\n\n\nSyntax\n\n\n@source(type=\nhttp\n, receiver.url=\nSTRING\n, basic.auth.enabled=\nSTRING\n, worker.count=\nSTRING\n, socket.idle.timeout=\nINT\n, ssl.verify.client=\nSTRING\n, ssl.protocol=\nSTRING\n, tls.store.type=\nSTRING\n, parameters=\nSTRING\n, ciphers=\nSTRING\n, ssl.enabled.protocols=\nSTRING\n, server.enable.session.creation=\nSTRING\n, server.supported.snimatchers=\nSTRING\n, server.suported.server.names=\nSTRING\n, request.size.validation.configuration=\nSTRING\n, request.size.validation=\nSTRING\n, request.size.validation.maximum.value=\nSTRING\n, request.size.validation.reject.status.code=\nSTRING\n, request.size.validation.reject.message=\nSTRING\n, request.size.validation.reject.message.content.type=\nSTRING\n, header.size.validation=\nSTRING\n, header.validation.maximum.request.line=\nSTRING\n, header.validation.maximum.size=\nSTRING\n, header.validation.maximum.chunk.size=\nSTRING\n, header.validation.reject.status.code=\nSTRING\n, header.validation.reject.message=\nSTRING\n, header.validation.reject.message.content.type=\nSTRING\n, server.bootstrap.configuration=\nOBJECT\n, server.bootstrap.nodelay=\nBOOL\n, server.bootstrap.keepalive=\nBOOL\n, server.bootstrap.sendbuffersize=\nINT\n, server.bootstrap.recievebuffersize=\nINT\n, server.bootstrap.connect.timeout=\nINT\n, server.bootstrap.socket.reuse=\nBOOL\n, server.bootstrap.socket.timeout=\nBOOL\n, server.bootstrap.socket.backlog=\nBOOL\n, trace.log.enabled=\nBOOL\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nreceiver.url\n\n        \nThe URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format \nhttp://0.0.0.0:9763/\nappNAme\n/\nstreamName\nIf the user want to use SSL the url should be given in following format \nhttps://localhost:8080/\nstreamName\n\n        \nhttp://0.0.0.0:9763/\n/\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nbasic.auth.enabled\n\n        \nIf this is set to \ntrue\n, basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' \n\n        \nfalse\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nworker.count\n\n        \nThe number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering.\n\n        \n1\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsocket.idle.timeout\n\n        \nIdle timeout for HTTP connection.\n\n        \n120000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.verify.client\n\n        \nThe type of client certificate verification.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.protocol\n\n        \nssl/tls related options\n\n        \nTLS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.store.type\n\n        \nTLS store type.\n\n        \nJKS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nparameters\n\n        \nParameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\"\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nciphers\n\n        \nList of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.enabled.protocols\n\n        \nSSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.enable.session.creation\n\n        \nEnable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.supported.snimatchers\n\n        \nHttp SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.suported.server.names\n\n        \nHttp supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.configuration\n\n        \nParameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\"\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation\n\n        \nTo enable the request size validation.\n\n        \nfalse\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.maximum.value\n\n        \nIf request size is validated then maximum size.\n\n        \nInteger.MAX_VALUE\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.reject.status.code\n\n        \nIf request is exceed maximum size and request.size.validation is enabled then status code to be send as response.\n\n        \n401\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.reject.message\n\n        \nIf request is exceed maximum size and request.size.validation is enabled then status message to be send as response.\n\n        \nMessage is bigger than the valid size\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.reject.message.content.type\n\n        \nIf request is exceed maximum size and request.size.validation is enabled then content type to be send as response.\n\n        \nplain/text\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.size.validation\n\n        \nTo enable the header size validation.\n\n        \nfalse\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.maximum.request.line\n\n        \nIf header header validation is enabled then the maximum request line.\n\n        \n4096\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.maximum.size\n\n        \nIf header header validation is enabled then the maximum expected header size.\n\n        \n8192\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.maximum.chunk.size\n\n        \nIf header header validation is enabled then the maximum expected chunk size.\n\n        \n8192\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.reject.status.code\n\n        \n401\n\n        \nIf header is exceed maximum size and header.size.validation is enabled then status code to be send as response.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.reject.message\n\n        \nIf header is exceed maximum size and header.size.validation is enabled then message to be send as response.\n\n        \nMessage header is bigger than the valid size\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.reject.message.content.type\n\n        \nIf header is exceed maximum size and header.size.validation is enabled then content type to be send as response.\n\n        \nplain/text\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.configuration\n\n        \nParameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\"\n\n        \nnull\n\n        \nOBJECT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.nodelay\n\n        \nHttp server no delay.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.keepalive\n\n        \nHttp server keep alive.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.sendbuffersize\n\n        \nHttp server send buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.recievebuffersize\n\n        \nHttp server receive buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.connect.timeout\n\n        \nHttp server connection timeout.\n\n        \n15000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.socket.reuse\n\n        \nTo enable http socket reuse.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.socket.timeout\n\n        \nHttp server socket timeout.\n\n        \n15\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.socket.backlog\n\n        \nTHttp server socket backlog.\n\n        \n100\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntrace.log.enabled\n\n        \nHttp traffic monitoring.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nserverBootstrapBossGroupSize\n\n        \nproperty to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads.\n\n        \n4\n\n        \nAny integer\n\n    \n\n    \n\n        \nserverBootstrapWorkerGroupSize\n\n        \nproperty to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode.\n\n        \n8\n\n        \nAny integer\n\n    \n\n    \n\n        \ndefaultHost\n\n        \nThe default host of the transport.\n\n        \n0.0.0.0\n\n        \nAny valid host\n\n    \n\n    \n\n        \ndefaultHttpPort\n\n        \nThe default port if the default scheme is 'http'.\n\n        \n8280\n\n        \nAny valid port\n\n    \n\n    \n\n        \ndefaultHttpsPort\n\n        \nThe default port if the default scheme is 'https'.\n\n        \n8243\n\n        \nAny valid port\n\n    \n\n    \n\n        \ndefaultScheme\n\n        \nThe default protocol.\n\n        \nhttp\n\n        \nhttp\nhttps\n\n    \n\n    \n\n        \nkeyStoreLocation\n\n        \nThe default keystore file path.\n\n        \n${carbon.home}/resources/security/wso2carbon.jks\n\n        \nPath to wso2carbon.jks file\n\n    \n\n    \n\n        \nkeyStorePassword\n\n        \nThe default keystore password.\n\n        \nwso2carbon\n\n        \nString of keystore password\n\n    \n\n    \n\n        \ncertPassword\n\n        \nThe default cert password.\n\n        \nwso2carbon\n\n        \nString of cert password\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters=\n'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2'\n,request.size.validation.configuration=\nrequest.size.validation:true\n,server.bootstrap.configuration=\nserver.bootstrap.socket.timeout:25\n @map(type='xml'))\ndefine stream FooStream (symbol string, price float, volume long);\n\n\n\n\n\nAbove source listenerConfiguration performs a default XML input mapping. The expected input is as follows:\nevents\nevent\nsymbol\nWSO2\n/symbol\nprice\n55.6\n/price\nvolume\n100\n/volume\n/event\n/events\nIf basic authentication is enabled via the \nbasic.auth.enabled='true\n setting, each input event is also expected to contain the \nAuthorization:'Basic encodeBase64(username:Password)'\n header.", 
            "title": "1.0.14"
        }, 
        {
            "location": "/api/1.0.14/#api-docs-v1014", 
            "text": "", 
            "title": "API Docs - v1.0.14"
        }, 
        {
            "location": "/api/1.0.14/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/1.0.14/#http-sink", 
            "text": "This extension publish the HTTP events in any HTTP method  POST, GET, PUT, DELETE  via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically.  Syntax  @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         publisher.url \n         The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use  https  instead of  http  in the publisher.url.e.g.,  http://localhost:8080/endpoint ,  https://localhost:8080/endpoint \n         \n         STRING \n         No \n         No \n     \n     \n         basic.auth.username \n         The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. \n           \n         STRING \n         Yes \n         No \n     \n     \n         basic.auth.password \n         The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. \n           \n         STRING \n         Yes \n         No \n     \n     \n         https.truststore.file \n         The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. \n         ${carbon.home}/resources/security/client-truststore.jks \n         STRING \n         Yes \n         No \n     \n     \n         https.truststore.password \n         The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. \n         wso2carbon \n         STRING \n         Yes \n         No \n     \n     \n         headers \n         The headers that should be included as a HTTP request headers. There can be any number of headers concatenated on following format. header1:value1#header2:value2. User can include content-type header if he need to any specific type for payload if not system get the mapping type as the content-Type header (ie. @map(xml):application/xml,@map(json):application/json,@map(text):plain/text ) and if user does not include any mapping type then system gets the 'plain/text' as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header. \n           \n         STRING \n         Yes \n         No \n     \n     \n         method \n         For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. \n         POST \n         STRING \n         Yes \n         No \n     \n     \n         socket.idle.timeout \n         Socket timeout value in millisecond \n         6000 \n         INT \n         Yes \n         No \n     \n     \n         chunk.disabled \n         port: Port number of the remote service \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         ssl.protocol \n         The SSL protocol version \n         TLS \n         STRING \n         Yes \n         No \n     \n     \n         parameters \n         Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ciphers \n         List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ssl.enabled.protocols \n         SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         client.enable.session.creation \n         Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         follow.redirect \n         Redirect related enabled. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         max.redirect.count \n         Maximum redirect count. \n         5 \n         INT \n         Yes \n         No \n     \n     \n         tls.store.type \n         TLS store type to be used. \n         JKS \n         STRING \n         Yes \n         No \n     \n     \n         proxy.host \n         Proxy server host \n         null \n         STRING \n         Yes \n         No \n     \n     \n         proxy.port \n         Proxy server port \n         null \n         STRING \n         Yes \n         No \n     \n     \n         proxy.username \n         Proxy server username \n         null \n         STRING \n         Yes \n         No \n     \n     \n         proxy.password \n         Proxy server password \n         null \n         STRING \n         Yes \n         No \n     \n     \n         client.bootstrap.configuration \n         Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" \n         TODO \n         STRING \n         Yes \n         No \n     \n     \n         client.bootstrap.nodelay \n         Http client no delay. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         client.bootstrap.keepalive \n         Http client keep alive. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         client.bootstrap.sendbuffersize \n         Http client send buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         client.bootstrap.recievebuffersize \n         Http client receive buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         client.bootstrap.connect.timeout \n         Http client connection timeout. \n         15000 \n         INT \n         Yes \n         No \n     \n     \n         client.bootstrap.socket.reuse \n         To enable http socket reuse. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         client.bootstrap.socket.timeout \n         Http client socket timeout. \n         15 \n         STRING \n         Yes \n         No \n     \n     \n         client.threadpool.configurations \n         Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" \n         TODO \n         STRING \n         Yes \n         No \n     \n     \n         client.connection.pool.count \n         Connection pool count. \n         0 \n         INT \n         Yes \n         No \n     \n     \n         client.max.active.connections.per.pool \n         Active connections per pool. \n         -1 \n         INT \n         Yes \n         No \n     \n     \n         client.min.idle.connections.per.pool \n         Minimum ideal connection per pool. \n         0 \n         INT \n         Yes \n         No \n     \n     \n         client.max.idle.connections.per.pool \n         Maximum ideal connection per pool. \n         100 \n         INT \n         Yes \n         No \n     \n     \n         client.min.eviction.idle.time \n         Minimum eviction idle time. \n         5 * 60 * 1000 \n         STRING \n         Yes \n         No \n     \n     \n         sender.thread.count \n         Http sender thread count. \n         20 \n         STRING \n         Yes \n         No \n     \n     \n         event.group.executor.thread.size \n         Event group executor thread size. \n         15 \n         STRING \n         Yes \n         No \n     \n     \n         max.wait.for.client.connection.pool \n         Maximum wait for client connection pool. \n         60000 \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         clientBootstrapBossGroupSize \n         property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. \n         4 \n         Any integer \n     \n     \n         clientBootstrapWorkerGroupSize \n         property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. \n         8 \n         Any integer \n     \n     \n         trustStoreLocation \n         The default truststore file path. \n         ${carbon.home}/resources/security/client-truststore.jks \n         Path to client-truststore.jks \n     \n     \n         trustStorePassword \n         The default truststore password. \n         wso2carbon \n         Truststore password \n       Examples  EXAMPLE 1  @sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers='{{headers}}',client.bootstrap.configuration= 'client.bootstrap.socket.timeout:20','client.bootstrap.worker.group.size:10' ,client.pool.configuration= 'client.connection.pool.count:10','client.max.active.connections.per.pool:1'  @map(type='xml' , @payload('{{payloadBody}}')))define stream FooStream (payloadBody String, method string, headers string);  If it is xml mapping expected input should be in following format for FooStream:{ events      event          symbol WSO2 /symbol          price 55.6 /price          volume 100 /volume      /event /events ,POST,Content-Length:24#Content-Location:USA#Retry-After:120}Above event will generate output as below.~Output http event payload events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ~Output http event headersContent-Length:24,Content-Location:'USA',Retry-After:120,Content-Type:'application/xml',HTTP_METHOD:'POST',~Output http event propertiesHTTP_METHOD:'POST',HOST:'localhost',PORT:8009PROTOCOL:'http'TO:'/foo'", 
            "title": "http (Sink)"
        }, 
        {
            "location": "/api/1.0.14/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.14/#http-source", 
            "text": "The HTTP source receives POST requests via HTTP or HTTPS in format such as  text ,  XML  and  JSON . If required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service.  Syntax  @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= STRING , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         receiver.url \n         The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format  http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format  https://localhost:8080/ streamName \n         http://0.0.0.0:9763/ / \n         STRING \n         Yes \n         No \n     \n     \n         basic.auth.enabled \n         If this is set to  true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false'  \n         false \n         STRING \n         Yes \n         No \n     \n     \n         worker.count \n         The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. \n         1 \n         STRING \n         Yes \n         No \n     \n     \n         socket.idle.timeout \n         Idle timeout for HTTP connection. \n         120000 \n         INT \n         Yes \n         No \n     \n     \n         ssl.verify.client \n         The type of client certificate verification. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ssl.protocol \n         ssl/tls related options \n         TLS \n         STRING \n         Yes \n         No \n     \n     \n         tls.store.type \n         TLS store type. \n         JKS \n         STRING \n         Yes \n         No \n     \n     \n         parameters \n         Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ciphers \n         List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ssl.enabled.protocols \n         SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         server.enable.session.creation \n         Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         server.supported.snimatchers \n         Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         server.suported.server.names \n         Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.configuration \n         Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" \n         null \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation \n         To enable the request size validation. \n         false \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.maximum.value \n         If request size is validated then maximum size. \n         Integer.MAX_VALUE \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.reject.status.code \n         If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. \n         401 \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.reject.message \n         If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. \n         Message is bigger than the valid size \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.reject.message.content.type \n         If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. \n         plain/text \n         STRING \n         Yes \n         No \n     \n     \n         header.size.validation \n         To enable the header size validation. \n         false \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.maximum.request.line \n         If header header validation is enabled then the maximum request line. \n         4096 \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.maximum.size \n         If header header validation is enabled then the maximum expected header size. \n         8192 \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.maximum.chunk.size \n         If header header validation is enabled then the maximum expected chunk size. \n         8192 \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.reject.status.code \n         401 \n         If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.reject.message \n         If header is exceed maximum size and header.size.validation is enabled then message to be send as response. \n         Message header is bigger than the valid size \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.reject.message.content.type \n         If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. \n         plain/text \n         STRING \n         Yes \n         No \n     \n     \n         server.bootstrap.configuration \n         Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" \n         null \n         OBJECT \n         Yes \n         No \n     \n     \n         server.bootstrap.nodelay \n         Http server no delay. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.keepalive \n         Http server keep alive. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.sendbuffersize \n         Http server send buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         server.bootstrap.recievebuffersize \n         Http server receive buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         server.bootstrap.connect.timeout \n         Http server connection timeout. \n         15000 \n         INT \n         Yes \n         No \n     \n     \n         server.bootstrap.socket.reuse \n         To enable http socket reuse. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.socket.timeout \n         Http server socket timeout. \n         15 \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.socket.backlog \n         THttp server socket backlog. \n         100 \n         BOOL \n         Yes \n         No \n     \n     \n         trace.log.enabled \n         Http traffic monitoring. \n         false \n         BOOL \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         serverBootstrapBossGroupSize \n         property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. \n         4 \n         Any integer \n     \n     \n         serverBootstrapWorkerGroupSize \n         property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. \n         8 \n         Any integer \n     \n     \n         defaultHost \n         The default host of the transport. \n         0.0.0.0 \n         Any valid host \n     \n     \n         defaultHttpPort \n         The default port if the default scheme is 'http'. \n         8280 \n         Any valid port \n     \n     \n         defaultHttpsPort \n         The default port if the default scheme is 'https'. \n         8243 \n         Any valid port \n     \n     \n         defaultScheme \n         The default protocol. \n         http \n         http https \n     \n     \n         keyStoreLocation \n         The default keystore file path. \n         ${carbon.home}/resources/security/wso2carbon.jks \n         Path to wso2carbon.jks file \n     \n     \n         keyStorePassword \n         The default keystore password. \n         wso2carbon \n         String of keystore password \n     \n     \n         certPassword \n         The default cert password. \n         wso2carbon \n         String of cert password \n       Examples  EXAMPLE 1  @source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' ,request.size.validation.configuration= request.size.validation:true ,server.bootstrap.configuration= server.bootstrap.socket.timeout:25  @map(type='xml'))\ndefine stream FooStream (symbol string, price float, volume long);  Above source listenerConfiguration performs a default XML input mapping. The expected input is as follows: events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events If basic authentication is enabled via the  basic.auth.enabled='true  setting, each input event is also expected to contain the  Authorization:'Basic encodeBase64(username:Password)'  header.", 
            "title": "http (Source)"
        }, 
        {
            "location": "/api/1.0.13/", 
            "text": "API Docs - v1.0.13\n\n\nSink\n\n\nhttp \n(Sink)\n\n\nThis extension publish the HTTP events in any HTTP method  POST, GET, PUT, DELETE  via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically.\n\n\n\nSyntax\n\n\n@sink(type=\nhttp\n, publisher.url=\nSTRING\n, basic.auth.username=\nSTRING\n, basic.auth.password=\nSTRING\n, https.truststore.file=\nSTRING\n, https.truststore.password=\nSTRING\n, headers=\nSTRING\n, method=\nSTRING\n, socket.idle.timeout=\nINT\n, chunk.disabled=\nBOOL\n, ssl.protocol=\nSTRING\n, parameters=\nSTRING\n, ciphers=\nSTRING\n, ssl.enabled.protocols=\nSTRING\n, client.enable.session.creation=\nSTRING\n, follow.redirect=\nBOOL\n, max.redirect.count=\nINT\n, tls.store.type=\nSTRING\n, proxy.host=\nSTRING\n, proxy.port=\nSTRING\n, proxy.username=\nSTRING\n, proxy.password=\nSTRING\n, client.bootstrap.configuration=\nSTRING\n, client.bootstrap.nodelay=\nBOOL\n, client.bootstrap.keepalive=\nBOOL\n, client.bootstrap.sendbuffersize=\nINT\n, client.bootstrap.recievebuffersize=\nINT\n, client.bootstrap.connect.timeout=\nINT\n, client.bootstrap.socket.reuse=\nBOOL\n, client.bootstrap.socket.timeout=\nSTRING\n, client.threadpool.configurations=\nSTRING\n, client.connection.pool.count=\nINT\n, client.max.active.connections.per.pool=\nINT\n, client.min.idle.connections.per.pool=\nINT\n, client.max.idle.connections.per.pool=\nINT\n, client.min.eviction.idle.time=\nSTRING\n, sender.thread.count=\nSTRING\n, event.group.executor.thread.size=\nSTRING\n, max.wait.for.client.connection.pool=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npublisher.url\n\n        \nThe URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use \nhttps\n instead of \nhttp\n in the publisher.url.e.g., \nhttp://localhost:8080/endpoint\n, \nhttps://localhost:8080/endpoint\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbasic.auth.username\n\n        \nThe username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI.\n\n        \n \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nbasic.auth.password\n\n        \nThe password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI.\n\n        \n \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nhttps.truststore.file\n\n        \nThe file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required.\n\n        \n${carbon.home}/resources/security/client-truststore.jks\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nhttps.truststore.password\n\n        \nThe password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password.\n\n        \nwso2carbon\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheaders\n\n        \nThe headers that should be included as a HTTP request headers. There can be any number of headers concatenated on following format. header1:value1#header2:value2. User can include content-type header if he need to any specific type for payload if not system get the mapping type as the content-Type header (ie. @map(xml):application/xml,@map(json):application/json,@map(text):plain/text ) and if user does not include any mapping type then system gets the 'plain/text' as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header.\n\n        \n \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmethod\n\n        \nFor HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header.\n\n        \nPOST\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsocket.idle.timeout\n\n        \nSocket timeout value in millisecond\n\n        \n6000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nchunk.disabled\n\n        \nport: Port number of the remote service\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.protocol\n\n        \nThe SSL protocol version\n\n        \nTLS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nparameters\n\n        \nParameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\"\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nciphers\n\n        \nList of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.enabled.protocols\n\n        \nSSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.enable.session.creation\n\n        \nEnable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfollow.redirect\n\n        \nRedirect related enabled.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.redirect.count\n\n        \nMaximum redirect count.\n\n        \n5\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.store.type\n\n        \nTLS store type to be used.\n\n        \nJKS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nproxy.host\n\n        \nProxy server host\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nproxy.port\n\n        \nProxy server port\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nproxy.username\n\n        \nProxy server username\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nproxy.password\n\n        \nProxy server password\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.configuration\n\n        \nClient bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\"\n\n        \nTODO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.nodelay\n\n        \nHttp client no delay.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.keepalive\n\n        \nHttp client keep alive.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.sendbuffersize\n\n        \nHttp client send buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.recievebuffersize\n\n        \nHttp client receive buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.connect.timeout\n\n        \nHttp client connection timeout.\n\n        \n15000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.socket.reuse\n\n        \nTo enable http socket reuse.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.socket.timeout\n\n        \nHttp client socket timeout.\n\n        \n15\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.threadpool.configurations\n\n        \nThread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\"\n\n        \nTODO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.connection.pool.count\n\n        \nConnection pool count.\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.max.active.connections.per.pool\n\n        \nActive connections per pool.\n\n        \n-1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.min.idle.connections.per.pool\n\n        \nMinimum ideal connection per pool.\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.max.idle.connections.per.pool\n\n        \nMaximum ideal connection per pool.\n\n        \n100\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.min.eviction.idle.time\n\n        \nMinimum eviction idle time.\n\n        \n5 * 60 * 1000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsender.thread.count\n\n        \nHttp sender thread count.\n\n        \n20\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nevent.group.executor.thread.size\n\n        \nEvent group executor thread size.\n\n        \n15\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.wait.for.client.connection.pool\n\n        \nMaximum wait for client connection pool.\n\n        \n60000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nclientBootstrapBossGroupSize\n\n        \nproperty to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads.\n\n        \n4\n\n        \nAny integer\n\n    \n\n    \n\n        \nclientBootstrapWorkerGroupSize\n\n        \nproperty to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode.\n\n        \n8\n\n        \nAny integer\n\n    \n\n    \n\n        \ntrustStoreLocation\n\n        \nThe default truststore file path.\n\n        \n${carbon.home}/resources/security/client-truststore.jks\n\n        \nPath to client-truststore.jks\n\n    \n\n    \n\n        \ntrustStorePassword\n\n        \nThe default truststore password.\n\n        \nwso2carbon\n\n        \nTruststore password\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers='{{headers}}',client.bootstrap.configuration=\n'client.bootstrap.socket.timeout:20','client.bootstrap.worker.group.size:10'\n,client.pool.configuration=\n'client.connection.pool.count:10','client.max.active.connections.per.pool:1'\n @map(type='xml' , @payload('{{payloadBody}}')))define stream FooStream (payloadBody String, method string, headers string);\n\n\n\n\n\nIf it is xml mapping expected input should be in following format for FooStream:{\nevents\n    \nevent\n        \nsymbol\nWSO2\n/symbol\n        \nprice\n55.6\n/price\n        \nvolume\n100\n/volume\n    \n/event\n/events\n,POST,Content-Length:24#Content-Location:USA#Retry-After:120}Above event will generate output as below.~Output http event payload\nevents\nevent\nsymbol\nWSO2\n/symbol\nprice\n55.6\n/price\nvolume\n100\n/volume\n/event\n/events\n~Output http event headersContent-Length:24,Content-Location:'USA',Retry-After:120,Content-Type:'application/xml',HTTP_METHOD:'POST',~Output http event propertiesHTTP_METHOD:'POST',HOST:'localhost',PORT:8009PROTOCOL:'http'TO:'/foo'\n\n\n\nSource\n\n\nhttp \n(Source)\n\n\nThe HTTP source receives POST requests via HTTP or HTTPS in format such as \ntext\n, \nXML\n and \nJSON\n. If required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service.\n\n\n\nSyntax\n\n\n@source(type=\nhttp\n, receiver.url=\nSTRING\n, basic.auth.enabled=\nSTRING\n, worker.count=\nSTRING\n, socket.idle.timeout=\nINT\n, ssl.verify.client=\nSTRING\n, ssl.protocol=\nSTRING\n, tls.store.type=\nSTRING\n, parameters=\nSTRING\n, ciphers=\nSTRING\n, ssl.enabled.protocols=\nSTRING\n, server.enable.session.creation=\nSTRING\n, server.supported.snimatchers=\nSTRING\n, server.suported.server.names=\nSTRING\n, request.size.validation.configuration=\nSTRING\n, request.size.validation=\nSTRING\n, request.size.validation.maximum.value=\nSTRING\n, request.size.validation.reject.status.code=\nSTRING\n, request.size.validation.reject.message=\nSTRING\n, request.size.validation.reject.message.content.type=\nSTRING\n, header.size.validation=\nSTRING\n, header.validation.maximum.request.line=\nSTRING\n, header.validation.maximum.size=\nSTRING\n, header.validation.maximum.chunk.size=\nSTRING\n, header.validation.reject.status.code=\nSTRING\n, header.validation.reject.message=\nSTRING\n, header.validation.reject.message.content.type=\nSTRING\n, server.bootstrap.configuration=\nOBJECT\n, server.bootstrap.nodelay=\nBOOL\n, server.bootstrap.keepalive=\nBOOL\n, server.bootstrap.sendbuffersize=\nINT\n, server.bootstrap.recievebuffersize=\nINT\n, server.bootstrap.connect.timeout=\nINT\n, server.bootstrap.socket.reuse=\nBOOL\n, server.bootstrap.socket.timeout=\nBOOL\n, server.bootstrap.socket.backlog=\nBOOL\n, trace.log.enabled=\nBOOL\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nreceiver.url\n\n        \nThe URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format \nhttp://0.0.0.0:9763/\nappNAme\n/\nstreamName\nIf the user want to use SSL the url should be given in following format \nhttps://localhost:8080/\nstreamName\n\n        \nhttp://0.0.0.0:9763/\n/\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nbasic.auth.enabled\n\n        \nIf this is set to \ntrue\n, basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' \n\n        \nfalse\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nworker.count\n\n        \nThe number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering.\n\n        \n1\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsocket.idle.timeout\n\n        \nIdle timeout for HTTP connection.\n\n        \n120000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.verify.client\n\n        \nThe type of client certificate verification.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.protocol\n\n        \nssl/tls related options\n\n        \nTLS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.store.type\n\n        \nTLS store type.\n\n        \nJKS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nparameters\n\n        \nParameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\"\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nciphers\n\n        \nList of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.enabled.protocols\n\n        \nSSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.enable.session.creation\n\n        \nEnable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.supported.snimatchers\n\n        \nHttp SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.suported.server.names\n\n        \nHttp supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.configuration\n\n        \nParameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\"\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation\n\n        \nTo enable the request size validation.\n\n        \nfalse\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.maximum.value\n\n        \nIf request size is validated then maximum size.\n\n        \nInteger.MAX_VALUE\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.reject.status.code\n\n        \nIf request is exceed maximum size and request.size.validation is enabled then status code to be send as response.\n\n        \n401\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.reject.message\n\n        \nIf request is exceed maximum size and request.size.validation is enabled then status message to be send as response.\n\n        \nMessage is bigger than the valid size\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.reject.message.content.type\n\n        \nIf request is exceed maximum size and request.size.validation is enabled then content type to be send as response.\n\n        \nplain/text\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.size.validation\n\n        \nTo enable the header size validation.\n\n        \nfalse\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.maximum.request.line\n\n        \nIf header header validation is enabled then the maximum request line.\n\n        \n4096\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.maximum.size\n\n        \nIf header header validation is enabled then the maximum expected header size.\n\n        \n8192\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.maximum.chunk.size\n\n        \nIf header header validation is enabled then the maximum expected chunk size.\n\n        \n8192\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.reject.status.code\n\n        \n401\n\n        \nIf header is exceed maximum size and header.size.validation is enabled then status code to be send as response.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.reject.message\n\n        \nIf header is exceed maximum size and header.size.validation is enabled then message to be send as response.\n\n        \nMessage header is bigger than the valid size\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.reject.message.content.type\n\n        \nIf header is exceed maximum size and header.size.validation is enabled then content type to be send as response.\n\n        \nplain/text\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.configuration\n\n        \nParameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\"\n\n        \nnull\n\n        \nOBJECT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.nodelay\n\n        \nHttp server no delay.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.keepalive\n\n        \nHttp server keep alive.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.sendbuffersize\n\n        \nHttp server send buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.recievebuffersize\n\n        \nHttp server receive buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.connect.timeout\n\n        \nHttp server connection timeout.\n\n        \n15000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.socket.reuse\n\n        \nTo enable http socket reuse.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.socket.timeout\n\n        \nHttp server socket timeout.\n\n        \n15\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.socket.backlog\n\n        \nTHttp server socket backlog.\n\n        \n100\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntrace.log.enabled\n\n        \nHttp traffic monitoring.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nserverBootstrapBossGroupSize\n\n        \nproperty to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads.\n\n        \n4\n\n        \nAny integer\n\n    \n\n    \n\n        \nserverBootstrapWorkerGroupSize\n\n        \nproperty to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode.\n\n        \n8\n\n        \nAny integer\n\n    \n\n    \n\n        \ndefaultHost\n\n        \nThe default host of the transport.\n\n        \n0.0.0.0\n\n        \nAny valid host\n\n    \n\n    \n\n        \ndefaultHttpPort\n\n        \nThe default port if the default scheme is 'http'.\n\n        \n8280\n\n        \nAny valid port\n\n    \n\n    \n\n        \ndefaultHttpsPort\n\n        \nThe default port if the default scheme is 'https'.\n\n        \n8243\n\n        \nAny valid port\n\n    \n\n    \n\n        \ndefaultScheme\n\n        \nThe default protocol.\n\n        \nhttp\n\n        \nhttp\nhttps\n\n    \n\n    \n\n        \nkeyStoreLocation\n\n        \nThe default keystore file path.\n\n        \n${carbon.home}/resources/security/wso2carbon.jks\n\n        \nPath to wso2carbon.jks file\n\n    \n\n    \n\n        \nkeyStorePassword\n\n        \nThe default keystore password.\n\n        \nwso2carbon\n\n        \nString of keystore password\n\n    \n\n    \n\n        \ncertPassword\n\n        \nThe default cert password.\n\n        \nwso2carbon\n\n        \nString of cert password\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters=\n'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2'\n,request.size.validation.configuration=\nrequest.size.validation:true\n,server.bootstrap.configuration=\nserver.bootstrap.socket.timeout:25\n @map(type='xml'))\ndefine stream FooStream (symbol string, price float, volume long);\n\n\n\n\n\nAbove source listenerConfiguration performs a default XML input mapping. The expected input is as follows:\nevents\nevent\nsymbol\nWSO2\n/symbol\nprice\n55.6\n/price\nvolume\n100\n/volume\n/event\n/events\nIf basic authentication is enabled via the \nbasic.auth.enabled='true\n setting, each input event is also expected to contain the \nAuthorization:'Basic encodeBase64(username:Password)'\n header.", 
            "title": "1.0.13"
        }, 
        {
            "location": "/api/1.0.13/#api-docs-v1013", 
            "text": "", 
            "title": "API Docs - v1.0.13"
        }, 
        {
            "location": "/api/1.0.13/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/1.0.13/#http-sink", 
            "text": "This extension publish the HTTP events in any HTTP method  POST, GET, PUT, DELETE  via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically.  Syntax  @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         publisher.url \n         The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use  https  instead of  http  in the publisher.url.e.g.,  http://localhost:8080/endpoint ,  https://localhost:8080/endpoint \n         \n         STRING \n         No \n         No \n     \n     \n         basic.auth.username \n         The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. \n           \n         STRING \n         Yes \n         No \n     \n     \n         basic.auth.password \n         The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. \n           \n         STRING \n         Yes \n         No \n     \n     \n         https.truststore.file \n         The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. \n         ${carbon.home}/resources/security/client-truststore.jks \n         STRING \n         Yes \n         No \n     \n     \n         https.truststore.password \n         The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. \n         wso2carbon \n         STRING \n         Yes \n         No \n     \n     \n         headers \n         The headers that should be included as a HTTP request headers. There can be any number of headers concatenated on following format. header1:value1#header2:value2. User can include content-type header if he need to any specific type for payload if not system get the mapping type as the content-Type header (ie. @map(xml):application/xml,@map(json):application/json,@map(text):plain/text ) and if user does not include any mapping type then system gets the 'plain/text' as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header. \n           \n         STRING \n         Yes \n         No \n     \n     \n         method \n         For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. \n         POST \n         STRING \n         Yes \n         No \n     \n     \n         socket.idle.timeout \n         Socket timeout value in millisecond \n         6000 \n         INT \n         Yes \n         No \n     \n     \n         chunk.disabled \n         port: Port number of the remote service \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         ssl.protocol \n         The SSL protocol version \n         TLS \n         STRING \n         Yes \n         No \n     \n     \n         parameters \n         Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ciphers \n         List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ssl.enabled.protocols \n         SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         client.enable.session.creation \n         Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         follow.redirect \n         Redirect related enabled. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         max.redirect.count \n         Maximum redirect count. \n         5 \n         INT \n         Yes \n         No \n     \n     \n         tls.store.type \n         TLS store type to be used. \n         JKS \n         STRING \n         Yes \n         No \n     \n     \n         proxy.host \n         Proxy server host \n         null \n         STRING \n         Yes \n         No \n     \n     \n         proxy.port \n         Proxy server port \n         null \n         STRING \n         Yes \n         No \n     \n     \n         proxy.username \n         Proxy server username \n         null \n         STRING \n         Yes \n         No \n     \n     \n         proxy.password \n         Proxy server password \n         null \n         STRING \n         Yes \n         No \n     \n     \n         client.bootstrap.configuration \n         Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" \n         TODO \n         STRING \n         Yes \n         No \n     \n     \n         client.bootstrap.nodelay \n         Http client no delay. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         client.bootstrap.keepalive \n         Http client keep alive. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         client.bootstrap.sendbuffersize \n         Http client send buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         client.bootstrap.recievebuffersize \n         Http client receive buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         client.bootstrap.connect.timeout \n         Http client connection timeout. \n         15000 \n         INT \n         Yes \n         No \n     \n     \n         client.bootstrap.socket.reuse \n         To enable http socket reuse. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         client.bootstrap.socket.timeout \n         Http client socket timeout. \n         15 \n         STRING \n         Yes \n         No \n     \n     \n         client.threadpool.configurations \n         Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" \n         TODO \n         STRING \n         Yes \n         No \n     \n     \n         client.connection.pool.count \n         Connection pool count. \n         0 \n         INT \n         Yes \n         No \n     \n     \n         client.max.active.connections.per.pool \n         Active connections per pool. \n         -1 \n         INT \n         Yes \n         No \n     \n     \n         client.min.idle.connections.per.pool \n         Minimum ideal connection per pool. \n         0 \n         INT \n         Yes \n         No \n     \n     \n         client.max.idle.connections.per.pool \n         Maximum ideal connection per pool. \n         100 \n         INT \n         Yes \n         No \n     \n     \n         client.min.eviction.idle.time \n         Minimum eviction idle time. \n         5 * 60 * 1000 \n         STRING \n         Yes \n         No \n     \n     \n         sender.thread.count \n         Http sender thread count. \n         20 \n         STRING \n         Yes \n         No \n     \n     \n         event.group.executor.thread.size \n         Event group executor thread size. \n         15 \n         STRING \n         Yes \n         No \n     \n     \n         max.wait.for.client.connection.pool \n         Maximum wait for client connection pool. \n         60000 \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         clientBootstrapBossGroupSize \n         property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. \n         4 \n         Any integer \n     \n     \n         clientBootstrapWorkerGroupSize \n         property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. \n         8 \n         Any integer \n     \n     \n         trustStoreLocation \n         The default truststore file path. \n         ${carbon.home}/resources/security/client-truststore.jks \n         Path to client-truststore.jks \n     \n     \n         trustStorePassword \n         The default truststore password. \n         wso2carbon \n         Truststore password \n       Examples  EXAMPLE 1  @sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers='{{headers}}',client.bootstrap.configuration= 'client.bootstrap.socket.timeout:20','client.bootstrap.worker.group.size:10' ,client.pool.configuration= 'client.connection.pool.count:10','client.max.active.connections.per.pool:1'  @map(type='xml' , @payload('{{payloadBody}}')))define stream FooStream (payloadBody String, method string, headers string);  If it is xml mapping expected input should be in following format for FooStream:{ events      event          symbol WSO2 /symbol          price 55.6 /price          volume 100 /volume      /event /events ,POST,Content-Length:24#Content-Location:USA#Retry-After:120}Above event will generate output as below.~Output http event payload events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ~Output http event headersContent-Length:24,Content-Location:'USA',Retry-After:120,Content-Type:'application/xml',HTTP_METHOD:'POST',~Output http event propertiesHTTP_METHOD:'POST',HOST:'localhost',PORT:8009PROTOCOL:'http'TO:'/foo'", 
            "title": "http (Sink)"
        }, 
        {
            "location": "/api/1.0.13/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.13/#http-source", 
            "text": "The HTTP source receives POST requests via HTTP or HTTPS in format such as  text ,  XML  and  JSON . If required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service.  Syntax  @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= STRING , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         receiver.url \n         The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format  http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format  https://localhost:8080/ streamName \n         http://0.0.0.0:9763/ / \n         STRING \n         Yes \n         No \n     \n     \n         basic.auth.enabled \n         If this is set to  true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false'  \n         false \n         STRING \n         Yes \n         No \n     \n     \n         worker.count \n         The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. \n         1 \n         STRING \n         Yes \n         No \n     \n     \n         socket.idle.timeout \n         Idle timeout for HTTP connection. \n         120000 \n         INT \n         Yes \n         No \n     \n     \n         ssl.verify.client \n         The type of client certificate verification. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ssl.protocol \n         ssl/tls related options \n         TLS \n         STRING \n         Yes \n         No \n     \n     \n         tls.store.type \n         TLS store type. \n         JKS \n         STRING \n         Yes \n         No \n     \n     \n         parameters \n         Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ciphers \n         List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ssl.enabled.protocols \n         SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         server.enable.session.creation \n         Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         server.supported.snimatchers \n         Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         server.suported.server.names \n         Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.configuration \n         Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" \n         null \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation \n         To enable the request size validation. \n         false \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.maximum.value \n         If request size is validated then maximum size. \n         Integer.MAX_VALUE \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.reject.status.code \n         If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. \n         401 \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.reject.message \n         If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. \n         Message is bigger than the valid size \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.reject.message.content.type \n         If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. \n         plain/text \n         STRING \n         Yes \n         No \n     \n     \n         header.size.validation \n         To enable the header size validation. \n         false \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.maximum.request.line \n         If header header validation is enabled then the maximum request line. \n         4096 \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.maximum.size \n         If header header validation is enabled then the maximum expected header size. \n         8192 \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.maximum.chunk.size \n         If header header validation is enabled then the maximum expected chunk size. \n         8192 \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.reject.status.code \n         401 \n         If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.reject.message \n         If header is exceed maximum size and header.size.validation is enabled then message to be send as response. \n         Message header is bigger than the valid size \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.reject.message.content.type \n         If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. \n         plain/text \n         STRING \n         Yes \n         No \n     \n     \n         server.bootstrap.configuration \n         Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" \n         null \n         OBJECT \n         Yes \n         No \n     \n     \n         server.bootstrap.nodelay \n         Http server no delay. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.keepalive \n         Http server keep alive. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.sendbuffersize \n         Http server send buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         server.bootstrap.recievebuffersize \n         Http server receive buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         server.bootstrap.connect.timeout \n         Http server connection timeout. \n         15000 \n         INT \n         Yes \n         No \n     \n     \n         server.bootstrap.socket.reuse \n         To enable http socket reuse. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.socket.timeout \n         Http server socket timeout. \n         15 \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.socket.backlog \n         THttp server socket backlog. \n         100 \n         BOOL \n         Yes \n         No \n     \n     \n         trace.log.enabled \n         Http traffic monitoring. \n         false \n         BOOL \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         serverBootstrapBossGroupSize \n         property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. \n         4 \n         Any integer \n     \n     \n         serverBootstrapWorkerGroupSize \n         property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. \n         8 \n         Any integer \n     \n     \n         defaultHost \n         The default host of the transport. \n         0.0.0.0 \n         Any valid host \n     \n     \n         defaultHttpPort \n         The default port if the default scheme is 'http'. \n         8280 \n         Any valid port \n     \n     \n         defaultHttpsPort \n         The default port if the default scheme is 'https'. \n         8243 \n         Any valid port \n     \n     \n         defaultScheme \n         The default protocol. \n         http \n         http https \n     \n     \n         keyStoreLocation \n         The default keystore file path. \n         ${carbon.home}/resources/security/wso2carbon.jks \n         Path to wso2carbon.jks file \n     \n     \n         keyStorePassword \n         The default keystore password. \n         wso2carbon \n         String of keystore password \n     \n     \n         certPassword \n         The default cert password. \n         wso2carbon \n         String of cert password \n       Examples  EXAMPLE 1  @source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' ,request.size.validation.configuration= request.size.validation:true ,server.bootstrap.configuration= server.bootstrap.socket.timeout:25  @map(type='xml'))\ndefine stream FooStream (symbol string, price float, volume long);  Above source listenerConfiguration performs a default XML input mapping. The expected input is as follows: events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events If basic authentication is enabled via the  basic.auth.enabled='true  setting, each input event is also expected to contain the  Authorization:'Basic encodeBase64(username:Password)'  header.", 
            "title": "http (Source)"
        }, 
        {
            "location": "/api/1.0.12/", 
            "text": "API Docs - v1.0.12\n\n\nSink\n\n\nhttp \n(Sink)\n\n\nThis extension publish the HTTP events in any HTTP method  POST, GET, PUT, DELETE  via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically.\n\n\n\nSyntax\n\n\n@sink(type=\nhttp\n, publisher.url=\nSTRING\n, basic.auth.username=\nSTRING\n, basic.auth.password=\nSTRING\n, https.truststore.file=\nSTRING\n, https.truststore.password=\nSTRING\n, headers=\nSTRING\n, method=\nSTRING\n, socket.idle.timeout=\nINT\n, chunk.disabled=\nBOOL\n, ssl.protocol=\nSTRING\n, parameters=\nSTRING\n, ciphers=\nSTRING\n, ssl.enabled.protocols=\nSTRING\n, client.enable.session.creation=\nSTRING\n, follow.redirect=\nBOOL\n, max.redirect.count=\nINT\n, tls.store.type=\nSTRING\n, proxy.host=\nSTRING\n, proxy.port=\nSTRING\n, proxy.username=\nSTRING\n, proxy.password=\nSTRING\n, client.bootstrap.configuration=\nSTRING\n, client.bootstrap.nodelay=\nBOOL\n, client.bootstrap.keepalive=\nBOOL\n, client.bootstrap.sendbuffersize=\nINT\n, client.bootstrap.recievebuffersize=\nINT\n, client.bootstrap.connect.timeout=\nINT\n, client.bootstrap.socket.reuse=\nBOOL\n, client.bootstrap.socket.timeout=\nSTRING\n, client.threadpool.configurations=\nSTRING\n, client.connection.pool.count=\nINT\n, client.max.active.connections.per.pool=\nINT\n, client.min.idle.connections.per.pool=\nINT\n, client.max.idle.connections.per.pool=\nINT\n, client.min.eviction.idle.time=\nSTRING\n, sender.thread.count=\nSTRING\n, event.group.executor.thread.size=\nSTRING\n, max.wait.for.client.connection.pool=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npublisher.url\n\n        \nThe URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use \nhttps\n instead of \nhttp\n in the publisher.url.e.g., \nhttp://localhost:8080/endpoint\n, \nhttps://localhost:8080/endpoint\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbasic.auth.username\n\n        \nThe username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI.\n\n        \n \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nbasic.auth.password\n\n        \nThe password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI.\n\n        \n \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nhttps.truststore.file\n\n        \nThe file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required.\n\n        \n${carbon.home}/resources/security/client-truststore.jks\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nhttps.truststore.password\n\n        \nThe password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password.\n\n        \nwso2carbon\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheaders\n\n        \nThe headers that should be included as a HTTP request headers. There can be any number of headers concatenated on following format. header1:value1#header2:value2. User can include content-type header if he need to any specific type for payload if not system get the mapping type as the content-Type header (ie. @map(xml):application/xml,@map(json):application/json,@map(text):plain/text ) and if user does not include any mapping type then system gets the 'plain/text' as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header.\n\n        \n \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmethod\n\n        \nFor HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header.\n\n        \nPOST\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsocket.idle.timeout\n\n        \nSocket timeout value in millisecond\n\n        \n6000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nchunk.disabled\n\n        \nport: Port number of the remote service\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.protocol\n\n        \nThe SSL protocol version\n\n        \nTLS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nparameters\n\n        \nParameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\"\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nciphers\n\n        \nList of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.enabled.protocols\n\n        \nSSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.enable.session.creation\n\n        \nEnable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfollow.redirect\n\n        \nRedirect related enabled.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.redirect.count\n\n        \nMaximum redirect count.\n\n        \n5\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.store.type\n\n        \nTLS store type to be used.\n\n        \nJKS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nproxy.host\n\n        \nProxy server host\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nproxy.port\n\n        \nProxy server port\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nproxy.username\n\n        \nProxy server username\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nproxy.password\n\n        \nProxy server password\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.configuration\n\n        \nClient bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\"\n\n        \nTODO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.nodelay\n\n        \nHttp client no delay.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.keepalive\n\n        \nHttp client keep alive.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.sendbuffersize\n\n        \nHttp client send buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.recievebuffersize\n\n        \nHttp client receive buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.connect.timeout\n\n        \nHttp client connection timeout.\n\n        \n15000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.socket.reuse\n\n        \nTo enable http socket reuse.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.socket.timeout\n\n        \nHttp client socket timeout.\n\n        \n15\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.threadpool.configurations\n\n        \nThread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\"\n\n        \nTODO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.connection.pool.count\n\n        \nConnection pool count.\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.max.active.connections.per.pool\n\n        \nActive connections per pool.\n\n        \n-1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.min.idle.connections.per.pool\n\n        \nMinimum ideal connection per pool.\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.max.idle.connections.per.pool\n\n        \nMaximum ideal connection per pool.\n\n        \n100\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.min.eviction.idle.time\n\n        \nMinimum eviction idle time.\n\n        \n5 * 60 * 1000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsender.thread.count\n\n        \nHttp sender thread count.\n\n        \n20\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nevent.group.executor.thread.size\n\n        \nEvent group executor thread size.\n\n        \n15\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.wait.for.client.connection.pool\n\n        \nMaximum wait for client connection pool.\n\n        \n60000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nclientBootstrapBossGroupSize\n\n        \nproperty to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads.\n\n        \n4\n\n        \nAny integer\n\n    \n\n    \n\n        \nclientBootstrapWorkerGroupSize\n\n        \nproperty to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode.\n\n        \n8\n\n        \nAny integer\n\n    \n\n    \n\n        \ntrustStoreLocation\n\n        \nThe default truststore file path.\n\n        \n${carbon.home}/resources/security/client-truststore.jks\n\n        \nPath to client-truststore.jks\n\n    \n\n    \n\n        \ntrustStorePassword\n\n        \nThe default truststore password.\n\n        \nwso2carbon\n\n        \nTruststore password\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers='{{headers}}',client.bootstrap.configuration=\n'client.bootstrap.socket.timeout:20','client.bootstrap.worker.group.size:10'\n,client.pool.configuration=\n'client.connection.pool.count:10','client.max.active.connections.per.pool:1'\n @map(type='xml' , @payload('{{payloadBody}}')))define stream FooStream (payloadBody String, method string, headers string);\n\n\n\n\n\nIf it is xml mapping expected input should be in following format for FooStream:{\nevents\n    \nevent\n        \nsymbol\nWSO2\n/symbol\n        \nprice\n55.6\n/price\n        \nvolume\n100\n/volume\n    \n/event\n/events\n,POST,Content-Length:24#Content-Location:USA#Retry-After:120}Above event will generate output as below.~Output http event payload\nevents\nevent\nsymbol\nWSO2\n/symbol\nprice\n55.6\n/price\nvolume\n100\n/volume\n/event\n/events\n~Output http event headersContent-Length:24,Content-Location:'USA',Retry-After:120,Content-Type:'application/xml',HTTP_METHOD:'POST',~Output http event propertiesHTTP_METHOD:'POST',HOST:'localhost',PORT:8009PROTOCOL:'http'TO:'/foo'\n\n\n\nSource\n\n\nhttp \n(Source)\n\n\nThe HTTP source receives POST requests via HTTP or HTTPS in format such as \ntext\n, \nXML\n and \nJSON\n. If required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service.\n\n\n\nSyntax\n\n\n@source(type=\nhttp\n, receiver.url=\nSTRING\n, basic.auth.enabled=\nSTRING\n, worker.count=\nSTRING\n, socket.idle.timeout=\nINT\n, ssl.verify.client=\nSTRING\n, ssl.protocol=\nSTRING\n, tls.store.type=\nSTRING\n, parameters=\nSTRING\n, ciphers=\nSTRING\n, ssl.enabled.protocols=\nSTRING\n, server.enable.session.creation=\nSTRING\n, server.supported.snimatchers=\nSTRING\n, server.suported.server.names=\nSTRING\n, request.size.validation.configuration=\nSTRING\n, request.size.validation=\nSTRING\n, request.size.validation.maximum.value=\nSTRING\n, request.size.validation.reject.status.code=\nSTRING\n, request.size.validation.reject.message=\nSTRING\n, request.size.validation.reject.message.content.type=\nSTRING\n, header.size.validation=\nSTRING\n, header.validation.maximum.request.line=\nSTRING\n, header.validation.maximum.size=\nSTRING\n, header.validation.maximum.chunk.size=\nSTRING\n, header.validation.reject.status.code=\nSTRING\n, header.validation.reject.message=\nSTRING\n, header.validation.reject.message.content.type=\nSTRING\n, server.bootstrap.configuration=\nOBJECT\n, server.bootstrap.nodelay=\nBOOL\n, server.bootstrap.keepalive=\nBOOL\n, server.bootstrap.sendbuffersize=\nINT\n, server.bootstrap.recievebuffersize=\nINT\n, server.bootstrap.connect.timeout=\nINT\n, server.bootstrap.socket.reuse=\nBOOL\n, server.bootstrap.socket.timeout=\nBOOL\n, server.bootstrap.socket.backlog=\nBOOL\n, trace.log.enabled=\nBOOL\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nreceiver.url\n\n        \nThe URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format \nhttp://0.0.0.0:9763/\nappNAme\n/\nstreamName\nIf the user want to use SSL the url should be given in following format \nhttps://localhost:8080/\nstreamName\n\n        \nhttp://0.0.0.0:9763/\n/\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nbasic.auth.enabled\n\n        \nIf this is set to \ntrue\n, basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' \n\n        \nfalse\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nworker.count\n\n        \nThe number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering.\n\n        \n1\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsocket.idle.timeout\n\n        \nIdle timeout for HTTP connection.\n\n        \n120000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.verify.client\n\n        \nThe type of client certificate verification.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.protocol\n\n        \nssl/tls related options\n\n        \nTLS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.store.type\n\n        \nTLS store type.\n\n        \nJKS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nparameters\n\n        \nParameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\"\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nciphers\n\n        \nList of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.enabled.protocols\n\n        \nSSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.enable.session.creation\n\n        \nEnable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.supported.snimatchers\n\n        \nHttp SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.suported.server.names\n\n        \nHttp supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.configuration\n\n        \nParameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\"\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation\n\n        \nTo enable the request size validation.\n\n        \nfalse\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.maximum.value\n\n        \nIf request size is validated then maximum size.\n\n        \nInteger.MAX_VALUE\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.reject.status.code\n\n        \nIf request is exceed maximum size and request.size.validation is enabled then status code to be send as response.\n\n        \n401\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.reject.message\n\n        \nIf request is exceed maximum size and request.size.validation is enabled then status message to be send as response.\n\n        \nMessage is bigger than the valid size\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.reject.message.content.type\n\n        \nIf request is exceed maximum size and request.size.validation is enabled then content type to be send as response.\n\n        \nplain/text\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.size.validation\n\n        \nTo enable the header size validation.\n\n        \nfalse\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.maximum.request.line\n\n        \nIf header header validation is enabled then the maximum request line.\n\n        \n4096\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.maximum.size\n\n        \nIf header header validation is enabled then the maximum expected header size.\n\n        \n8192\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.maximum.chunk.size\n\n        \nIf header header validation is enabled then the maximum expected chunk size.\n\n        \n8192\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.reject.status.code\n\n        \n401\n\n        \nIf header is exceed maximum size and header.size.validation is enabled then status code to be send as response.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.reject.message\n\n        \nIf header is exceed maximum size and header.size.validation is enabled then message to be send as response.\n\n        \nMessage header is bigger than the valid size\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.reject.message.content.type\n\n        \nIf header is exceed maximum size and header.size.validation is enabled then content type to be send as response.\n\n        \nplain/text\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.configuration\n\n        \nParameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\"\n\n        \nnull\n\n        \nOBJECT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.nodelay\n\n        \nHttp server no delay.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.keepalive\n\n        \nHttp server keep alive.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.sendbuffersize\n\n        \nHttp server send buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.recievebuffersize\n\n        \nHttp server receive buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.connect.timeout\n\n        \nHttp server connection timeout.\n\n        \n15000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.socket.reuse\n\n        \nTo enable http socket reuse.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.socket.timeout\n\n        \nHttp server socket timeout.\n\n        \n15\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.socket.backlog\n\n        \nTHttp server socket backlog.\n\n        \n100\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntrace.log.enabled\n\n        \nHttp traffic monitoring.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nserverBootstrapBossGroupSize\n\n        \nproperty to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads.\n\n        \n4\n\n        \nAny integer\n\n    \n\n    \n\n        \nserverBootstrapWorkerGroupSize\n\n        \nproperty to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode.\n\n        \n8\n\n        \nAny integer\n\n    \n\n    \n\n        \ndefaultHost\n\n        \nThe default host of the transport.\n\n        \n0.0.0.0\n\n        \nAny valid host\n\n    \n\n    \n\n        \ndefaultHttpPort\n\n        \nThe default port if the default scheme is 'http'.\n\n        \n8280\n\n        \nAny valid port\n\n    \n\n    \n\n        \ndefaultHttpsPort\n\n        \nThe default port if the default scheme is 'https'.\n\n        \n8243\n\n        \nAny valid port\n\n    \n\n    \n\n        \ndefaultScheme\n\n        \nThe default protocol.\n\n        \nhttp\n\n        \nhttp\nhttps\n\n    \n\n    \n\n        \nkeyStoreLocation\n\n        \nThe default keystore file path.\n\n        \n${carbon.home}/resources/security/wso2carbon.jks\n\n        \nPath to wso2carbon.jks file\n\n    \n\n    \n\n        \nkeyStorePassword\n\n        \nThe default keystore password.\n\n        \nwso2carbon\n\n        \nString of keystore password\n\n    \n\n    \n\n        \ncertPassword\n\n        \nThe default cert password.\n\n        \nwso2carbon\n\n        \nString of cert password\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters=\n'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2'\n,request.size.validation.configuration=\nrequest.size.validation:true\n,server.bootstrap.configuration=\nserver.bootstrap.socket.timeout:25\n @map(type='xml'))\ndefine stream FooStream (symbol string, price float, volume long);\n\n\n\n\n\nAbove source listenerConfiguration performs a default XML input mapping. The expected input is as follows:\nevents\nevent\nsymbol\nWSO2\n/symbol\nprice\n55.6\n/price\nvolume\n100\n/volume\n/event\n/events\nIf basic authentication is enabled via the \nbasic.auth.enabled='true\n setting, each input event is also expected to contain the \nAuthorization:'Basic encodeBase64(username:Password)'\n header.", 
            "title": "1.0.12"
        }, 
        {
            "location": "/api/1.0.12/#api-docs-v1012", 
            "text": "", 
            "title": "API Docs - v1.0.12"
        }, 
        {
            "location": "/api/1.0.12/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/1.0.12/#http-sink", 
            "text": "This extension publish the HTTP events in any HTTP method  POST, GET, PUT, DELETE  via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically.  Syntax  @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         publisher.url \n         The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use  https  instead of  http  in the publisher.url.e.g.,  http://localhost:8080/endpoint ,  https://localhost:8080/endpoint \n         \n         STRING \n         No \n         No \n     \n     \n         basic.auth.username \n         The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. \n           \n         STRING \n         Yes \n         No \n     \n     \n         basic.auth.password \n         The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. \n           \n         STRING \n         Yes \n         No \n     \n     \n         https.truststore.file \n         The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. \n         ${carbon.home}/resources/security/client-truststore.jks \n         STRING \n         Yes \n         No \n     \n     \n         https.truststore.password \n         The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. \n         wso2carbon \n         STRING \n         Yes \n         No \n     \n     \n         headers \n         The headers that should be included as a HTTP request headers. There can be any number of headers concatenated on following format. header1:value1#header2:value2. User can include content-type header if he need to any specific type for payload if not system get the mapping type as the content-Type header (ie. @map(xml):application/xml,@map(json):application/json,@map(text):plain/text ) and if user does not include any mapping type then system gets the 'plain/text' as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header. \n           \n         STRING \n         Yes \n         No \n     \n     \n         method \n         For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. \n         POST \n         STRING \n         Yes \n         No \n     \n     \n         socket.idle.timeout \n         Socket timeout value in millisecond \n         6000 \n         INT \n         Yes \n         No \n     \n     \n         chunk.disabled \n         port: Port number of the remote service \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         ssl.protocol \n         The SSL protocol version \n         TLS \n         STRING \n         Yes \n         No \n     \n     \n         parameters \n         Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ciphers \n         List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ssl.enabled.protocols \n         SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         client.enable.session.creation \n         Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         follow.redirect \n         Redirect related enabled. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         max.redirect.count \n         Maximum redirect count. \n         5 \n         INT \n         Yes \n         No \n     \n     \n         tls.store.type \n         TLS store type to be used. \n         JKS \n         STRING \n         Yes \n         No \n     \n     \n         proxy.host \n         Proxy server host \n         null \n         STRING \n         Yes \n         No \n     \n     \n         proxy.port \n         Proxy server port \n         null \n         STRING \n         Yes \n         No \n     \n     \n         proxy.username \n         Proxy server username \n         null \n         STRING \n         Yes \n         No \n     \n     \n         proxy.password \n         Proxy server password \n         null \n         STRING \n         Yes \n         No \n     \n     \n         client.bootstrap.configuration \n         Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" \n         TODO \n         STRING \n         Yes \n         No \n     \n     \n         client.bootstrap.nodelay \n         Http client no delay. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         client.bootstrap.keepalive \n         Http client keep alive. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         client.bootstrap.sendbuffersize \n         Http client send buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         client.bootstrap.recievebuffersize \n         Http client receive buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         client.bootstrap.connect.timeout \n         Http client connection timeout. \n         15000 \n         INT \n         Yes \n         No \n     \n     \n         client.bootstrap.socket.reuse \n         To enable http socket reuse. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         client.bootstrap.socket.timeout \n         Http client socket timeout. \n         15 \n         STRING \n         Yes \n         No \n     \n     \n         client.threadpool.configurations \n         Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" \n         TODO \n         STRING \n         Yes \n         No \n     \n     \n         client.connection.pool.count \n         Connection pool count. \n         0 \n         INT \n         Yes \n         No \n     \n     \n         client.max.active.connections.per.pool \n         Active connections per pool. \n         -1 \n         INT \n         Yes \n         No \n     \n     \n         client.min.idle.connections.per.pool \n         Minimum ideal connection per pool. \n         0 \n         INT \n         Yes \n         No \n     \n     \n         client.max.idle.connections.per.pool \n         Maximum ideal connection per pool. \n         100 \n         INT \n         Yes \n         No \n     \n     \n         client.min.eviction.idle.time \n         Minimum eviction idle time. \n         5 * 60 * 1000 \n         STRING \n         Yes \n         No \n     \n     \n         sender.thread.count \n         Http sender thread count. \n         20 \n         STRING \n         Yes \n         No \n     \n     \n         event.group.executor.thread.size \n         Event group executor thread size. \n         15 \n         STRING \n         Yes \n         No \n     \n     \n         max.wait.for.client.connection.pool \n         Maximum wait for client connection pool. \n         60000 \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         clientBootstrapBossGroupSize \n         property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. \n         4 \n         Any integer \n     \n     \n         clientBootstrapWorkerGroupSize \n         property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. \n         8 \n         Any integer \n     \n     \n         trustStoreLocation \n         The default truststore file path. \n         ${carbon.home}/resources/security/client-truststore.jks \n         Path to client-truststore.jks \n     \n     \n         trustStorePassword \n         The default truststore password. \n         wso2carbon \n         Truststore password \n       Examples  EXAMPLE 1  @sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers='{{headers}}',client.bootstrap.configuration= 'client.bootstrap.socket.timeout:20','client.bootstrap.worker.group.size:10' ,client.pool.configuration= 'client.connection.pool.count:10','client.max.active.connections.per.pool:1'  @map(type='xml' , @payload('{{payloadBody}}')))define stream FooStream (payloadBody String, method string, headers string);  If it is xml mapping expected input should be in following format for FooStream:{ events      event          symbol WSO2 /symbol          price 55.6 /price          volume 100 /volume      /event /events ,POST,Content-Length:24#Content-Location:USA#Retry-After:120}Above event will generate output as below.~Output http event payload events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ~Output http event headersContent-Length:24,Content-Location:'USA',Retry-After:120,Content-Type:'application/xml',HTTP_METHOD:'POST',~Output http event propertiesHTTP_METHOD:'POST',HOST:'localhost',PORT:8009PROTOCOL:'http'TO:'/foo'", 
            "title": "http (Sink)"
        }, 
        {
            "location": "/api/1.0.12/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.12/#http-source", 
            "text": "The HTTP source receives POST requests via HTTP or HTTPS in format such as  text ,  XML  and  JSON . If required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service.  Syntax  @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= STRING , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         receiver.url \n         The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format  http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format  https://localhost:8080/ streamName \n         http://0.0.0.0:9763/ / \n         STRING \n         Yes \n         No \n     \n     \n         basic.auth.enabled \n         If this is set to  true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false'  \n         false \n         STRING \n         Yes \n         No \n     \n     \n         worker.count \n         The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. \n         1 \n         STRING \n         Yes \n         No \n     \n     \n         socket.idle.timeout \n         Idle timeout for HTTP connection. \n         120000 \n         INT \n         Yes \n         No \n     \n     \n         ssl.verify.client \n         The type of client certificate verification. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ssl.protocol \n         ssl/tls related options \n         TLS \n         STRING \n         Yes \n         No \n     \n     \n         tls.store.type \n         TLS store type. \n         JKS \n         STRING \n         Yes \n         No \n     \n     \n         parameters \n         Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ciphers \n         List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ssl.enabled.protocols \n         SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         server.enable.session.creation \n         Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         server.supported.snimatchers \n         Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         server.suported.server.names \n         Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.configuration \n         Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" \n         null \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation \n         To enable the request size validation. \n         false \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.maximum.value \n         If request size is validated then maximum size. \n         Integer.MAX_VALUE \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.reject.status.code \n         If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. \n         401 \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.reject.message \n         If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. \n         Message is bigger than the valid size \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.reject.message.content.type \n         If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. \n         plain/text \n         STRING \n         Yes \n         No \n     \n     \n         header.size.validation \n         To enable the header size validation. \n         false \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.maximum.request.line \n         If header header validation is enabled then the maximum request line. \n         4096 \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.maximum.size \n         If header header validation is enabled then the maximum expected header size. \n         8192 \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.maximum.chunk.size \n         If header header validation is enabled then the maximum expected chunk size. \n         8192 \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.reject.status.code \n         401 \n         If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.reject.message \n         If header is exceed maximum size and header.size.validation is enabled then message to be send as response. \n         Message header is bigger than the valid size \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.reject.message.content.type \n         If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. \n         plain/text \n         STRING \n         Yes \n         No \n     \n     \n         server.bootstrap.configuration \n         Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" \n         null \n         OBJECT \n         Yes \n         No \n     \n     \n         server.bootstrap.nodelay \n         Http server no delay. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.keepalive \n         Http server keep alive. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.sendbuffersize \n         Http server send buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         server.bootstrap.recievebuffersize \n         Http server receive buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         server.bootstrap.connect.timeout \n         Http server connection timeout. \n         15000 \n         INT \n         Yes \n         No \n     \n     \n         server.bootstrap.socket.reuse \n         To enable http socket reuse. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.socket.timeout \n         Http server socket timeout. \n         15 \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.socket.backlog \n         THttp server socket backlog. \n         100 \n         BOOL \n         Yes \n         No \n     \n     \n         trace.log.enabled \n         Http traffic monitoring. \n         false \n         BOOL \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         serverBootstrapBossGroupSize \n         property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. \n         4 \n         Any integer \n     \n     \n         serverBootstrapWorkerGroupSize \n         property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. \n         8 \n         Any integer \n     \n     \n         defaultHost \n         The default host of the transport. \n         0.0.0.0 \n         Any valid host \n     \n     \n         defaultHttpPort \n         The default port if the default scheme is 'http'. \n         8280 \n         Any valid port \n     \n     \n         defaultHttpsPort \n         The default port if the default scheme is 'https'. \n         8243 \n         Any valid port \n     \n     \n         defaultScheme \n         The default protocol. \n         http \n         http https \n     \n     \n         keyStoreLocation \n         The default keystore file path. \n         ${carbon.home}/resources/security/wso2carbon.jks \n         Path to wso2carbon.jks file \n     \n     \n         keyStorePassword \n         The default keystore password. \n         wso2carbon \n         String of keystore password \n     \n     \n         certPassword \n         The default cert password. \n         wso2carbon \n         String of cert password \n       Examples  EXAMPLE 1  @source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' ,request.size.validation.configuration= request.size.validation:true ,server.bootstrap.configuration= server.bootstrap.socket.timeout:25  @map(type='xml'))\ndefine stream FooStream (symbol string, price float, volume long);  Above source listenerConfiguration performs a default XML input mapping. The expected input is as follows: events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events If basic authentication is enabled via the  basic.auth.enabled='true  setting, each input event is also expected to contain the  Authorization:'Basic encodeBase64(username:Password)'  header.", 
            "title": "http (Source)"
        }, 
        {
            "location": "/api/1.0.11/", 
            "text": "API Docs - v1.0.11\n\n\nSink\n\n\nhttp \n(Sink)\n\n\nThis extension publish the HTTP events in any HTTP method  POST, GET, PUT, DELETE  via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically.\n\n\n\nSyntax\n\n\n@sink(type=\nhttp\n, publisher.url=\nSTRING\n, basic.auth.username=\nSTRING\n, basic.auth.password=\nSTRING\n, https.truststore.file=\nSTRING\n, https.truststore.password=\nSTRING\n, headers=\nSTRING\n, method=\nSTRING\n, socket.idle.timeout=\nINT\n, chunk.disabled=\nBOOL\n, ssl.protocol=\nSTRING\n, parameters=\nSTRING\n, ciphers=\nSTRING\n, ssl.enabled.protocols=\nSTRING\n, client.enable.session.creation=\nSTRING\n, follow.redirect=\nBOOL\n, max.redirect.count=\nINT\n, tls.store.type=\nSTRING\n, proxy.host=\nSTRING\n, proxy.port=\nSTRING\n, proxy.username=\nSTRING\n, proxy.password=\nSTRING\n, client.bootstrap.configuration=\nSTRING\n, client.bootstrap.nodelay=\nBOOL\n, client.bootstrap.keepalive=\nBOOL\n, client.bootstrap.sendbuffersize=\nINT\n, client.bootstrap.recievebuffersize=\nINT\n, client.bootstrap.connect.timeout=\nINT\n, client.bootstrap.socket.reuse=\nBOOL\n, client.bootstrap.socket.timeout=\nSTRING\n, client.threadpool.configurations=\nSTRING\n, client.connection.pool.count=\nINT\n, client.max.active.connections.per.pool=\nINT\n, client.min.idle.connections.per.pool=\nINT\n, client.max.idle.connections.per.pool=\nINT\n, client.min.eviction.idle.time=\nSTRING\n, sender.thread.count=\nSTRING\n, event.group.executor.thread.size=\nSTRING\n, max.wait.for.client.connection.pool=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npublisher.url\n\n        \nThe URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use \nhttps\n instead of \nhttp\n in the publisher.url.e.g., \nhttp://localhost:8080/endpoint\n, \nhttps://localhost:8080/endpoint\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbasic.auth.username\n\n        \nThe username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI.\n\n        \n \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nbasic.auth.password\n\n        \nThe password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI.\n\n        \n \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nhttps.truststore.file\n\n        \nThe file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required.\n\n        \n${carbon.home}/resources/security/client-truststore.jks\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nhttps.truststore.password\n\n        \nThe password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password.\n\n        \nwso2carbon\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheaders\n\n        \nThe headers that should be included as a HTTP request headers. There can be any number of headers concatenated on following format. header1:value1#header2:value2. User can include content-type header if he need to any specific type for payload if not system get the mapping type as the content-Type header (ie. @map(xml):application/xml,@map(json):application/json,@map(text):plain/text ) and if user does not include any mapping type then system gets the 'plain/text' as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header.\n\n        \n \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmethod\n\n        \nFor HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header.\n\n        \nPOST\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsocket.idle.timeout\n\n        \nSocket timeout value in millisecond\n\n        \n6000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nchunk.disabled\n\n        \nport: Port number of the remote service\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.protocol\n\n        \nThe SSL protocol version\n\n        \nTLS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nparameters\n\n        \nParameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\"\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nciphers\n\n        \nList of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.enabled.protocols\n\n        \nSSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.enable.session.creation\n\n        \nEnable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfollow.redirect\n\n        \nRedirect related enabled.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.redirect.count\n\n        \nMaximum redirect count.\n\n        \n5\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.store.type\n\n        \nTLS store type to be used.\n\n        \nJKS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nproxy.host\n\n        \nProxy server host\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nproxy.port\n\n        \nProxy server port\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nproxy.username\n\n        \nProxy server username\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nproxy.password\n\n        \nProxy server password\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.configuration\n\n        \nClient bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\"\n\n        \nTODO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.nodelay\n\n        \nHttp client no delay.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.keepalive\n\n        \nHttp client keep alive.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.sendbuffersize\n\n        \nHttp client send buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.recievebuffersize\n\n        \nHttp client receive buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.connect.timeout\n\n        \nHttp client connection timeout.\n\n        \n15000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.socket.reuse\n\n        \nTo enable http socket reuse.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.socket.timeout\n\n        \nHttp client socket timeout.\n\n        \n15\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.threadpool.configurations\n\n        \nThread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\"\n\n        \nTODO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.connection.pool.count\n\n        \nConnection pool count.\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.max.active.connections.per.pool\n\n        \nActive connections per pool.\n\n        \n-1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.min.idle.connections.per.pool\n\n        \nMinimum ideal connection per pool.\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.max.idle.connections.per.pool\n\n        \nMaximum ideal connection per pool.\n\n        \n100\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.min.eviction.idle.time\n\n        \nMinimum eviction idle time.\n\n        \n5 * 60 * 1000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsender.thread.count\n\n        \nHttp sender thread count.\n\n        \n20\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nevent.group.executor.thread.size\n\n        \nEvent group executor thread size.\n\n        \n15\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.wait.for.client.connection.pool\n\n        \nMaximum wait for client connection pool.\n\n        \n60000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nclientBootstrapBossGroupSize\n\n        \nproperty to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads.\n\n        \n4\n\n        \nAny integer\n\n    \n\n    \n\n        \nclientBootstrapWorkerGroupSize\n\n        \nproperty to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode.\n\n        \n8\n\n        \nAny integer\n\n    \n\n    \n\n        \ntrustStoreLocation\n\n        \nThe default truststore file path.\n\n        \n${carbon.home}/resources/security/client-truststore.jks\n\n        \nPath to client-truststore.jks\n\n    \n\n    \n\n        \ntrustStorePassword\n\n        \nThe default truststore password.\n\n        \nwso2carbon\n\n        \nTruststore password\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers='{{headers}}',client.bootstrap.configuration=\n'client.bootstrap.socket.timeout:20','client.bootstrap.worker.group.size:10'\n,client.pool.configuration=\n'client.connection.pool.count:10','client.max.active.connections.per.pool:1'\n @map(type='xml' , @payload('{{payloadBody}}')))define stream FooStream (payloadBody String, method string, headers string);\n\n\n\n\n\nIf it is xml mapping expected input should be in following format for FooStream:{\nevents\n    \nevent\n        \nsymbol\nWSO2\n/symbol\n        \nprice\n55.6\n/price\n        \nvolume\n100\n/volume\n    \n/event\n/events\n,POST,Content-Length:24#Content-Location:USA#Retry-After:120}Above event will generate output as below.~Output http event payload\nevents\nevent\nsymbol\nWSO2\n/symbol\nprice\n55.6\n/price\nvolume\n100\n/volume\n/event\n/events\n~Output http event headersContent-Length:24,Content-Location:'USA',Retry-After:120,Content-Type:'application/xml',HTTP_METHOD:'POST',~Output http event propertiesHTTP_METHOD:'POST',HOST:'localhost',PORT:8009PROTOCOL:'http'TO:'/foo'\n\n\n\nSource\n\n\nhttp \n(Source)\n\n\nThe HTTP source receives POST requests via HTTP or HTTPS in format such as \ntext\n, \nXML\n and \nJSON\n. If required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service.\n\n\n\nSyntax\n\n\n@source(type=\nhttp\n, receiver.url=\nSTRING\n, basic.auth.enabled=\nSTRING\n, worker.count=\nSTRING\n, socket.idle.timeout=\nINT\n, ssl.verify.client=\nSTRING\n, ssl.protocol=\nSTRING\n, tls.store.type=\nSTRING\n, parameters=\nSTRING\n, ciphers=\nSTRING\n, ssl.enabled.protocols=\nSTRING\n, server.enable.session.creation=\nSTRING\n, server.supported.snimatchers=\nSTRING\n, server.suported.server.names=\nSTRING\n, request.size.validation.configuration=\nSTRING\n, request.size.validation=\nSTRING\n, request.size.validation.maximum.value=\nSTRING\n, request.size.validation.reject.status.code=\nSTRING\n, request.size.validation.reject.message=\nSTRING\n, request.size.validation.reject.message.content.type=\nSTRING\n, header.size.validation=\nSTRING\n, header.validation.maximum.request.line=\nSTRING\n, header.validation.maximum.size=\nSTRING\n, header.validation.maximum.chunk.size=\nSTRING\n, header.validation.reject.status.code=\nSTRING\n, header.validation.reject.message=\nSTRING\n, header.validation.reject.message.content.type=\nSTRING\n, server.bootstrap.configuration=\nOBJECT\n, server.bootstrap.nodelay=\nBOOL\n, server.bootstrap.keepalive=\nBOOL\n, server.bootstrap.sendbuffersize=\nINT\n, server.bootstrap.recievebuffersize=\nINT\n, server.bootstrap.connect.timeout=\nINT\n, server.bootstrap.socket.reuse=\nBOOL\n, server.bootstrap.socket.timeout=\nBOOL\n, server.bootstrap.socket.backlog=\nBOOL\n, trace.log.enabled=\nBOOL\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nreceiver.url\n\n        \nThe URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format \nhttp://0.0.0.0:9763/\nappNAme\n/\nstreamName\nIf the user want to use SSL the url should be given in following format \nhttps://localhost:8080/\nstreamName\n\n        \nhttp://0.0.0.0:9763/\n/\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nbasic.auth.enabled\n\n        \nIf this is set to \ntrue\n, basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' \n\n        \nfalse\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nworker.count\n\n        \nThe number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering.\n\n        \n1\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsocket.idle.timeout\n\n        \nIdle timeout for HTTP connection.\n\n        \n120000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.verify.client\n\n        \nThe type of client certificate verification.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.protocol\n\n        \nssl/tls related options\n\n        \nTLS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.store.type\n\n        \nTLS store type.\n\n        \nJKS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nparameters\n\n        \nParameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\"\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nciphers\n\n        \nList of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.enabled.protocols\n\n        \nSSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.enable.session.creation\n\n        \nEnable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.supported.snimatchers\n\n        \nHttp SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.suported.server.names\n\n        \nHttp supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.configuration\n\n        \nParameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\"\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation\n\n        \nTo enable the request size validation.\n\n        \nfalse\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.maximum.value\n\n        \nIf request size is validated then maximum size.\n\n        \nInteger.MAX_VALUE\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.reject.status.code\n\n        \nIf request is exceed maximum size and request.size.validation is enabled then status code to be send as response.\n\n        \n401\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.reject.message\n\n        \nIf request is exceed maximum size and request.size.validation is enabled then status message to be send as response.\n\n        \nMessage is bigger than the valid size\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.reject.message.content.type\n\n        \nIf request is exceed maximum size and request.size.validation is enabled then content type to be send as response.\n\n        \nplain/text\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.size.validation\n\n        \nTo enable the header size validation.\n\n        \nfalse\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.maximum.request.line\n\n        \nIf header header validation is enabled then the maximum request line.\n\n        \n4096\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.maximum.size\n\n        \nIf header header validation is enabled then the maximum expected header size.\n\n        \n8192\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.maximum.chunk.size\n\n        \nIf header header validation is enabled then the maximum expected chunk size.\n\n        \n8192\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.reject.status.code\n\n        \n401\n\n        \nIf header is exceed maximum size and header.size.validation is enabled then status code to be send as response.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.reject.message\n\n        \nIf header is exceed maximum size and header.size.validation is enabled then message to be send as response.\n\n        \nMessage header is bigger than the valid size\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.reject.message.content.type\n\n        \nIf header is exceed maximum size and header.size.validation is enabled then content type to be send as response.\n\n        \nplain/text\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.configuration\n\n        \nParameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\"\n\n        \nnull\n\n        \nOBJECT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.nodelay\n\n        \nHttp server no delay.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.keepalive\n\n        \nHttp server keep alive.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.sendbuffersize\n\n        \nHttp server send buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.recievebuffersize\n\n        \nHttp server receive buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.connect.timeout\n\n        \nHttp server connection timeout.\n\n        \n15000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.socket.reuse\n\n        \nTo enable http socket reuse.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.socket.timeout\n\n        \nHttp server socket timeout.\n\n        \n15\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.socket.backlog\n\n        \nTHttp server socket backlog.\n\n        \n100\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntrace.log.enabled\n\n        \nHttp traffic monitoring.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nserverBootstrapBossGroupSize\n\n        \nproperty to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads.\n\n        \n4\n\n        \nAny integer\n\n    \n\n    \n\n        \nserverBootstrapWorkerGroupSize\n\n        \nproperty to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode.\n\n        \n8\n\n        \nAny integer\n\n    \n\n    \n\n        \ndefaultHost\n\n        \nThe default host of the transport.\n\n        \n0.0.0.0\n\n        \nAny valid host\n\n    \n\n    \n\n        \ndefaultHttpPort\n\n        \nThe default port if the default scheme is 'http'.\n\n        \n8280\n\n        \nAny valid port\n\n    \n\n    \n\n        \ndefaultHttpsPort\n\n        \nThe default port if the default scheme is 'https'.\n\n        \n8243\n\n        \nAny valid port\n\n    \n\n    \n\n        \ndefaultScheme\n\n        \nThe default protocol.\n\n        \nhttp\n\n        \nhttp\nhttps\n\n    \n\n    \n\n        \nkeyStoreLocation\n\n        \nThe default keystore file path.\n\n        \n${carbon.home}/resources/security/wso2carbon.jks\n\n        \nPath to wso2carbon.jks file\n\n    \n\n    \n\n        \nkeyStorePassword\n\n        \nThe default keystore password.\n\n        \nwso2carbon\n\n        \nString of keystore password\n\n    \n\n    \n\n        \ncertPassword\n\n        \nThe default cert password.\n\n        \nwso2carbon\n\n        \nString of cert password\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters=\n'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2'\n,request.size.validation.configuration=\nrequest.size.validation:true\n,server.bootstrap.configuration=\nserver.bootstrap.socket.timeout:25\n @map(type='xml'))\ndefine stream FooStream (symbol string, price float, volume long);\n\n\n\n\n\nAbove source listenerConfiguration performs a default XML input mapping. The expected input is as follows:\nevents\nevent\nsymbol\nWSO2\n/symbol\nprice\n55.6\n/price\nvolume\n100\n/volume\n/event\n/events\nIf basic authentication is enabled via the \nbasic.auth.enabled='true\n setting, each input event is also expected to contain the \nAuthorization:'Basic encodeBase64(username:Password)'\n header.", 
            "title": "1.0.11"
        }, 
        {
            "location": "/api/1.0.11/#api-docs-v1011", 
            "text": "", 
            "title": "API Docs - v1.0.11"
        }, 
        {
            "location": "/api/1.0.11/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/1.0.11/#http-sink", 
            "text": "This extension publish the HTTP events in any HTTP method  POST, GET, PUT, DELETE  via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically.  Syntax  @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         publisher.url \n         The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use  https  instead of  http  in the publisher.url.e.g.,  http://localhost:8080/endpoint ,  https://localhost:8080/endpoint \n         \n         STRING \n         No \n         No \n     \n     \n         basic.auth.username \n         The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. \n           \n         STRING \n         Yes \n         No \n     \n     \n         basic.auth.password \n         The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. \n           \n         STRING \n         Yes \n         No \n     \n     \n         https.truststore.file \n         The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. \n         ${carbon.home}/resources/security/client-truststore.jks \n         STRING \n         Yes \n         No \n     \n     \n         https.truststore.password \n         The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. \n         wso2carbon \n         STRING \n         Yes \n         No \n     \n     \n         headers \n         The headers that should be included as a HTTP request headers. There can be any number of headers concatenated on following format. header1:value1#header2:value2. User can include content-type header if he need to any specific type for payload if not system get the mapping type as the content-Type header (ie. @map(xml):application/xml,@map(json):application/json,@map(text):plain/text ) and if user does not include any mapping type then system gets the 'plain/text' as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header. \n           \n         STRING \n         Yes \n         No \n     \n     \n         method \n         For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. \n         POST \n         STRING \n         Yes \n         No \n     \n     \n         socket.idle.timeout \n         Socket timeout value in millisecond \n         6000 \n         INT \n         Yes \n         No \n     \n     \n         chunk.disabled \n         port: Port number of the remote service \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         ssl.protocol \n         The SSL protocol version \n         TLS \n         STRING \n         Yes \n         No \n     \n     \n         parameters \n         Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ciphers \n         List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ssl.enabled.protocols \n         SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         client.enable.session.creation \n         Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         follow.redirect \n         Redirect related enabled. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         max.redirect.count \n         Maximum redirect count. \n         5 \n         INT \n         Yes \n         No \n     \n     \n         tls.store.type \n         TLS store type to be used. \n         JKS \n         STRING \n         Yes \n         No \n     \n     \n         proxy.host \n         Proxy server host \n         null \n         STRING \n         Yes \n         No \n     \n     \n         proxy.port \n         Proxy server port \n         null \n         STRING \n         Yes \n         No \n     \n     \n         proxy.username \n         Proxy server username \n         null \n         STRING \n         Yes \n         No \n     \n     \n         proxy.password \n         Proxy server password \n         null \n         STRING \n         Yes \n         No \n     \n     \n         client.bootstrap.configuration \n         Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" \n         TODO \n         STRING \n         Yes \n         No \n     \n     \n         client.bootstrap.nodelay \n         Http client no delay. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         client.bootstrap.keepalive \n         Http client keep alive. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         client.bootstrap.sendbuffersize \n         Http client send buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         client.bootstrap.recievebuffersize \n         Http client receive buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         client.bootstrap.connect.timeout \n         Http client connection timeout. \n         15000 \n         INT \n         Yes \n         No \n     \n     \n         client.bootstrap.socket.reuse \n         To enable http socket reuse. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         client.bootstrap.socket.timeout \n         Http client socket timeout. \n         15 \n         STRING \n         Yes \n         No \n     \n     \n         client.threadpool.configurations \n         Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" \n         TODO \n         STRING \n         Yes \n         No \n     \n     \n         client.connection.pool.count \n         Connection pool count. \n         0 \n         INT \n         Yes \n         No \n     \n     \n         client.max.active.connections.per.pool \n         Active connections per pool. \n         -1 \n         INT \n         Yes \n         No \n     \n     \n         client.min.idle.connections.per.pool \n         Minimum ideal connection per pool. \n         0 \n         INT \n         Yes \n         No \n     \n     \n         client.max.idle.connections.per.pool \n         Maximum ideal connection per pool. \n         100 \n         INT \n         Yes \n         No \n     \n     \n         client.min.eviction.idle.time \n         Minimum eviction idle time. \n         5 * 60 * 1000 \n         STRING \n         Yes \n         No \n     \n     \n         sender.thread.count \n         Http sender thread count. \n         20 \n         STRING \n         Yes \n         No \n     \n     \n         event.group.executor.thread.size \n         Event group executor thread size. \n         15 \n         STRING \n         Yes \n         No \n     \n     \n         max.wait.for.client.connection.pool \n         Maximum wait for client connection pool. \n         60000 \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         clientBootstrapBossGroupSize \n         property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. \n         4 \n         Any integer \n     \n     \n         clientBootstrapWorkerGroupSize \n         property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. \n         8 \n         Any integer \n     \n     \n         trustStoreLocation \n         The default truststore file path. \n         ${carbon.home}/resources/security/client-truststore.jks \n         Path to client-truststore.jks \n     \n     \n         trustStorePassword \n         The default truststore password. \n         wso2carbon \n         Truststore password \n       Examples  EXAMPLE 1  @sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers='{{headers}}',client.bootstrap.configuration= 'client.bootstrap.socket.timeout:20','client.bootstrap.worker.group.size:10' ,client.pool.configuration= 'client.connection.pool.count:10','client.max.active.connections.per.pool:1'  @map(type='xml' , @payload('{{payloadBody}}')))define stream FooStream (payloadBody String, method string, headers string);  If it is xml mapping expected input should be in following format for FooStream:{ events      event          symbol WSO2 /symbol          price 55.6 /price          volume 100 /volume      /event /events ,POST,Content-Length:24#Content-Location:USA#Retry-After:120}Above event will generate output as below.~Output http event payload events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ~Output http event headersContent-Length:24,Content-Location:'USA',Retry-After:120,Content-Type:'application/xml',HTTP_METHOD:'POST',~Output http event propertiesHTTP_METHOD:'POST',HOST:'localhost',PORT:8009PROTOCOL:'http'TO:'/foo'", 
            "title": "http (Sink)"
        }, 
        {
            "location": "/api/1.0.11/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.11/#http-source", 
            "text": "The HTTP source receives POST requests via HTTP or HTTPS in format such as  text ,  XML  and  JSON . If required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service.  Syntax  @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= STRING , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         receiver.url \n         The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format  http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format  https://localhost:8080/ streamName \n         http://0.0.0.0:9763/ / \n         STRING \n         Yes \n         No \n     \n     \n         basic.auth.enabled \n         If this is set to  true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false'  \n         false \n         STRING \n         Yes \n         No \n     \n     \n         worker.count \n         The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. \n         1 \n         STRING \n         Yes \n         No \n     \n     \n         socket.idle.timeout \n         Idle timeout for HTTP connection. \n         120000 \n         INT \n         Yes \n         No \n     \n     \n         ssl.verify.client \n         The type of client certificate verification. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ssl.protocol \n         ssl/tls related options \n         TLS \n         STRING \n         Yes \n         No \n     \n     \n         tls.store.type \n         TLS store type. \n         JKS \n         STRING \n         Yes \n         No \n     \n     \n         parameters \n         Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ciphers \n         List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ssl.enabled.protocols \n         SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         server.enable.session.creation \n         Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         server.supported.snimatchers \n         Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         server.suported.server.names \n         Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.configuration \n         Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" \n         null \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation \n         To enable the request size validation. \n         false \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.maximum.value \n         If request size is validated then maximum size. \n         Integer.MAX_VALUE \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.reject.status.code \n         If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. \n         401 \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.reject.message \n         If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. \n         Message is bigger than the valid size \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.reject.message.content.type \n         If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. \n         plain/text \n         STRING \n         Yes \n         No \n     \n     \n         header.size.validation \n         To enable the header size validation. \n         false \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.maximum.request.line \n         If header header validation is enabled then the maximum request line. \n         4096 \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.maximum.size \n         If header header validation is enabled then the maximum expected header size. \n         8192 \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.maximum.chunk.size \n         If header header validation is enabled then the maximum expected chunk size. \n         8192 \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.reject.status.code \n         401 \n         If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.reject.message \n         If header is exceed maximum size and header.size.validation is enabled then message to be send as response. \n         Message header is bigger than the valid size \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.reject.message.content.type \n         If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. \n         plain/text \n         STRING \n         Yes \n         No \n     \n     \n         server.bootstrap.configuration \n         Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" \n         null \n         OBJECT \n         Yes \n         No \n     \n     \n         server.bootstrap.nodelay \n         Http server no delay. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.keepalive \n         Http server keep alive. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.sendbuffersize \n         Http server send buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         server.bootstrap.recievebuffersize \n         Http server receive buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         server.bootstrap.connect.timeout \n         Http server connection timeout. \n         15000 \n         INT \n         Yes \n         No \n     \n     \n         server.bootstrap.socket.reuse \n         To enable http socket reuse. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.socket.timeout \n         Http server socket timeout. \n         15 \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.socket.backlog \n         THttp server socket backlog. \n         100 \n         BOOL \n         Yes \n         No \n     \n     \n         trace.log.enabled \n         Http traffic monitoring. \n         false \n         BOOL \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         serverBootstrapBossGroupSize \n         property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. \n         4 \n         Any integer \n     \n     \n         serverBootstrapWorkerGroupSize \n         property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. \n         8 \n         Any integer \n     \n     \n         defaultHost \n         The default host of the transport. \n         0.0.0.0 \n         Any valid host \n     \n     \n         defaultHttpPort \n         The default port if the default scheme is 'http'. \n         8280 \n         Any valid port \n     \n     \n         defaultHttpsPort \n         The default port if the default scheme is 'https'. \n         8243 \n         Any valid port \n     \n     \n         defaultScheme \n         The default protocol. \n         http \n         http https \n     \n     \n         keyStoreLocation \n         The default keystore file path. \n         ${carbon.home}/resources/security/wso2carbon.jks \n         Path to wso2carbon.jks file \n     \n     \n         keyStorePassword \n         The default keystore password. \n         wso2carbon \n         String of keystore password \n     \n     \n         certPassword \n         The default cert password. \n         wso2carbon \n         String of cert password \n       Examples  EXAMPLE 1  @source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' ,request.size.validation.configuration= request.size.validation:true ,server.bootstrap.configuration= server.bootstrap.socket.timeout:25  @map(type='xml'))\ndefine stream FooStream (symbol string, price float, volume long);  Above source listenerConfiguration performs a default XML input mapping. The expected input is as follows: events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events If basic authentication is enabled via the  basic.auth.enabled='true  setting, each input event is also expected to contain the  Authorization:'Basic encodeBase64(username:Password)'  header.", 
            "title": "http (Source)"
        }, 
        {
            "location": "/api/1.0.10/", 
            "text": "API Docs - v1.0.10\n\n\nSink\n\n\nhttp \n(Sink)\n\n\nThis extension publish the HTTP events in any HTTP method  POST, GET, PUT, DELETE  via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically.\n\n\n\nSyntax\n\n\n@sink(type=\nhttp\n, publisher.url=\nSTRING\n, basic.auth.username=\nSTRING\n, basic.auth.password=\nSTRING\n, https.truststore.file=\nSTRING\n, https.truststore.password=\nSTRING\n, headers=\nSTRING\n, method=\nSTRING\n, socket.idle.timeout=\nINT\n, chunk.disabled=\nBOOL\n, ssl.protocol=\nSTRING\n, parameters=\nSTRING\n, ciphers=\nSTRING\n, ssl.enabled.protocols=\nSTRING\n, client.enable.session.creation=\nSTRING\n, follow.redirect=\nBOOL\n, max.redirect.count=\nINT\n, tls.store.type=\nSTRING\n, proxy.host=\nSTRING\n, proxy.port=\nSTRING\n, proxy.username=\nSTRING\n, proxy.password=\nSTRING\n, client.bootstrap.configuration=\nSTRING\n, client.bootstrap.nodelay=\nBOOL\n, client.bootstrap.keepalive=\nBOOL\n, client.bootstrap.sendbuffersize=\nINT\n, client.bootstrap.recievebuffersize=\nINT\n, client.bootstrap.connect.timeout=\nINT\n, client.bootstrap.socket.reuse=\nBOOL\n, client.bootstrap.socket.timeout=\nSTRING\n, client.threadpool.configurations=\nSTRING\n, client.connection.pool.count=\nINT\n, client.max.active.connections.per.pool=\nINT\n, client.min.idle.connections.per.pool=\nINT\n, client.max.idle.connections.per.pool=\nINT\n, client.min.eviction.idle.time=\nSTRING\n, sender.thread.count=\nSTRING\n, event.group.executor.thread.size=\nSTRING\n, max.wait.for.client.connection.pool=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npublisher.url\n\n        \nThe URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use \nhttps\n instead of \nhttp\n in the publisher.url.e.g., \nhttp://localhost:8080/endpoint\n, \nhttps://localhost:8080/endpoint\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbasic.auth.username\n\n        \nThe username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI.\n\n        \n \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nbasic.auth.password\n\n        \nThe password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI.\n\n        \n \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nhttps.truststore.file\n\n        \nThe file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required.\n\n        \n${carbon.home}/resources/security/client-truststore.jks\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nhttps.truststore.password\n\n        \nThe password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password.\n\n        \nwso2carbon\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheaders\n\n        \nThe headers that should be included as a HTTP request headers. There can be any number of headers concatenated on following format. header1:value1#header2:value2. User can include content-type header if he need to any specific type for payload if not system get the mapping type as the content-Type header (ie. @map(xml):application/xml,@map(json):application/json,@map(text):plain/text ) and if user does not include any mapping type then system gets the 'plain/text' as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header.\n\n        \n \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmethod\n\n        \nFor HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header.\n\n        \nPOST\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsocket.idle.timeout\n\n        \nSocket timeout value in millisecond\n\n        \n6000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nchunk.disabled\n\n        \nport: Port number of the remote service\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.protocol\n\n        \nThe SSL protocol version\n\n        \nTLS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nparameters\n\n        \nParameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\"\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nciphers\n\n        \nList of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.enabled.protocols\n\n        \nSSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.enable.session.creation\n\n        \nEnable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfollow.redirect\n\n        \nRedirect related enabled.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.redirect.count\n\n        \nMaximum redirect count.\n\n        \n5\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.store.type\n\n        \nTLS store type to be used.\n\n        \nJKS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nproxy.host\n\n        \nProxy server host\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nproxy.port\n\n        \nProxy server port\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nproxy.username\n\n        \nProxy server username\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nproxy.password\n\n        \nProxy server password\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.configuration\n\n        \nClient bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\"\n\n        \nTODO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.nodelay\n\n        \nHttp client no delay.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.keepalive\n\n        \nHttp client keep alive.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.sendbuffersize\n\n        \nHttp client send buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.recievebuffersize\n\n        \nHttp client receive buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.connect.timeout\n\n        \nHttp client connection timeout.\n\n        \n15000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.socket.reuse\n\n        \nTo enable http socket reuse.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.socket.timeout\n\n        \nHttp client socket timeout.\n\n        \n15\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.threadpool.configurations\n\n        \nThread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\"\n\n        \nTODO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.connection.pool.count\n\n        \nConnection pool count.\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.max.active.connections.per.pool\n\n        \nActive connections per pool.\n\n        \n-1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.min.idle.connections.per.pool\n\n        \nMinimum ideal connection per pool.\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.max.idle.connections.per.pool\n\n        \nMaximum ideal connection per pool.\n\n        \n100\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.min.eviction.idle.time\n\n        \nMinimum eviction idle time.\n\n        \n5 * 60 * 1000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsender.thread.count\n\n        \nHttp sender thread count.\n\n        \n20\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nevent.group.executor.thread.size\n\n        \nEvent group executor thread size.\n\n        \n15\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.wait.for.client.connection.pool\n\n        \nMaximum wait for client connection pool.\n\n        \n60000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nclientBootstrapBossGroupSize\n\n        \nproperty to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads.\n\n        \n4\n\n        \nAny integer\n\n    \n\n    \n\n        \nclientBootstrapWorkerGroupSize\n\n        \nproperty to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode.\n\n        \n8\n\n        \nAny integer\n\n    \n\n    \n\n        \ntrustStoreLocation\n\n        \nThe default truststore file path.\n\n        \n${carbon.home}/resources/security/client-truststore.jks\n\n        \nPath to client-truststore.jks\n\n    \n\n    \n\n        \ntrustStorePassword\n\n        \nThe default truststore password.\n\n        \nwso2carbon\n\n        \nTruststore password\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers='{{headers}}',client.bootstrap.configuration=\n'client.bootstrap.socket.timeout:20','client.bootstrap.worker.group.size:10'\n,client.pool.configuration=\n'client.connection.pool.count:10','client.max.active.connections.per.pool:1'\n @map(type='xml' , @payload('{{payloadBody}}')))define stream FooStream (payloadBody String, method string, headers string);\n\n\n\n\n\nIf it is xml mapping expected input should be in following format for FooStream:{\nevents\n    \nevent\n        \nsymbol\nWSO2\n/symbol\n        \nprice\n55.6\n/price\n        \nvolume\n100\n/volume\n    \n/event\n/events\n,POST,Content-Length:24#Content-Location:USA#Retry-After:120}Above event will generate output as below.~Output http event payload\nevents\nevent\nsymbol\nWSO2\n/symbol\nprice\n55.6\n/price\nvolume\n100\n/volume\n/event\n/events\n~Output http event headersContent-Length:24,Content-Location:'USA',Retry-After:120,Content-Type:'application/xml',HTTP_METHOD:'POST',~Output http event propertiesHTTP_METHOD:'POST',HOST:'localhost',PORT:8009PROTOCOL:'http'TO:'/foo'\n\n\n\nSource\n\n\nhttp \n(Source)\n\n\nThe HTTP source receives POST requests via HTTP or HTTPS in format such as \ntext\n, \nXML\n and \nJSON\n. If required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service.\n\n\n\nSyntax\n\n\n@source(type=\nhttp\n, receiver.url=\nSTRING\n, basic.auth.enabled=\nSTRING\n, worker.count=\nSTRING\n, socket.idle.timeout=\nINT\n, ssl.verify.client=\nSTRING\n, ssl.protocol=\nSTRING\n, tls.store.type=\nSTRING\n, parameters=\nSTRING\n, ciphers=\nSTRING\n, ssl.enabled.protocols=\nSTRING\n, server.enable.session.creation=\nSTRING\n, server.supported.snimatchers=\nSTRING\n, server.suported.server.names=\nSTRING\n, request.size.validation.configuration=\nSTRING\n, request.size.validation=\nSTRING\n, request.size.validation.maximum.value=\nSTRING\n, request.size.validation.reject.status.code=\nSTRING\n, request.size.validation.reject.message=\nSTRING\n, request.size.validation.reject.message.content.type=\nSTRING\n, header.size.validation=\nSTRING\n, header.validation.maximum.request.line=\nSTRING\n, header.validation.maximum.size=\nSTRING\n, header.validation.maximum.chunk.size=\nSTRING\n, header.validation.reject.status.code=\nSTRING\n, header.validation.reject.message=\nSTRING\n, header.validation.reject.message.content.type=\nSTRING\n, server.bootstrap.configuration=\nOBJECT\n, server.bootstrap.nodelay=\nBOOL\n, server.bootstrap.keepalive=\nBOOL\n, server.bootstrap.sendbuffersize=\nINT\n, server.bootstrap.recievebuffersize=\nINT\n, server.bootstrap.connect.timeout=\nINT\n, server.bootstrap.socket.reuse=\nBOOL\n, server.bootstrap.socket.timeout=\nBOOL\n, server.bootstrap.socket.backlog=\nBOOL\n, trace.log.enabled=\nBOOL\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nreceiver.url\n\n        \nThe URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format \nhttp://0.0.0.0:9763/\nappNAme\n/\nstreamName\nIf the user want to use SSL the url should be given in following format \nhttps://localhost:8080/\nstreamName\n\n        \nhttp://0.0.0.0:9763/\n/\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nbasic.auth.enabled\n\n        \nIf this is set to \ntrue\n, basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' \n\n        \nfalse\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nworker.count\n\n        \nThe number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering.\n\n        \n1\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsocket.idle.timeout\n\n        \nIdle timeout for HTTP connection.\n\n        \n120000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.verify.client\n\n        \nThe type of client certificate verification.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.protocol\n\n        \nssl/tls related options\n\n        \nTLS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.store.type\n\n        \nTLS store type.\n\n        \nJKS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nparameters\n\n        \nParameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\"\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nciphers\n\n        \nList of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.enabled.protocols\n\n        \nSSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.enable.session.creation\n\n        \nEnable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.supported.snimatchers\n\n        \nHttp SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.suported.server.names\n\n        \nHttp supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.configuration\n\n        \nParameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\"\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation\n\n        \nTo enable the request size validation.\n\n        \nfalse\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.maximum.value\n\n        \nIf request size is validated then maximum size.\n\n        \nInteger.MAX_VALUE\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.reject.status.code\n\n        \nIf request is exceed maximum size and request.size.validation is enabled then status code to be send as response.\n\n        \n401\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.reject.message\n\n        \nIf request is exceed maximum size and request.size.validation is enabled then status message to be send as response.\n\n        \nMessage is bigger than the valid size\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.reject.message.content.type\n\n        \nIf request is exceed maximum size and request.size.validation is enabled then content type to be send as response.\n\n        \nplain/text\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.size.validation\n\n        \nTo enable the header size validation.\n\n        \nfalse\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.maximum.request.line\n\n        \nIf header header validation is enabled then the maximum request line.\n\n        \n4096\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.maximum.size\n\n        \nIf header header validation is enabled then the maximum expected header size.\n\n        \n8192\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.maximum.chunk.size\n\n        \nIf header header validation is enabled then the maximum expected chunk size.\n\n        \n8192\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.reject.status.code\n\n        \n401\n\n        \nIf header is exceed maximum size and header.size.validation is enabled then status code to be send as response.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.reject.message\n\n        \nIf header is exceed maximum size and header.size.validation is enabled then message to be send as response.\n\n        \nMessage header is bigger than the valid size\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.reject.message.content.type\n\n        \nIf header is exceed maximum size and header.size.validation is enabled then content type to be send as response.\n\n        \nplain/text\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.configuration\n\n        \nParameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\"\n\n        \nnull\n\n        \nOBJECT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.nodelay\n\n        \nHttp server no delay.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.keepalive\n\n        \nHttp server keep alive.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.sendbuffersize\n\n        \nHttp server send buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.recievebuffersize\n\n        \nHttp server receive buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.connect.timeout\n\n        \nHttp server connection timeout.\n\n        \n15000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.socket.reuse\n\n        \nTo enable http socket reuse.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.socket.timeout\n\n        \nHttp server socket timeout.\n\n        \n15\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.socket.backlog\n\n        \nTHttp server socket backlog.\n\n        \n100\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntrace.log.enabled\n\n        \nHttp traffic monitoring.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nserverBootstrapBossGroupSize\n\n        \nproperty to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads.\n\n        \n4\n\n        \nAny integer\n\n    \n\n    \n\n        \nserverBootstrapWorkerGroupSize\n\n        \nproperty to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode.\n\n        \n8\n\n        \nAny integer\n\n    \n\n    \n\n        \ndefaultHost\n\n        \nThe default host of the transport.\n\n        \n0.0.0.0\n\n        \nAny valid host\n\n    \n\n    \n\n        \ndefaultHttpPort\n\n        \nThe default port if the default scheme is 'http'.\n\n        \n8280\n\n        \nAny valid port\n\n    \n\n    \n\n        \ndefaultHttpsPort\n\n        \nThe default port if the default scheme is 'https'.\n\n        \n8243\n\n        \nAny valid port\n\n    \n\n    \n\n        \ndefaultScheme\n\n        \nThe default protocol.\n\n        \nhttp\n\n        \nhttp\nhttps\n\n    \n\n    \n\n        \nkeyStoreLocation\n\n        \nThe default keystore file path.\n\n        \n${carbon.home}/resources/security/wso2carbon.jks\n\n        \nPath to wso2carbon.jks file\n\n    \n\n    \n\n        \nkeyStorePassword\n\n        \nThe default keystore password.\n\n        \nwso2carbon\n\n        \nString of keystore password\n\n    \n\n    \n\n        \ncertPassword\n\n        \nThe default cert password.\n\n        \nwso2carbon\n\n        \nString of cert password\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters=\n'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2'\n,request.size.validation.configuration=\nrequest.size.validation:true\n,server.bootstrap.configuration=\nserver.bootstrap.socket.timeout:25\n @map(type='xml'))\ndefine stream FooStream (symbol string, price float, volume long);\n\n\n\n\n\nAbove source listenerConfiguration performs a default XML input mapping. The expected input is as follows:\nevents\nevent\nsymbol\nWSO2\n/symbol\nprice\n55.6\n/price\nvolume\n100\n/volume\n/event\n/events\nIf basic authentication is enabled via the \nbasic.auth.enabled='true\n setting, each input event is also expected to contain the \nAuthorization:'Basic encodeBase64(username:Password)'\n header.", 
            "title": "1.0.10"
        }, 
        {
            "location": "/api/1.0.10/#api-docs-v1010", 
            "text": "", 
            "title": "API Docs - v1.0.10"
        }, 
        {
            "location": "/api/1.0.10/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/1.0.10/#http-sink", 
            "text": "This extension publish the HTTP events in any HTTP method  POST, GET, PUT, DELETE  via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically.  Syntax  @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         publisher.url \n         The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use  https  instead of  http  in the publisher.url.e.g.,  http://localhost:8080/endpoint ,  https://localhost:8080/endpoint \n         \n         STRING \n         No \n         No \n     \n     \n         basic.auth.username \n         The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. \n           \n         STRING \n         Yes \n         No \n     \n     \n         basic.auth.password \n         The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. \n           \n         STRING \n         Yes \n         No \n     \n     \n         https.truststore.file \n         The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. \n         ${carbon.home}/resources/security/client-truststore.jks \n         STRING \n         Yes \n         No \n     \n     \n         https.truststore.password \n         The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. \n         wso2carbon \n         STRING \n         Yes \n         No \n     \n     \n         headers \n         The headers that should be included as a HTTP request headers. There can be any number of headers concatenated on following format. header1:value1#header2:value2. User can include content-type header if he need to any specific type for payload if not system get the mapping type as the content-Type header (ie. @map(xml):application/xml,@map(json):application/json,@map(text):plain/text ) and if user does not include any mapping type then system gets the 'plain/text' as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header. \n           \n         STRING \n         Yes \n         No \n     \n     \n         method \n         For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. \n         POST \n         STRING \n         Yes \n         No \n     \n     \n         socket.idle.timeout \n         Socket timeout value in millisecond \n         6000 \n         INT \n         Yes \n         No \n     \n     \n         chunk.disabled \n         port: Port number of the remote service \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         ssl.protocol \n         The SSL protocol version \n         TLS \n         STRING \n         Yes \n         No \n     \n     \n         parameters \n         Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ciphers \n         List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ssl.enabled.protocols \n         SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         client.enable.session.creation \n         Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         follow.redirect \n         Redirect related enabled. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         max.redirect.count \n         Maximum redirect count. \n         5 \n         INT \n         Yes \n         No \n     \n     \n         tls.store.type \n         TLS store type to be used. \n         JKS \n         STRING \n         Yes \n         No \n     \n     \n         proxy.host \n         Proxy server host \n         null \n         STRING \n         Yes \n         No \n     \n     \n         proxy.port \n         Proxy server port \n         null \n         STRING \n         Yes \n         No \n     \n     \n         proxy.username \n         Proxy server username \n         null \n         STRING \n         Yes \n         No \n     \n     \n         proxy.password \n         Proxy server password \n         null \n         STRING \n         Yes \n         No \n     \n     \n         client.bootstrap.configuration \n         Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" \n         TODO \n         STRING \n         Yes \n         No \n     \n     \n         client.bootstrap.nodelay \n         Http client no delay. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         client.bootstrap.keepalive \n         Http client keep alive. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         client.bootstrap.sendbuffersize \n         Http client send buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         client.bootstrap.recievebuffersize \n         Http client receive buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         client.bootstrap.connect.timeout \n         Http client connection timeout. \n         15000 \n         INT \n         Yes \n         No \n     \n     \n         client.bootstrap.socket.reuse \n         To enable http socket reuse. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         client.bootstrap.socket.timeout \n         Http client socket timeout. \n         15 \n         STRING \n         Yes \n         No \n     \n     \n         client.threadpool.configurations \n         Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" \n         TODO \n         STRING \n         Yes \n         No \n     \n     \n         client.connection.pool.count \n         Connection pool count. \n         0 \n         INT \n         Yes \n         No \n     \n     \n         client.max.active.connections.per.pool \n         Active connections per pool. \n         -1 \n         INT \n         Yes \n         No \n     \n     \n         client.min.idle.connections.per.pool \n         Minimum ideal connection per pool. \n         0 \n         INT \n         Yes \n         No \n     \n     \n         client.max.idle.connections.per.pool \n         Maximum ideal connection per pool. \n         100 \n         INT \n         Yes \n         No \n     \n     \n         client.min.eviction.idle.time \n         Minimum eviction idle time. \n         5 * 60 * 1000 \n         STRING \n         Yes \n         No \n     \n     \n         sender.thread.count \n         Http sender thread count. \n         20 \n         STRING \n         Yes \n         No \n     \n     \n         event.group.executor.thread.size \n         Event group executor thread size. \n         15 \n         STRING \n         Yes \n         No \n     \n     \n         max.wait.for.client.connection.pool \n         Maximum wait for client connection pool. \n         60000 \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         clientBootstrapBossGroupSize \n         property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. \n         4 \n         Any integer \n     \n     \n         clientBootstrapWorkerGroupSize \n         property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. \n         8 \n         Any integer \n     \n     \n         trustStoreLocation \n         The default truststore file path. \n         ${carbon.home}/resources/security/client-truststore.jks \n         Path to client-truststore.jks \n     \n     \n         trustStorePassword \n         The default truststore password. \n         wso2carbon \n         Truststore password \n       Examples  EXAMPLE 1  @sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers='{{headers}}',client.bootstrap.configuration= 'client.bootstrap.socket.timeout:20','client.bootstrap.worker.group.size:10' ,client.pool.configuration= 'client.connection.pool.count:10','client.max.active.connections.per.pool:1'  @map(type='xml' , @payload('{{payloadBody}}')))define stream FooStream (payloadBody String, method string, headers string);  If it is xml mapping expected input should be in following format for FooStream:{ events      event          symbol WSO2 /symbol          price 55.6 /price          volume 100 /volume      /event /events ,POST,Content-Length:24#Content-Location:USA#Retry-After:120}Above event will generate output as below.~Output http event payload events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ~Output http event headersContent-Length:24,Content-Location:'USA',Retry-After:120,Content-Type:'application/xml',HTTP_METHOD:'POST',~Output http event propertiesHTTP_METHOD:'POST',HOST:'localhost',PORT:8009PROTOCOL:'http'TO:'/foo'", 
            "title": "http (Sink)"
        }, 
        {
            "location": "/api/1.0.10/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.10/#http-source", 
            "text": "The HTTP source receives POST requests via HTTP or HTTPS in format such as  text ,  XML  and  JSON . If required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service.  Syntax  @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= STRING , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         receiver.url \n         The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format  http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format  https://localhost:8080/ streamName \n         http://0.0.0.0:9763/ / \n         STRING \n         Yes \n         No \n     \n     \n         basic.auth.enabled \n         If this is set to  true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false'  \n         false \n         STRING \n         Yes \n         No \n     \n     \n         worker.count \n         The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. \n         1 \n         STRING \n         Yes \n         No \n     \n     \n         socket.idle.timeout \n         Idle timeout for HTTP connection. \n         120000 \n         INT \n         Yes \n         No \n     \n     \n         ssl.verify.client \n         The type of client certificate verification. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ssl.protocol \n         ssl/tls related options \n         TLS \n         STRING \n         Yes \n         No \n     \n     \n         tls.store.type \n         TLS store type. \n         JKS \n         STRING \n         Yes \n         No \n     \n     \n         parameters \n         Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ciphers \n         List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ssl.enabled.protocols \n         SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         server.enable.session.creation \n         Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         server.supported.snimatchers \n         Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         server.suported.server.names \n         Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.configuration \n         Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" \n         null \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation \n         To enable the request size validation. \n         false \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.maximum.value \n         If request size is validated then maximum size. \n         Integer.MAX_VALUE \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.reject.status.code \n         If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. \n         401 \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.reject.message \n         If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. \n         Message is bigger than the valid size \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.reject.message.content.type \n         If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. \n         plain/text \n         STRING \n         Yes \n         No \n     \n     \n         header.size.validation \n         To enable the header size validation. \n         false \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.maximum.request.line \n         If header header validation is enabled then the maximum request line. \n         4096 \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.maximum.size \n         If header header validation is enabled then the maximum expected header size. \n         8192 \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.maximum.chunk.size \n         If header header validation is enabled then the maximum expected chunk size. \n         8192 \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.reject.status.code \n         401 \n         If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.reject.message \n         If header is exceed maximum size and header.size.validation is enabled then message to be send as response. \n         Message header is bigger than the valid size \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.reject.message.content.type \n         If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. \n         plain/text \n         STRING \n         Yes \n         No \n     \n     \n         server.bootstrap.configuration \n         Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" \n         null \n         OBJECT \n         Yes \n         No \n     \n     \n         server.bootstrap.nodelay \n         Http server no delay. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.keepalive \n         Http server keep alive. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.sendbuffersize \n         Http server send buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         server.bootstrap.recievebuffersize \n         Http server receive buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         server.bootstrap.connect.timeout \n         Http server connection timeout. \n         15000 \n         INT \n         Yes \n         No \n     \n     \n         server.bootstrap.socket.reuse \n         To enable http socket reuse. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.socket.timeout \n         Http server socket timeout. \n         15 \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.socket.backlog \n         THttp server socket backlog. \n         100 \n         BOOL \n         Yes \n         No \n     \n     \n         trace.log.enabled \n         Http traffic monitoring. \n         false \n         BOOL \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         serverBootstrapBossGroupSize \n         property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. \n         4 \n         Any integer \n     \n     \n         serverBootstrapWorkerGroupSize \n         property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. \n         8 \n         Any integer \n     \n     \n         defaultHost \n         The default host of the transport. \n         0.0.0.0 \n         Any valid host \n     \n     \n         defaultHttpPort \n         The default port if the default scheme is 'http'. \n         8280 \n         Any valid port \n     \n     \n         defaultHttpsPort \n         The default port if the default scheme is 'https'. \n         8243 \n         Any valid port \n     \n     \n         defaultScheme \n         The default protocol. \n         http \n         http https \n     \n     \n         keyStoreLocation \n         The default keystore file path. \n         ${carbon.home}/resources/security/wso2carbon.jks \n         Path to wso2carbon.jks file \n     \n     \n         keyStorePassword \n         The default keystore password. \n         wso2carbon \n         String of keystore password \n     \n     \n         certPassword \n         The default cert password. \n         wso2carbon \n         String of cert password \n       Examples  EXAMPLE 1  @source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' ,request.size.validation.configuration= request.size.validation:true ,server.bootstrap.configuration= server.bootstrap.socket.timeout:25  @map(type='xml'))\ndefine stream FooStream (symbol string, price float, volume long);  Above source listenerConfiguration performs a default XML input mapping. The expected input is as follows: events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events If basic authentication is enabled via the  basic.auth.enabled='true  setting, each input event is also expected to contain the  Authorization:'Basic encodeBase64(username:Password)'  header.", 
            "title": "http (Source)"
        }, 
        {
            "location": "/api/1.0.4/", 
            "text": "API Docs - v1.0.4\n\n\nSource\n\n\nhttp \n(Source)\n\n\nThe HTTP source receives POST requests via HTTP or HTTPS in format such as \ntext\n, \nXML\n and \nJSON\n. If required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service.\n\n\n\nSyntax\n\n\n@source(type=\nhttp\n, receiver.url=\nSTRING\n, basic.auth.enabled=\nSTRING\n, worker.count=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nreceiver.url\n\n        \nThe URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format \nhttp://0.0.0.0:9763/\nappNAme\n/\nstreamName\nIf the user want to use SSL the url should be given in following format \nhttps://localhost:8080/\nstreamName\n\n        \nhttp://0.0.0.0:9763/\n/\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nbasic.auth.enabled\n\n        \nIf this is set to \ntrue\n, basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' \n\n        \nfalse\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nworker.count\n\n        \nThe number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering.\n\n        \n1\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nlatency.metrics.enabled\n\n        \nProperty to enable metrics logs to monitor transport latency for config.\n\n        \ntrue\n\n        \ntrue\nfalse\n\n    \n\n    \n\n        \nserver.bootstrap.socket.timeout\n\n        \nproperty to configure specified timeout in milliseconds which server socket will block for this amount of time for http message content to be received.\n\n        \n15\n\n        \nAny integer\n\n    \n\n    \n\n        \nserver.bootstrap.boss.group.size\n\n        \nproperty to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads.\n\n        \n4\n\n        \nAny integer\n\n    \n\n    \n\n        \nserver.bootstrap.worker.group.size\n\n        \nproperty to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode.\n\n        \n8\n\n        \nAny integer\n\n    \n\n    \n\n        \ndefault.host\n\n        \nThe default host of the transport.\n\n        \n0.0.0.0\n\n        \nAny valid host\n\n    \n\n    \n\n        \nhttp.port\n\n        \nThe default port if the default scheme is 'http'.\n\n        \n9763\n\n        \nAny valid port\n\n    \n\n    \n\n        \nhttps.port\n\n        \nThe default port if the default scheme is 'https'.\n\n        \n9443\n\n        \nAny valid port\n\n    \n\n    \n\n        \ndefault.protocol\n\n        \nThe default protocol.\n\n        \nhttp\n\n        \nhttp\nhttps\n\n    \n\n    \n\n        \nhttps.keystore.file\n\n        \nThe default keystore file path.\n\n        \n${carbon.home}/resources/security/wso2carbon.jks\n\n        \nPath to wso2carbon.jks file\n\n    \n\n    \n\n        \nhttps.keystore.password\n\n        \nThe default keystore password.\n\n        \nwso2carbon\n\n        \nString of keystore password\n\n    \n\n    \n\n        \nhttps.cert.password\n\n        \nThe default cert password.\n\n        \nwso2carbon\n\n        \nString of cert password\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', @map(type='xml'))\ndefine stream FooStream (symbol string, price float, volume long);\n\n\n\n\n\nAbove source configuration performs a default XML input mapping. The expected input is as follows:\nevents\nevent\nsymbol\nWSO2\n/symbol\nprice\n55.6\n/price\nvolume\n100\n/volume\n/event\n/events\nIf basic authentication is enabled via the \nbasic.auth.enabled='true\n setting, each input event is also expected to contain the \nAuthorization:'Basic encodeBase64(username:Password)'\n header.\n\n\n\nSink\n\n\nhttp \n(Sink)\n\n\nThis extension publish the HTTP events in any HTTP method  POST, GET, PUT, DELETE  via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically.\n\n\n\nSyntax\n\n\n@sink(type=\nhttp\n, publisher.url=\nSTRING\n, basic.auth.username=\nSTRING\n, basic.auth.password=\nSTRING\n, client.truststore.path=\nSTRING\n, client.truststore.password=\nSTRING\n, headers=\nSTRING\n, method=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npublisher.url\n\n        \nThe URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use \nhttps\n instead of \nhttp\n in the publisher.url.e.g., \nhttp://localhost:8080/endpoint\n, \nhttps://localhost:8080/endpoint\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbasic.auth.username\n\n        \nThe username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI.\n\n        \n \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nbasic.auth.password\n\n        \nThe password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI.\n\n        \n \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.truststore.path\n\n        \nThe file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required.\n\n        \n${carbon.home}/resources/security/client-truststore.jks\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.truststore.password\n\n        \nThe password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password.\n\n        \nwso2carbon\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheaders\n\n        \nThe headers that should be included as a HTTP request headers. There can be any number of headers concatenated on following format. header1:value1#header2:value2. User can include content-type header if he need to any specific type for payload if not system get the mapping type as the content-Type header (ie. @map(xml):application/xml,@map(json):application/json,@map(text):plain/text ) and if user does not include any mapping type then system gets the 'plain/text' as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header.\n\n        \n \n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nmethod\n\n        \nFor HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header.\n\n        \nPOST\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nlatency.metrics.enabled\n\n        \nProperty to enable metrics logs to monitor transport latency for config.\n\n        \ntrue\n\n        \nAny Integer\n\n    \n\n    \n\n        \nserver.bootstrap.socket.timeout\n\n        \nProperty to configure specified timeout in milliseconds which server socket will block for this amount of time for http message content to be received.\n\n        \n15\n\n        \nAny Integer\n\n    \n\n    \n\n        \nserver.bootstrap.boss.group.size\n\n        \nProperty to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads.\n\n        \n4\n\n        \nAny integer\n\n    \n\n    \n\n        \nserver.bootstrap.worker.group.size\n\n        \nProperty to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode.\n\n        \n8\n\n        \nAny integer\n\n    \n\n    \n\n        \ndefault.protocol\n\n        \nThe default protocol.\n\n        \nhttp\n\n        \nhttp\nhttps\n\n    \n\n    \n\n        \nhttps.truststore.file\n\n        \nThe default truststore file path.\n\n        \n${carbon.home}/resources/security/client-truststore.jks\n\n        \nPath to client-truststore.jks\n\n    \n\n    \n\n        \nhttps.truststore.password\n\n        \nThe default truststore password.\n\n        \nwso2carbon\n\n        \nTruststore password\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers='{{headers}}', @map(type='xml' , @payload('{{payloadBody}}')))define stream FooStream (payloadBody String, method string, headers string);\n\n\n\n\n\nIf it is xml mapping expected input should be in following format for FooStream:{\nevents\n    \nevent\n        \nsymbol\nWSO2\n/symbol\n        \nprice\n55.6\n/price\n        \nvolume\n100\n/volume\n    \n/event\n/events\n,POST,Content-Length:24#Content-Location:USA#Retry-After:120}Above event will generate output as below.~Output http event payload\nevents\nevent\nsymbol\nWSO2\n/symbol\nprice\n55.6\n/price\nvolume\n100\n/volume\n/event\n/events\n~Output http event headersContent-Length:24,Content-Location:'USA',Retry-After:120,Content-Type:'application/xml',HTTP_METHOD:'POST',~Output http event propertiesHTTP_METHOD:'POST',HOST:'localhost',PORT:8009PROTOCOL:'http'TO:'/foo'", 
            "title": "1.0.4"
        }, 
        {
            "location": "/api/1.0.4/#api-docs-v104", 
            "text": "", 
            "title": "API Docs - v1.0.4"
        }, 
        {
            "location": "/api/1.0.4/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.4/#http-source", 
            "text": "The HTTP source receives POST requests via HTTP or HTTPS in format such as  text ,  XML  and  JSON . If required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service.  Syntax  @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         receiver.url \n         The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format  http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format  https://localhost:8080/ streamName \n         http://0.0.0.0:9763/ / \n         STRING \n         Yes \n         No \n     \n     \n         basic.auth.enabled \n         If this is set to  true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false'  \n         false \n         STRING \n         Yes \n         No \n     \n     \n         worker.count \n         The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. \n         1 \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         latency.metrics.enabled \n         Property to enable metrics logs to monitor transport latency for config. \n         true \n         true false \n     \n     \n         server.bootstrap.socket.timeout \n         property to configure specified timeout in milliseconds which server socket will block for this amount of time for http message content to be received. \n         15 \n         Any integer \n     \n     \n         server.bootstrap.boss.group.size \n         property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. \n         4 \n         Any integer \n     \n     \n         server.bootstrap.worker.group.size \n         property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. \n         8 \n         Any integer \n     \n     \n         default.host \n         The default host of the transport. \n         0.0.0.0 \n         Any valid host \n     \n     \n         http.port \n         The default port if the default scheme is 'http'. \n         9763 \n         Any valid port \n     \n     \n         https.port \n         The default port if the default scheme is 'https'. \n         9443 \n         Any valid port \n     \n     \n         default.protocol \n         The default protocol. \n         http \n         http https \n     \n     \n         https.keystore.file \n         The default keystore file path. \n         ${carbon.home}/resources/security/wso2carbon.jks \n         Path to wso2carbon.jks file \n     \n     \n         https.keystore.password \n         The default keystore password. \n         wso2carbon \n         String of keystore password \n     \n     \n         https.cert.password \n         The default cert password. \n         wso2carbon \n         String of cert password \n       Examples  EXAMPLE 1  @source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', @map(type='xml'))\ndefine stream FooStream (symbol string, price float, volume long);  Above source configuration performs a default XML input mapping. The expected input is as follows: events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events If basic authentication is enabled via the  basic.auth.enabled='true  setting, each input event is also expected to contain the  Authorization:'Basic encodeBase64(username:Password)'  header.", 
            "title": "http (Source)"
        }, 
        {
            "location": "/api/1.0.4/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/1.0.4/#http-sink", 
            "text": "This extension publish the HTTP events in any HTTP method  POST, GET, PUT, DELETE  via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically.  Syntax  @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , client.truststore.path= STRING , client.truststore.password= STRING , headers= STRING , method= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         publisher.url \n         The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use  https  instead of  http  in the publisher.url.e.g.,  http://localhost:8080/endpoint ,  https://localhost:8080/endpoint \n         \n         STRING \n         No \n         No \n     \n     \n         basic.auth.username \n         The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. \n           \n         STRING \n         Yes \n         No \n     \n     \n         basic.auth.password \n         The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. \n           \n         STRING \n         Yes \n         No \n     \n     \n         client.truststore.path \n         The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. \n         ${carbon.home}/resources/security/client-truststore.jks \n         STRING \n         Yes \n         No \n     \n     \n         client.truststore.password \n         The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. \n         wso2carbon \n         STRING \n         Yes \n         No \n     \n     \n         headers \n         The headers that should be included as a HTTP request headers. There can be any number of headers concatenated on following format. header1:value1#header2:value2. User can include content-type header if he need to any specific type for payload if not system get the mapping type as the content-Type header (ie. @map(xml):application/xml,@map(json):application/json,@map(text):plain/text ) and if user does not include any mapping type then system gets the 'plain/text' as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header. \n           \n         STRING \n         Yes \n         Yes \n     \n     \n         method \n         For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. \n         POST \n         STRING \n         Yes \n         Yes \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         latency.metrics.enabled \n         Property to enable metrics logs to monitor transport latency for config. \n         true \n         Any Integer \n     \n     \n         server.bootstrap.socket.timeout \n         Property to configure specified timeout in milliseconds which server socket will block for this amount of time for http message content to be received. \n         15 \n         Any Integer \n     \n     \n         server.bootstrap.boss.group.size \n         Property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. \n         4 \n         Any integer \n     \n     \n         server.bootstrap.worker.group.size \n         Property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. \n         8 \n         Any integer \n     \n     \n         default.protocol \n         The default protocol. \n         http \n         http https \n     \n     \n         https.truststore.file \n         The default truststore file path. \n         ${carbon.home}/resources/security/client-truststore.jks \n         Path to client-truststore.jks \n     \n     \n         https.truststore.password \n         The default truststore password. \n         wso2carbon \n         Truststore password \n       Examples  EXAMPLE 1  @sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers='{{headers}}', @map(type='xml' , @payload('{{payloadBody}}')))define stream FooStream (payloadBody String, method string, headers string);  If it is xml mapping expected input should be in following format for FooStream:{ events      event          symbol WSO2 /symbol          price 55.6 /price          volume 100 /volume      /event /events ,POST,Content-Length:24#Content-Location:USA#Retry-After:120}Above event will generate output as below.~Output http event payload events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ~Output http event headersContent-Length:24,Content-Location:'USA',Retry-After:120,Content-Type:'application/xml',HTTP_METHOD:'POST',~Output http event propertiesHTTP_METHOD:'POST',HOST:'localhost',PORT:8009PROTOCOL:'http'TO:'/foo'", 
            "title": "http (Sink)"
        }, 
        {
            "location": "/api/latest/", 
            "text": "API Docs - v1.0.21\n\n\nSink\n\n\nhttp \n(Sink)\n\n\nThis extension publish the HTTP events in any HTTP method  POST, GET, PUT, DELETE  via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically.\n\n\n\nSyntax\n\n\n@sink(type=\nhttp\n, publisher.url=\nSTRING\n, basic.auth.username=\nSTRING\n, basic.auth.password=\nSTRING\n, https.truststore.file=\nSTRING\n, https.truststore.password=\nSTRING\n, headers=\nSTRING\n, method=\nSTRING\n, socket.idle.timeout=\nINT\n, chunk.disabled=\nBOOL\n, ssl.protocol=\nSTRING\n, parameters=\nSTRING\n, ciphers=\nSTRING\n, ssl.enabled.protocols=\nSTRING\n, client.enable.session.creation=\nSTRING\n, follow.redirect=\nBOOL\n, max.redirect.count=\nINT\n, tls.store.type=\nSTRING\n, proxy.host=\nSTRING\n, proxy.port=\nSTRING\n, proxy.username=\nSTRING\n, proxy.password=\nSTRING\n, client.bootstrap.configuration=\nSTRING\n, client.bootstrap.nodelay=\nBOOL\n, client.bootstrap.keepalive=\nBOOL\n, client.bootstrap.sendbuffersize=\nINT\n, client.bootstrap.recievebuffersize=\nINT\n, client.bootstrap.connect.timeout=\nINT\n, client.bootstrap.socket.reuse=\nBOOL\n, client.bootstrap.socket.timeout=\nSTRING\n, client.threadpool.configurations=\nSTRING\n, client.connection.pool.count=\nINT\n, client.max.active.connections.per.pool=\nINT\n, client.min.idle.connections.per.pool=\nINT\n, client.max.idle.connections.per.pool=\nINT\n, client.min.eviction.idle.time=\nSTRING\n, sender.thread.count=\nSTRING\n, event.group.executor.thread.size=\nSTRING\n, max.wait.for.client.connection.pool=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npublisher.url\n\n        \nThe URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use \nhttps\n instead of \nhttp\n in the publisher.url.e.g., \nhttp://localhost:8080/endpoint\n, \nhttps://localhost:8080/endpoint\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbasic.auth.username\n\n        \nThe username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI.\n\n        \n \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nbasic.auth.password\n\n        \nThe password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI.\n\n        \n \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nhttps.truststore.file\n\n        \nThe file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required.\n\n        \n${carbon.home}/resources/security/client-truststore.jks\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nhttps.truststore.password\n\n        \nThe password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password.\n\n        \nwso2carbon\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheaders\n\n        \nThe headers that should be included as a HTTP request headers. There can be any number of headers concatenated on following format. \"'header1:value1','header2:value2'\". User can include content-type header if he need to any specific type for payload if not system get the mapping type as the content-Type header (ie. @map(xml):application/xml,@map(json):application/json,@map(text):plain/text ) and if user does not include any mapping type then system gets the 'plain/text' as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header.\n\n        \n \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmethod\n\n        \nFor HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header.\n\n        \nPOST\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsocket.idle.timeout\n\n        \nSocket timeout value in millisecond\n\n        \n6000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nchunk.disabled\n\n        \nport: Port number of the remote service\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.protocol\n\n        \nThe SSL protocol version\n\n        \nTLS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nparameters\n\n        \nParameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\"\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nciphers\n\n        \nList of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.enabled.protocols\n\n        \nSSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.enable.session.creation\n\n        \nEnable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfollow.redirect\n\n        \nRedirect related enabled.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.redirect.count\n\n        \nMaximum redirect count.\n\n        \n5\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.store.type\n\n        \nTLS store type to be used.\n\n        \nJKS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nproxy.host\n\n        \nProxy server host\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nproxy.port\n\n        \nProxy server port\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nproxy.username\n\n        \nProxy server username\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nproxy.password\n\n        \nProxy server password\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.configuration\n\n        \nClient bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\"\n\n        \nTODO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.nodelay\n\n        \nHttp client no delay.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.keepalive\n\n        \nHttp client keep alive.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.sendbuffersize\n\n        \nHttp client send buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.recievebuffersize\n\n        \nHttp client receive buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.connect.timeout\n\n        \nHttp client connection timeout.\n\n        \n15000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.socket.reuse\n\n        \nTo enable http socket reuse.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.bootstrap.socket.timeout\n\n        \nHttp client socket timeout.\n\n        \n15\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.threadpool.configurations\n\n        \nThread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\"\n\n        \nTODO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.connection.pool.count\n\n        \nConnection pool count.\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.max.active.connections.per.pool\n\n        \nActive connections per pool.\n\n        \n-1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.min.idle.connections.per.pool\n\n        \nMinimum ideal connection per pool.\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.max.idle.connections.per.pool\n\n        \nMaximum ideal connection per pool.\n\n        \n100\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nclient.min.eviction.idle.time\n\n        \nMinimum eviction idle time.\n\n        \n5 * 60 * 1000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsender.thread.count\n\n        \nHttp sender thread count.\n\n        \n20\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nevent.group.executor.thread.size\n\n        \nEvent group executor thread size.\n\n        \n15\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.wait.for.client.connection.pool\n\n        \nMaximum wait for client connection pool.\n\n        \n60000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nclientBootstrapBossGroupSize\n\n        \nproperty to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads.\n\n        \nNumber of available processors\n\n        \nAny integer\n\n    \n\n    \n\n        \nclientBootstrapWorkerGroupSize\n\n        \nproperty to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode.\n\n        \n(Number of available processors)\n2\n\n        \nAny integer\n\n    \n\n    \n\n        \nclientBootstrapClientGroupSize\n\n        \nproperty to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode.\n\n        \n(Number of available processors)\n2\n\n        \nAny integer\n\n    \n\n    \n\n        \ntrustStoreLocation\n\n        \nThe default truststore file path.\n\n        \n${carbon.home}/resources/security/client-truststore.jks\n\n        \nPath to client-truststore.jks\n\n    \n\n    \n\n        \ntrustStorePassword\n\n        \nThe default truststore password.\n\n        \nwso2carbon\n\n        \nTruststore password\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers=\n'content-type:xml','content-length:94'\n,client.bootstrap.configuration=\n'client.bootstrap.socket.timeout:20','client.bootstrap.worker.group.size:10'\n,client.pool.configuration=\n'client.connection.pool.count:10','client.max.active.connections.per.pool:1'\n @map(type='xml' , @payload('{{payloadBody}}')))define stream FooStream (payloadBody String, method string, headers string);\n\n\n\n\n\nIf it is xml mapping expected input should be in following format for FooStream:{\nevents\n    \nevent\n        \nsymbol\nWSO2\n/symbol\n        \nprice\n55.6\n/price\n        \nvolume\n100\n/volume\n    \n/event\n/events\n,POST,Content-Length:24#Content-Location:USA#Retry-After:120}Above event will generate output as below.~Output http event payload\nevents\nevent\nsymbol\nWSO2\n/symbol\nprice\n55.6\n/price\nvolume\n100\n/volume\n/event\n/events\n~Output http event headersContent-Length:24,Content-Location:'USA',Retry-After:120,Content-Type:'application/xml',HTTP_METHOD:'POST',~Output http event propertiesHTTP_METHOD:'POST',HOST:'localhost',PORT:8009PROTOCOL:'http'TO:'/foo'\n\n\n\nhttp-response \n(Sink)\n\n\nThis extension send the response to the http-sync source having the same source.id. user can add any number of response headers for each event dynamically.\n\n\n\nSyntax\n\n\n@sink(type=\nhttp-response\n, source.id=\nSTRING\n, message.id=\nSTRING\n, headers=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsource.id\n\n        \nIdentifier of the source.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmessage.id\n\n        \nIdentifier of the message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nheaders\n\n        \nThe headers that should be included as HTTP response headers. There can be any number of headers concatenated on following format. \"'header1:value1','header2:value2'\" User can include content-type header if he/she need to have any specific type for payload. If not system get the mapping type as the content-Type header (ie. @map(xml):application/xml, @map(json):application/json, @map(text):plain/text) and if user does not include any mapping type then system gets the 'plain/text' as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it  as content-length header.\n\n        \n \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='http-sync',source.id='sampleSourceId',message.id='{{messageId}}',headers=\n'content-type:json','content-length:94'\n@map(type='json' , @payload('{{payloadBody}}')))define stream FooStream (payloadBody String, messageId string, headers string);\n\n\n\n\n\nIf it is json mapping expected input should be in following format for FooStream:{{\"events\":\n{\"event\":\n\"symbol\":WSO2,\n\"price\":55.6,\n\"volume\":100,\n}\n},0cf708b1-7eae-440b-a93e-e72f801b486a,Content-Length:24#Content-Location:USA}Above event will generate response for the matching source message as below.~Output http event payload{\"events\":\n{\"event\":\n\"symbol\":WSO2,\n\"price\":55.6,\n\"volume\":100,\n}\n}\n~Output http event headersContent-Length:24,Content-Location:'USA',Content-Type:'application/json',\n\n\n\nSource\n\n\nhttp \n(Source)\n\n\nThe HTTP source receives POST requests via HTTP or HTTPS in format such as \ntext\n, \nXML\n and \nJSON\n. If required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service.\n\n\n\nSyntax\n\n\n@source(type=\nhttp\n, receiver.url=\nSTRING\n, basic.auth.enabled=\nSTRING\n, worker.count=\nSTRING\n, socket.idle.timeout=\nINT\n, ssl.verify.client=\nSTRING\n, ssl.protocol=\nSTRING\n, tls.store.type=\nSTRING\n, parameters=\nSTRING\n, ciphers=\nSTRING\n, ssl.enabled.protocols=\nSTRING\n, server.enable.session.creation=\nSTRING\n, server.supported.snimatchers=\nSTRING\n, server.suported.server.names=\nSTRING\n, request.size.validation.configuration=\nSTRING\n, request.size.validation=\nSTRING\n, request.size.validation.maximum.value=\nSTRING\n, request.size.validation.reject.status.code=\nSTRING\n, request.size.validation.reject.message=\nSTRING\n, request.size.validation.reject.message.content.type=\nSTRING\n, header.size.validation=\nSTRING\n, header.validation.maximum.request.line=\nSTRING\n, header.validation.maximum.size=\nSTRING\n, header.validation.maximum.chunk.size=\nSTRING\n, header.validation.reject.status.code=\nSTRING\n, header.validation.reject.message=\nSTRING\n, header.validation.reject.message.content.type=\nSTRING\n, server.bootstrap.configuration=\nOBJECT\n, server.bootstrap.nodelay=\nBOOL\n, server.bootstrap.keepalive=\nBOOL\n, server.bootstrap.sendbuffersize=\nINT\n, server.bootstrap.recievebuffersize=\nINT\n, server.bootstrap.connect.timeout=\nINT\n, server.bootstrap.socket.reuse=\nBOOL\n, server.bootstrap.socket.timeout=\nBOOL\n, server.bootstrap.socket.backlog=\nBOOL\n, trace.log.enabled=\nBOOL\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nreceiver.url\n\n        \nThe URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format \nhttp://0.0.0.0:9763/\nappNAme\n/\nstreamName\nIf the user want to use SSL the url should be given in following format \nhttps://localhost:8080/\nstreamName\n\n        \nhttp://0.0.0.0:9763/\n/\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nbasic.auth.enabled\n\n        \nIf this is set to \ntrue\n, basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' \n\n        \nfalse\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nworker.count\n\n        \nThe number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering.\n\n        \n1\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsocket.idle.timeout\n\n        \nIdle timeout for HTTP connection.\n\n        \n120000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.verify.client\n\n        \nThe type of client certificate verification.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.protocol\n\n        \nssl/tls related options\n\n        \nTLS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.store.type\n\n        \nTLS store type.\n\n        \nJKS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nparameters\n\n        \nParameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\"\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nciphers\n\n        \nList of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.enabled.protocols\n\n        \nSSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.enable.session.creation\n\n        \nEnable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.supported.snimatchers\n\n        \nHttp SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.suported.server.names\n\n        \nHttp supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.configuration\n\n        \nParameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\"\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation\n\n        \nTo enable the request size validation.\n\n        \nfalse\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.maximum.value\n\n        \nIf request size is validated then maximum size.\n\n        \nInteger.MAX_VALUE\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.reject.status.code\n\n        \nIf request is exceed maximum size and request.size.validation is enabled then status code to be send as response.\n\n        \n401\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.reject.message\n\n        \nIf request is exceed maximum size and request.size.validation is enabled then status message to be send as response.\n\n        \nMessage is bigger than the valid size\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.reject.message.content.type\n\n        \nIf request is exceed maximum size and request.size.validation is enabled then content type to be send as response.\n\n        \nplain/text\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.size.validation\n\n        \nTo enable the header size validation.\n\n        \nfalse\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.maximum.request.line\n\n        \nIf header header validation is enabled then the maximum request line.\n\n        \n4096\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.maximum.size\n\n        \nIf header header validation is enabled then the maximum expected header size.\n\n        \n8192\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.maximum.chunk.size\n\n        \nIf header header validation is enabled then the maximum expected chunk size.\n\n        \n8192\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.reject.status.code\n\n        \n401\n\n        \nIf header is exceed maximum size and header.size.validation is enabled then status code to be send as response.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.reject.message\n\n        \nIf header is exceed maximum size and header.size.validation is enabled then message to be send as response.\n\n        \nMessage header is bigger than the valid size\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.reject.message.content.type\n\n        \nIf header is exceed maximum size and header.size.validation is enabled then content type to be send as response.\n\n        \nplain/text\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.configuration\n\n        \nParameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\"\n\n        \nnull\n\n        \nOBJECT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.nodelay\n\n        \nHttp server no delay.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.keepalive\n\n        \nHttp server keep alive.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.sendbuffersize\n\n        \nHttp server send buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.recievebuffersize\n\n        \nHttp server receive buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.connect.timeout\n\n        \nHttp server connection timeout.\n\n        \n15000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.socket.reuse\n\n        \nTo enable http socket reuse.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.socket.timeout\n\n        \nHttp server socket timeout.\n\n        \n15\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.socket.backlog\n\n        \nTHttp server socket backlog.\n\n        \n100\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntrace.log.enabled\n\n        \nHttp traffic monitoring.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nserverBootstrapBossGroupSize\n\n        \nproperty to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads.\n\n        \nNumber of available processors\n\n        \nAny integer\n\n    \n\n    \n\n        \nserverBootstrapWorkerGroupSize\n\n        \nproperty to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode.\n\n        \n(Number of available processors)\n2\n\n        \nAny integer\n\n    \n\n    \n\n        \nserverBootstrapClientGroupSize\n\n        \nproperty to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode.\n\n        \n(Number of available processors)\n2\n\n        \nAny integer\n\n    \n\n    \n\n        \ndefaultHost\n\n        \nThe default host of the transport.\n\n        \n0.0.0.0\n\n        \nAny valid host\n\n    \n\n    \n\n        \ndefaultHttpPort\n\n        \nThe default port if the default scheme is 'http'.\n\n        \n8280\n\n        \nAny valid port\n\n    \n\n    \n\n        \ndefaultHttpsPort\n\n        \nThe default port if the default scheme is 'https'.\n\n        \n8243\n\n        \nAny valid port\n\n    \n\n    \n\n        \ndefaultScheme\n\n        \nThe default protocol.\n\n        \nhttp\n\n        \nhttp\nhttps\n\n    \n\n    \n\n        \nkeyStoreLocation\n\n        \nThe default keystore file path.\n\n        \n${carbon.home}/resources/security/wso2carbon.jks\n\n        \nPath to wso2carbon.jks file\n\n    \n\n    \n\n        \nkeyStorePassword\n\n        \nThe default keystore password.\n\n        \nwso2carbon\n\n        \nString of keystore password\n\n    \n\n    \n\n        \ncertPassword\n\n        \nThe default cert password.\n\n        \nwso2carbon\n\n        \nString of cert password\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters=\n'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2'\n,request.size.validation.configuration=\nrequest.size.validation:true\n,server.bootstrap.configuration=\nserver.bootstrap.socket.timeout:25\n @map(type='xml'))\ndefine stream FooStream (symbol string, price float, volume long);\n\n\n\n\n\nAbove source listenerConfiguration performs a default XML input mapping. The expected input is as follows:\nevents\nevent\nsymbol\nWSO2\n/symbol\nprice\n55.6\n/price\nvolume\n100\n/volume\n/event\n/events\nIf basic authentication is enabled via the \nbasic.auth.enabled='true\n setting, each input event is also expected to contain the \nAuthorization:'Basic encodeBase64(username:Password)'\n header.\n\n\n\nhttp-request \n(Source)\n\n\nThe HTTP source receives POST requests via HTTP or HTTPS in format such as \ntext\n, \nXML\n and \nJSON\n. If required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service.\n\n\n\nSyntax\n\n\n@source(type=\nhttp-request\n, receiver.url=\nSTRING\n, source.id=\nSTRING\n, connection.timeout=\nINT\n, basic.auth.enabled=\nSTRING\n, worker.count=\nSTRING\n, socket.idle.timeout=\nINT\n, ssl.verify.client=\nSTRING\n, ssl.protocol=\nSTRING\n, tls.store.type=\nSTRING\n, parameters=\nSTRING\n, ciphers=\nSTRING\n, ssl.enabled.protocols=\nSTRING\n, server.enable.session.creation=\nSTRING\n, server.supported.snimatchers=\nSTRING\n, server.suported.server.names=\nSTRING\n, request.size.validation.configuration=\nSTRING\n, request.size.validation=\nSTRING\n, request.size.validation.maximum.value=\nSTRING\n, request.size.validation.reject.status.code=\nSTRING\n, request.size.validation.reject.message=\nSTRING\n, request.size.validation.reject.message.content.type=\nSTRING\n, header.size.validation=\nSTRING\n, header.validation.maximum.request.line=\nSTRING\n, header.validation.maximum.size=\nSTRING\n, header.validation.maximum.chunk.size=\nSTRING\n, header.validation.reject.status.code=\nSTRING\n, header.validation.reject.message=\nSTRING\n, header.validation.reject.message.content.type=\nSTRING\n, server.bootstrap.configuration=\nOBJECT\n, server.bootstrap.nodelay=\nBOOL\n, server.bootstrap.keepalive=\nBOOL\n, server.bootstrap.sendbuffersize=\nINT\n, server.bootstrap.recievebuffersize=\nINT\n, server.bootstrap.connect.timeout=\nINT\n, server.bootstrap.socket.reuse=\nBOOL\n, server.bootstrap.socket.timeout=\nBOOL\n, server.bootstrap.socket.backlog=\nBOOL\n, trace.log.enabled=\nBOOL\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nreceiver.url\n\n        \nThe URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format \nhttp://0.0.0.0:9763/\nappNAme\n/\nstreamName\nIf the user want to use SSL the url should be given in following format \nhttps://localhost:8080/\nstreamName\n\n        \nhttp://0.0.0.0:9763/\n/\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsource.id\n\n        \nIdentifier need to map the source to sink.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconnection.timeout\n\n        \nConnection timeout in milliseconds. If the mapped http-response sink does not get a correlated message, after this timeout value, a timeout response is sent\n\n        \n120000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nbasic.auth.enabled\n\n        \nIf this is set to \ntrue\n, basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' \n\n        \nfalse\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nworker.count\n\n        \nThe number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering.\n\n        \n1\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nsocket.idle.timeout\n\n        \nIdle timeout for HTTP connection.\n\n        \n120000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.verify.client\n\n        \nThe type of client certificate verification.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.protocol\n\n        \nssl/tls related options\n\n        \nTLS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.store.type\n\n        \nTLS store type.\n\n        \nJKS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nparameters\n\n        \nParameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\"\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nciphers\n\n        \nList of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.enabled.protocols\n\n        \nSSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.enable.session.creation\n\n        \nEnable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.supported.snimatchers\n\n        \nHttp SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.suported.server.names\n\n        \nHttp supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server'\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.configuration\n\n        \nParameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\"\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation\n\n        \nTo enable the request size validation.\n\n        \nfalse\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.maximum.value\n\n        \nIf request size is validated then maximum size.\n\n        \nInteger.MAX_VALUE\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.reject.status.code\n\n        \nIf request is exceed maximum size and request.size.validation is enabled then status code to be send as response.\n\n        \n401\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.reject.message\n\n        \nIf request is exceed maximum size and request.size.validation is enabled then status message to be send as response.\n\n        \nMessage is bigger than the valid size\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrequest.size.validation.reject.message.content.type\n\n        \nIf request is exceed maximum size and request.size.validation is enabled then content type to be send as response.\n\n        \nplain/text\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.size.validation\n\n        \nTo enable the header size validation.\n\n        \nfalse\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.maximum.request.line\n\n        \nIf header header validation is enabled then the maximum request line.\n\n        \n4096\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.maximum.size\n\n        \nIf header header validation is enabled then the maximum expected header size.\n\n        \n8192\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.maximum.chunk.size\n\n        \nIf header header validation is enabled then the maximum expected chunk size.\n\n        \n8192\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.reject.status.code\n\n        \n401\n\n        \nIf header is exceed maximum size and header.size.validation is enabled then status code to be send as response.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.reject.message\n\n        \nIf header is exceed maximum size and header.size.validation is enabled then message to be send as response.\n\n        \nMessage header is bigger than the valid size\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.validation.reject.message.content.type\n\n        \nIf header is exceed maximum size and header.size.validation is enabled then content type to be send as response.\n\n        \nplain/text\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.configuration\n\n        \nParameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\"\n\n        \nnull\n\n        \nOBJECT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.nodelay\n\n        \nHttp server no delay.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.keepalive\n\n        \nHttp server keep alive.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.sendbuffersize\n\n        \nHttp server send buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.recievebuffersize\n\n        \nHttp server receive buffer size.\n\n        \n1048576\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.connect.timeout\n\n        \nHttp server connection timeout.\n\n        \n15000\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.socket.reuse\n\n        \nTo enable http socket reuse.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.socket.timeout\n\n        \nHttp server socket timeout.\n\n        \n15\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nserver.bootstrap.socket.backlog\n\n        \nTHttp server socket backlog.\n\n        \n100\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntrace.log.enabled\n\n        \nHttp traffic monitoring.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nSystem Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Parameters\n\n    \n\n    \n\n        \nserverBootstrapBossGroupSize\n\n        \nproperty to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads.\n\n        \nNumber of available processors\n\n        \nAny integer\n\n    \n\n    \n\n        \nserverBootstrapWorkerGroupSize\n\n        \nproperty to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode.\n\n        \n(Number of available processors)\n2\n\n        \nAny integer\n\n    \n\n    \n\n        \nserverBootstrapClientGroupSize\n\n        \nproperty to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode.\n\n        \n(Number of available processors)\n2\n\n        \nAny integer\n\n    \n\n    \n\n        \ndefaultHost\n\n        \nThe default host of the transport.\n\n        \n0.0.0.0\n\n        \nAny valid host\n\n    \n\n    \n\n        \ndefaultHttpPort\n\n        \nThe default port if the default scheme is 'http'.\n\n        \n8280\n\n        \nAny valid port\n\n    \n\n    \n\n        \ndefaultHttpsPort\n\n        \nThe default port if the default scheme is 'https'.\n\n        \n8243\n\n        \nAny valid port\n\n    \n\n    \n\n        \ndefaultScheme\n\n        \nThe default protocol.\n\n        \nhttp\n\n        \nhttp\nhttps\n\n    \n\n    \n\n        \nkeyStoreLocation\n\n        \nThe default keystore file path.\n\n        \n${carbon.home}/resources/security/wso2carbon.jks\n\n        \nPath to wso2carbon.jks file\n\n    \n\n    \n\n        \nkeyStorePassword\n\n        \nThe default keystore password.\n\n        \nwso2carbon\n\n        \nString of keystore password\n\n    \n\n    \n\n        \ncertPassword\n\n        \nThe default cert password.\n\n        \nwso2carbon\n\n        \nString of cert password\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='http-sync', source.id='samplesourceid, receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters=\n'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2'\n,request.size.validation.configuration=\nrequest.size.validation:true\n,server.bootstrap.configuration=\nserver.bootstrap.socket.timeout:25\n @map(type='json @attributes(messageId='trp:messageId',symbol='$.events.event.symbol',price='$.events.event.price',volume='$.events.event.volume')))\ndefine stream FooStream (messageId string, symbol string, price float, volume long);\n\n\n\n\n\nThe expected input is as follows:{\"events\":\n{\"event\":\n\"symbol\":WSO2,\n\"price\":55.6,\n\"volume\":100,\n}\n}\nIf basic authentication is enabled via the \nbasic.auth.enabled='true\n setting, each input event is also expected to contain the \nAuthorization:'Basic encodeBase64(username:Password)'\n header.", 
            "title": "latest"
        }, 
        {
            "location": "/api/latest/#api-docs-v1021", 
            "text": "", 
            "title": "API Docs - v1.0.21"
        }, 
        {
            "location": "/api/latest/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/latest/#http-sink", 
            "text": "This extension publish the HTTP events in any HTTP method  POST, GET, PUT, DELETE  via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically.  Syntax  @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         publisher.url \n         The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use  https  instead of  http  in the publisher.url.e.g.,  http://localhost:8080/endpoint ,  https://localhost:8080/endpoint \n         \n         STRING \n         No \n         No \n     \n     \n         basic.auth.username \n         The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. \n           \n         STRING \n         Yes \n         No \n     \n     \n         basic.auth.password \n         The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. \n           \n         STRING \n         Yes \n         No \n     \n     \n         https.truststore.file \n         The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. \n         ${carbon.home}/resources/security/client-truststore.jks \n         STRING \n         Yes \n         No \n     \n     \n         https.truststore.password \n         The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. \n         wso2carbon \n         STRING \n         Yes \n         No \n     \n     \n         headers \n         The headers that should be included as a HTTP request headers. There can be any number of headers concatenated on following format. \"'header1:value1','header2:value2'\". User can include content-type header if he need to any specific type for payload if not system get the mapping type as the content-Type header (ie. @map(xml):application/xml,@map(json):application/json,@map(text):plain/text ) and if user does not include any mapping type then system gets the 'plain/text' as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header. \n           \n         STRING \n         Yes \n         No \n     \n     \n         method \n         For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. \n         POST \n         STRING \n         Yes \n         No \n     \n     \n         socket.idle.timeout \n         Socket timeout value in millisecond \n         6000 \n         INT \n         Yes \n         No \n     \n     \n         chunk.disabled \n         port: Port number of the remote service \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         ssl.protocol \n         The SSL protocol version \n         TLS \n         STRING \n         Yes \n         No \n     \n     \n         parameters \n         Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ciphers \n         List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ssl.enabled.protocols \n         SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         client.enable.session.creation \n         Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         follow.redirect \n         Redirect related enabled. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         max.redirect.count \n         Maximum redirect count. \n         5 \n         INT \n         Yes \n         No \n     \n     \n         tls.store.type \n         TLS store type to be used. \n         JKS \n         STRING \n         Yes \n         No \n     \n     \n         proxy.host \n         Proxy server host \n         null \n         STRING \n         Yes \n         No \n     \n     \n         proxy.port \n         Proxy server port \n         null \n         STRING \n         Yes \n         No \n     \n     \n         proxy.username \n         Proxy server username \n         null \n         STRING \n         Yes \n         No \n     \n     \n         proxy.password \n         Proxy server password \n         null \n         STRING \n         Yes \n         No \n     \n     \n         client.bootstrap.configuration \n         Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" \n         TODO \n         STRING \n         Yes \n         No \n     \n     \n         client.bootstrap.nodelay \n         Http client no delay. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         client.bootstrap.keepalive \n         Http client keep alive. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         client.bootstrap.sendbuffersize \n         Http client send buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         client.bootstrap.recievebuffersize \n         Http client receive buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         client.bootstrap.connect.timeout \n         Http client connection timeout. \n         15000 \n         INT \n         Yes \n         No \n     \n     \n         client.bootstrap.socket.reuse \n         To enable http socket reuse. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         client.bootstrap.socket.timeout \n         Http client socket timeout. \n         15 \n         STRING \n         Yes \n         No \n     \n     \n         client.threadpool.configurations \n         Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" \n         TODO \n         STRING \n         Yes \n         No \n     \n     \n         client.connection.pool.count \n         Connection pool count. \n         0 \n         INT \n         Yes \n         No \n     \n     \n         client.max.active.connections.per.pool \n         Active connections per pool. \n         -1 \n         INT \n         Yes \n         No \n     \n     \n         client.min.idle.connections.per.pool \n         Minimum ideal connection per pool. \n         0 \n         INT \n         Yes \n         No \n     \n     \n         client.max.idle.connections.per.pool \n         Maximum ideal connection per pool. \n         100 \n         INT \n         Yes \n         No \n     \n     \n         client.min.eviction.idle.time \n         Minimum eviction idle time. \n         5 * 60 * 1000 \n         STRING \n         Yes \n         No \n     \n     \n         sender.thread.count \n         Http sender thread count. \n         20 \n         STRING \n         Yes \n         No \n     \n     \n         event.group.executor.thread.size \n         Event group executor thread size. \n         15 \n         STRING \n         Yes \n         No \n     \n     \n         max.wait.for.client.connection.pool \n         Maximum wait for client connection pool. \n         60000 \n         STRING \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         clientBootstrapBossGroupSize \n         property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. \n         Number of available processors \n         Any integer \n     \n     \n         clientBootstrapWorkerGroupSize \n         property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. \n         (Number of available processors) 2 \n         Any integer \n     \n     \n         clientBootstrapClientGroupSize \n         property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. \n         (Number of available processors) 2 \n         Any integer \n     \n     \n         trustStoreLocation \n         The default truststore file path. \n         ${carbon.home}/resources/security/client-truststore.jks \n         Path to client-truststore.jks \n     \n     \n         trustStorePassword \n         The default truststore password. \n         wso2carbon \n         Truststore password \n       Examples  EXAMPLE 1  @sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers= 'content-type:xml','content-length:94' ,client.bootstrap.configuration= 'client.bootstrap.socket.timeout:20','client.bootstrap.worker.group.size:10' ,client.pool.configuration= 'client.connection.pool.count:10','client.max.active.connections.per.pool:1'  @map(type='xml' , @payload('{{payloadBody}}')))define stream FooStream (payloadBody String, method string, headers string);  If it is xml mapping expected input should be in following format for FooStream:{ events      event          symbol WSO2 /symbol          price 55.6 /price          volume 100 /volume      /event /events ,POST,Content-Length:24#Content-Location:USA#Retry-After:120}Above event will generate output as below.~Output http event payload events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ~Output http event headersContent-Length:24,Content-Location:'USA',Retry-After:120,Content-Type:'application/xml',HTTP_METHOD:'POST',~Output http event propertiesHTTP_METHOD:'POST',HOST:'localhost',PORT:8009PROTOCOL:'http'TO:'/foo'", 
            "title": "http (Sink)"
        }, 
        {
            "location": "/api/latest/#http-response-sink", 
            "text": "This extension send the response to the http-sync source having the same source.id. user can add any number of response headers for each event dynamically.  Syntax  @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         source.id \n         Identifier of the source. \n         \n         STRING \n         No \n         No \n     \n     \n         message.id \n         Identifier of the message. \n         \n         STRING \n         No \n         Yes \n     \n     \n         headers \n         The headers that should be included as HTTP response headers. There can be any number of headers concatenated on following format. \"'header1:value1','header2:value2'\" User can include content-type header if he/she need to have any specific type for payload. If not system get the mapping type as the content-Type header (ie. @map(xml):application/xml, @map(json):application/json, @map(text):plain/text) and if user does not include any mapping type then system gets the 'plain/text' as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it  as content-length header. \n           \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @sink(type='http-sync',source.id='sampleSourceId',message.id='{{messageId}}',headers= 'content-type:json','content-length:94' @map(type='json' , @payload('{{payloadBody}}')))define stream FooStream (payloadBody String, messageId string, headers string);  If it is json mapping expected input should be in following format for FooStream:{{\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } },0cf708b1-7eae-440b-a93e-e72f801b486a,Content-Length:24#Content-Location:USA}Above event will generate response for the matching source message as below.~Output http event payload{\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } ~Output http event headersContent-Length:24,Content-Location:'USA',Content-Type:'application/json',", 
            "title": "http-response (Sink)"
        }, 
        {
            "location": "/api/latest/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/latest/#http-source", 
            "text": "The HTTP source receives POST requests via HTTP or HTTPS in format such as  text ,  XML  and  JSON . If required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service.  Syntax  @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= STRING , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         receiver.url \n         The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format  http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format  https://localhost:8080/ streamName \n         http://0.0.0.0:9763/ / \n         STRING \n         Yes \n         No \n     \n     \n         basic.auth.enabled \n         If this is set to  true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false'  \n         false \n         STRING \n         Yes \n         No \n     \n     \n         worker.count \n         The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. \n         1 \n         STRING \n         Yes \n         No \n     \n     \n         socket.idle.timeout \n         Idle timeout for HTTP connection. \n         120000 \n         INT \n         Yes \n         No \n     \n     \n         ssl.verify.client \n         The type of client certificate verification. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ssl.protocol \n         ssl/tls related options \n         TLS \n         STRING \n         Yes \n         No \n     \n     \n         tls.store.type \n         TLS store type. \n         JKS \n         STRING \n         Yes \n         No \n     \n     \n         parameters \n         Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ciphers \n         List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ssl.enabled.protocols \n         SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         server.enable.session.creation \n         Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         server.supported.snimatchers \n         Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         server.suported.server.names \n         Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.configuration \n         Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" \n         null \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation \n         To enable the request size validation. \n         false \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.maximum.value \n         If request size is validated then maximum size. \n         Integer.MAX_VALUE \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.reject.status.code \n         If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. \n         401 \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.reject.message \n         If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. \n         Message is bigger than the valid size \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.reject.message.content.type \n         If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. \n         plain/text \n         STRING \n         Yes \n         No \n     \n     \n         header.size.validation \n         To enable the header size validation. \n         false \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.maximum.request.line \n         If header header validation is enabled then the maximum request line. \n         4096 \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.maximum.size \n         If header header validation is enabled then the maximum expected header size. \n         8192 \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.maximum.chunk.size \n         If header header validation is enabled then the maximum expected chunk size. \n         8192 \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.reject.status.code \n         401 \n         If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.reject.message \n         If header is exceed maximum size and header.size.validation is enabled then message to be send as response. \n         Message header is bigger than the valid size \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.reject.message.content.type \n         If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. \n         plain/text \n         STRING \n         Yes \n         No \n     \n     \n         server.bootstrap.configuration \n         Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" \n         null \n         OBJECT \n         Yes \n         No \n     \n     \n         server.bootstrap.nodelay \n         Http server no delay. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.keepalive \n         Http server keep alive. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.sendbuffersize \n         Http server send buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         server.bootstrap.recievebuffersize \n         Http server receive buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         server.bootstrap.connect.timeout \n         Http server connection timeout. \n         15000 \n         INT \n         Yes \n         No \n     \n     \n         server.bootstrap.socket.reuse \n         To enable http socket reuse. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.socket.timeout \n         Http server socket timeout. \n         15 \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.socket.backlog \n         THttp server socket backlog. \n         100 \n         BOOL \n         Yes \n         No \n     \n     \n         trace.log.enabled \n         Http traffic monitoring. \n         false \n         BOOL \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         serverBootstrapBossGroupSize \n         property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. \n         Number of available processors \n         Any integer \n     \n     \n         serverBootstrapWorkerGroupSize \n         property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. \n         (Number of available processors) 2 \n         Any integer \n     \n     \n         serverBootstrapClientGroupSize \n         property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. \n         (Number of available processors) 2 \n         Any integer \n     \n     \n         defaultHost \n         The default host of the transport. \n         0.0.0.0 \n         Any valid host \n     \n     \n         defaultHttpPort \n         The default port if the default scheme is 'http'. \n         8280 \n         Any valid port \n     \n     \n         defaultHttpsPort \n         The default port if the default scheme is 'https'. \n         8243 \n         Any valid port \n     \n     \n         defaultScheme \n         The default protocol. \n         http \n         http https \n     \n     \n         keyStoreLocation \n         The default keystore file path. \n         ${carbon.home}/resources/security/wso2carbon.jks \n         Path to wso2carbon.jks file \n     \n     \n         keyStorePassword \n         The default keystore password. \n         wso2carbon \n         String of keystore password \n     \n     \n         certPassword \n         The default cert password. \n         wso2carbon \n         String of cert password \n       Examples  EXAMPLE 1  @source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' ,request.size.validation.configuration= request.size.validation:true ,server.bootstrap.configuration= server.bootstrap.socket.timeout:25  @map(type='xml'))\ndefine stream FooStream (symbol string, price float, volume long);  Above source listenerConfiguration performs a default XML input mapping. The expected input is as follows: events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events If basic authentication is enabled via the  basic.auth.enabled='true  setting, each input event is also expected to contain the  Authorization:'Basic encodeBase64(username:Password)'  header.", 
            "title": "http (Source)"
        }, 
        {
            "location": "/api/latest/#http-request-source", 
            "text": "The HTTP source receives POST requests via HTTP or HTTPS in format such as  text ,  XML  and  JSON . If required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service.  Syntax  @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= STRING , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         receiver.url \n         The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format  http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format  https://localhost:8080/ streamName \n         http://0.0.0.0:9763/ / \n         STRING \n         Yes \n         No \n     \n     \n         source.id \n         Identifier need to map the source to sink. \n         \n         STRING \n         No \n         No \n     \n     \n         connection.timeout \n         Connection timeout in milliseconds. If the mapped http-response sink does not get a correlated message, after this timeout value, a timeout response is sent \n         120000 \n         INT \n         Yes \n         No \n     \n     \n         basic.auth.enabled \n         If this is set to  true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false'  \n         false \n         STRING \n         Yes \n         No \n     \n     \n         worker.count \n         The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. \n         1 \n         STRING \n         Yes \n         No \n     \n     \n         socket.idle.timeout \n         Idle timeout for HTTP connection. \n         120000 \n         INT \n         Yes \n         No \n     \n     \n         ssl.verify.client \n         The type of client certificate verification. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ssl.protocol \n         ssl/tls related options \n         TLS \n         STRING \n         Yes \n         No \n     \n     \n         tls.store.type \n         TLS store type. \n         JKS \n         STRING \n         Yes \n         No \n     \n     \n         parameters \n         Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ciphers \n         List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         ssl.enabled.protocols \n         SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         server.enable.session.creation \n         Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         server.supported.snimatchers \n         Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         server.suported.server.names \n         Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' \n         null \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.configuration \n         Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" \n         null \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation \n         To enable the request size validation. \n         false \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.maximum.value \n         If request size is validated then maximum size. \n         Integer.MAX_VALUE \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.reject.status.code \n         If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. \n         401 \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.reject.message \n         If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. \n         Message is bigger than the valid size \n         STRING \n         Yes \n         No \n     \n     \n         request.size.validation.reject.message.content.type \n         If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. \n         plain/text \n         STRING \n         Yes \n         No \n     \n     \n         header.size.validation \n         To enable the header size validation. \n         false \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.maximum.request.line \n         If header header validation is enabled then the maximum request line. \n         4096 \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.maximum.size \n         If header header validation is enabled then the maximum expected header size. \n         8192 \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.maximum.chunk.size \n         If header header validation is enabled then the maximum expected chunk size. \n         8192 \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.reject.status.code \n         401 \n         If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.reject.message \n         If header is exceed maximum size and header.size.validation is enabled then message to be send as response. \n         Message header is bigger than the valid size \n         STRING \n         Yes \n         No \n     \n     \n         header.validation.reject.message.content.type \n         If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. \n         plain/text \n         STRING \n         Yes \n         No \n     \n     \n         server.bootstrap.configuration \n         Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" \n         null \n         OBJECT \n         Yes \n         No \n     \n     \n         server.bootstrap.nodelay \n         Http server no delay. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.keepalive \n         Http server keep alive. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.sendbuffersize \n         Http server send buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         server.bootstrap.recievebuffersize \n         Http server receive buffer size. \n         1048576 \n         INT \n         Yes \n         No \n     \n     \n         server.bootstrap.connect.timeout \n         Http server connection timeout. \n         15000 \n         INT \n         Yes \n         No \n     \n     \n         server.bootstrap.socket.reuse \n         To enable http socket reuse. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.socket.timeout \n         Http server socket timeout. \n         15 \n         BOOL \n         Yes \n         No \n     \n     \n         server.bootstrap.socket.backlog \n         THttp server socket backlog. \n         100 \n         BOOL \n         Yes \n         No \n     \n     \n         trace.log.enabled \n         Http traffic monitoring. \n         false \n         BOOL \n         Yes \n         No \n       System Parameters  \n     \n         Name \n         Description \n         Default Value \n         Possible Parameters \n     \n     \n         serverBootstrapBossGroupSize \n         property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. \n         Number of available processors \n         Any integer \n     \n     \n         serverBootstrapWorkerGroupSize \n         property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. \n         (Number of available processors) 2 \n         Any integer \n     \n     \n         serverBootstrapClientGroupSize \n         property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. \n         (Number of available processors) 2 \n         Any integer \n     \n     \n         defaultHost \n         The default host of the transport. \n         0.0.0.0 \n         Any valid host \n     \n     \n         defaultHttpPort \n         The default port if the default scheme is 'http'. \n         8280 \n         Any valid port \n     \n     \n         defaultHttpsPort \n         The default port if the default scheme is 'https'. \n         8243 \n         Any valid port \n     \n     \n         defaultScheme \n         The default protocol. \n         http \n         http https \n     \n     \n         keyStoreLocation \n         The default keystore file path. \n         ${carbon.home}/resources/security/wso2carbon.jks \n         Path to wso2carbon.jks file \n     \n     \n         keyStorePassword \n         The default keystore password. \n         wso2carbon \n         String of keystore password \n     \n     \n         certPassword \n         The default cert password. \n         wso2carbon \n         String of cert password \n       Examples  EXAMPLE 1  @source(type='http-sync', source.id='samplesourceid, receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' ,request.size.validation.configuration= request.size.validation:true ,server.bootstrap.configuration= server.bootstrap.socket.timeout:25  @map(type='json @attributes(messageId='trp:messageId',symbol='$.events.event.symbol',price='$.events.event.price',volume='$.events.event.volume')))\ndefine stream FooStream (messageId string, symbol string, price float, volume long);  The expected input is as follows:{\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } If basic authentication is enabled via the  basic.auth.enabled='true  setting, each input event is also expected to contain the  Authorization:'Basic encodeBase64(username:Password)'  header.", 
            "title": "http-request (Source)"
        }, 
        {
            "location": "/license/", 
            "text": "Copyright (c) 2017 WSO2 Inc. (\nhttp://www.wso2.org\n) All Rights Reserved.\n\n\nWSO2 Inc. licenses this file to you under the Apache License,\nVersion 2.0 (the \"License\"); you may not use this file except\nin compliance with the License.\nYou may obtain a copy of the License at\n\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n\n\n-------------------------------------------------------------------------\n                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \nLicense\n shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \nLicensor\n shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \nLegal Entity\n shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \ncontrol\n means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \nYou\n (or \nYour\n) shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \nSource\n form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \nObject\n form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \nWork\n shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \nDerivative Works\n shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \nContribution\n shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \nsubmitted\n\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \nNot a Contribution.\n\n\n   \nContributor\n shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \nNOTICE\n text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \nAS IS\n BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS", 
            "title": "License"
        }
    ]
}